{"version":3,"names":["appDiveTripBookingsCss","AppDiveTripBookingsStyle0","AppDiveTripBookings","this","availableSpots","componentWillLoad","tripDive","diveTrip","tripDives","tripDiveIndex","userSub","UserService","userProfile$","subscribe","user","userId","uid","updateBookingsList","userProfile","segmentTitles","notinterested","TranslationService","getTransl","interested","attend","disconnectedCallback","unsubscribe","bookingsList","usersList","bookings","orderBy","teamCount","currentTeam","team","map","booking","console","log","push","listItem","Object","assign","getMapDataUserDetails","userBooking","confirmedBookings","confirmedOrganiser","index","numberOfParticipants","updateView","segmentChanged","ev","detail","value","segment","toNumber","addBooking","confirmedUser","role","waitingRequest","DiveTripsService","sendBookingRequest","diveTripId","error","updateBooking","i","search","item","find","editBookings","isEditing","saveBookings","addTeam","teams","isNumber","reorderTeams","from","to","found","complete","render","h","key","class","lines","format","divePlan","dives","date","title","xxx","editable","length","slot","onClick","tag","text","undefined","mode","color","Environment","getAppColor","disabled","onIonChange","toString","layout","name","onIonItemReorder","skeleton","k","photoURL","src","displayName","style","maxWidth","marginLeft","appDiveTripCardCss","AppDiveTripCardStyle0","AppDiveTripCard","diveSites","divingCenters","update","findDiveSites","activateLogbook","loogBookButton","forEach","dive","DiveSitesService","diveSitesList","site","id","diveSiteId","DivingCentersService","divingCentersList","dc","divingCenterId","updateDivePlan","stopPropagation","updateDiveEmit","emit","removeDiveTrip","removeDiveTripEmit","addDivePlan","addDiveEmit","removeDivePlan","removeTripDiveEmit","createDivePlan","plan","configuration","DivePlansService","createNewDivePlan","createNewDivePlanWithConfiguration","fill","keys","getProfilePointsDetails","expand"],"sources":["src/components/udive/app/dive-trips/app-dive-trip-bookings/app-dive-trip-bookings.scss?tag=app-dive-trip-bookings","src/components/udive/app/dive-trips/app-dive-trip-bookings/app-dive-trip-bookings.tsx","src/components/udive/app/dive-trips/app-dive-trip-card/app-dive-trip-card.scss?tag=app-dive-trip-card","src/components/udive/app/dive-trips/app-dive-trip-card/app-dive-trip-card.tsx"],"sourcesContent":["app-dive-trip-bookings {\n  /* Component styles go here */\n  width: 100%;\n  height: 100%;\n}\n","import {Component, h, Prop, State, Element} from \"@stencil/core\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {\n  TripDive,\n  TeamMember,\n  DiveTrip,\n} from \"../../../../../interfaces/udive/dive-trip/diveTrip\";\nimport {isNumber, orderBy, toNumber} from \"lodash\";\nimport {UserService} from \"../../../../../services/common/user\";\nimport {DiveTripsService} from \"../../../../../services/udive/diveTrips\";\nimport {Subscription} from \"rxjs\";\nimport {format} from \"date-fns\";\nimport {Environment} from \"../../../../../global/env\";\n\n@Component({\n  tag: \"app-dive-trip-bookings\",\n  styleUrl: \"app-dive-trip-bookings.scss\",\n})\nexport class AppDiveTripBookings {\n  @Element() el: HTMLElement;\n  @Prop() diveTrip: DiveTrip;\n  @Prop() diveTripId: string;\n  @Prop() tripDiveIndex: number;\n  @Prop() editable = false;\n  @State() isEditing = false;\n  @State() segment: number = 0;\n  @State() tripDive: TripDive;\n  @State() bookingsList: any[];\n  availableSpots = [];\n  @State() waitingRequest = false;\n  @State() updateView = false;\n  segmentTitles: {\n    notinterested: string;\n    interested: string;\n    attend: string;\n  };\n  @State() userBooking: TeamMember;\n  userSub: Subscription;\n  userId: string;\n  usersList: any[];\n  loogBookButton: boolean;\n\n  componentWillLoad() {\n    this.tripDive = this.diveTrip.tripDives[this.tripDiveIndex];\n    this.userSub = UserService.userProfile$.subscribe((user) => {\n      this.userId = user && user.uid ? user.uid : null;\n      this.updateBookingsList();\n    });\n    this.userId =\n      UserService.userProfile && UserService.userProfile.uid\n        ? UserService.userProfile.uid\n        : null;\n    this.updateBookingsList();\n    this.segmentTitles = {\n      notinterested: TranslationService.getTransl(\n        \"not-interested\",\n        \"Not Interested\"\n      ),\n      interested: TranslationService.getTransl(\"interested\", \"Interested\"),\n      attend: TranslationService.getTransl(\"attend\", \"Attend\"),\n    };\n  }\n\n  disconnectedCallback() {\n    this.userSub.unsubscribe();\n  }\n\n  async updateBookingsList() {\n    this.bookingsList = [];\n    this.availableSpots = [];\n    this.usersList = [];\n    let bookings = orderBy(this.tripDive.bookings, [\"team\"]);\n\n    //reset team numbers starting from 0\n    let teamCount = 0;\n    let currentTeam = bookings[0] && bookings[0].team ? bookings[0].team : 0; //normally 0 - if >0 then bring it back to 0\n    bookings.map((booking) => {\n      if (booking.team > currentTeam) {\n        teamCount++;\n        currentTeam = booking.team;\n      }\n      booking.team = teamCount;\n    });\n    //reset bookings\n    this.tripDive.bookings = bookings;\n\n    currentTeam = -1;\n    console.log(\"this.tripDive\", this.tripDive);\n    for (let booking of bookings) {\n      if (booking.team > currentTeam) {\n        this.bookingsList.push(booking.team);\n        currentTeam = booking.team;\n      }\n      let listItem = {\n        ...booking,\n        user: await UserService.getMapDataUserDetails(booking.uid),\n      };\n      this.bookingsList.push(listItem);\n      if (this.userId && booking.uid === this.userId) {\n        this.userBooking = booking;\n      }\n    }\n    let confirmedBookings = 0;\n    this.tripDive.bookings.map((booking) => {\n      if (booking.confirmedOrganiser) {\n        confirmedBookings++;\n      }\n    });\n    for (\n      let index = 0;\n      index < this.tripDive.numberOfParticipants - confirmedBookings;\n      index++\n    ) {\n      this.availableSpots.push(0);\n    }\n    this.updateView = !this.updateView;\n  }\n  segmentChanged(ev) {\n    if (ev.detail.value) {\n      this.segment = toNumber(ev.detail.value);\n    }\n  }\n\n  async addBooking(ev) {\n    const confirmedUser =\n      ev.detail.value == \"true\"\n        ? true\n        : ev.detail.value == \"false\"\n          ? false\n          : null;\n    let booking: TeamMember = this.userBooking\n      ? this.userBooking\n      : {\n          role: \"diver\",\n          team: 0,\n          uid: this.userId,\n          confirmedUser: confirmedUser,\n          confirmedOrganiser: false,\n        };\n    try {\n      this.waitingRequest = true;\n      const bookings = await DiveTripsService.sendBookingRequest(\n        this.diveTripId,\n        this.tripDiveIndex,\n        booking.role,\n        booking.team,\n        booking.uid,\n        confirmedUser,\n        booking.confirmedOrganiser\n      );\n      this.waitingRequest = false;\n      this.tripDive.bookings = bookings;\n      this.updateBookingsList();\n    } catch (error) {\n      this.waitingRequest = false;\n    }\n  }\n\n  updateBooking(i, ev) {\n    const search = this.bookingsList[i];\n    const item = this.tripDive.bookings.find(\n      (booking) => booking.uid === search.uid\n    );\n    item.confirmedOrganiser =\n      ev.detail.value == \"true\"\n        ? true\n        : ev.detail.value == \"false\"\n          ? false\n          : null;\n  }\n\n  editBookings() {\n    this.isEditing = true;\n  }\n\n  saveBookings() {\n    this.isEditing = false;\n    this.updateBookingsList();\n  }\n\n  addTeam() {\n    //count number of teams\n    let teams = 0;\n    this.bookingsList.map((booking) => {\n      if (isNumber(booking)) teams = booking;\n    });\n    this.bookingsList.push(teams + 1);\n    this.updateView = !this.updateView;\n  }\n\n  reorderTeams(ev) {\n    const from = ev.detail.from; //starting position\n    const to = ev.detail.to; //end position\n    //find original item\n    const search = this.bookingsList[from];\n    const item = this.tripDive.bookings.find(\n      (booking) => booking.uid === search.uid\n    );\n    //find new position on bookingsList\n    let found = false;\n    let team = 0;\n    this.bookingsList.map((booking, i) => {\n      //set current team number\n      if (isNumber(booking)) team = booking;\n      if (to <= i && !found) {\n        item.team = team;\n        found = true;\n      }\n    });\n    this.bookingsList = ev.detail.complete(this.bookingsList);\n  }\n\n  render() {\n    return (\n      <ion-card>\n        <ion-card-header>\n          <ion-card-title>\n            <ion-item class=\"ion-no-padding\" lines=\"none\">\n              <ion-label>\n                {format(this.tripDive.divePlan.dives[0].date, \"PP\")}\n              </ion-label>\n            </ion-item>\n          </ion-card-title>\n          <ion-card-subtitle>\n            <ion-item class=\"ion-no-padding\" lines=\"none\">\n              <ion-label>\n                {this.tripDive.divePlan.title +\n                  \" -> \" +\n                  TranslationService.getTransl(\n                    \"max-participants\",\n                    \"Max xxx participants\",\n                    {xxx: this.tripDive.numberOfParticipants}\n                  )}\n              </ion-label>\n              {this.editable &&\n              this.tripDive.bookings &&\n              this.tripDive.bookings.length > 0 ? (\n                !this.isEditing ? (\n                  <ion-button slot=\"end\" onClick={() => this.editBookings()}>\n                    <my-transl tag=\"edit\" text=\"Edit\" />\n                  </ion-button>\n                ) : (\n                  [\n                    <ion-button slot=\"end\" onClick={() => this.addTeam()}>\n                      <my-transl tag=\"add-team\" text=\"Add Team\" />\n                    </ion-button>,\n                    <ion-button slot=\"end\" onClick={() => this.saveBookings()}>\n                      <my-transl tag=\"save\" text=\"Save\" />\n                    </ion-button>,\n                  ]\n                )\n              ) : undefined}\n            </ion-item>\n          </ion-card-subtitle>\n        </ion-card-header>\n        <ion-card-content>\n          {!this.editable ? (\n            <ion-segment\n              mode=\"ios\"\n              color={Environment.getAppColor()}\n              disabled={this.waitingRequest}\n              onIonChange={(ev) => this.addBooking(ev)}\n              value={\n                this.userBooking\n                  ? this.userBooking.confirmedUser.toString()\n                  : \"\"\n              }\n            >\n              <ion-segment-button value=\"\" layout=\"icon-start\">\n                <ion-icon name=\"close-outline\"></ion-icon>\n                <ion-label>{this.segmentTitles.notinterested}</ion-label>\n              </ion-segment-button>\n              <ion-segment-button value=\"false\" layout=\"icon-start\">\n                <ion-icon name=\"help-outline\"></ion-icon>\n                <ion-label>{this.segmentTitles.interested}</ion-label>\n              </ion-segment-button>\n              <ion-segment-button value=\"true\" layout=\"icon-start\">\n                <ion-icon name=\"checkmark-outline\"></ion-icon>\n                <ion-label>{this.segmentTitles.attend}</ion-label>\n              </ion-segment-button>\n            </ion-segment>\n          ) : undefined}\n\n          <ion-list>\n            <ion-reorder-group\n              disabled={!this.isEditing}\n              onIonItemReorder={(ev) => this.reorderTeams(ev)}\n            >\n              {this.waitingRequest && !this.userBooking ? (\n                <app-skeletons skeleton=\"diveTripBooking\" />\n              ) : undefined}\n              {this.bookingsList.map((booking, k) =>\n                isNumber(booking) ? (\n                  <ion-item-divider>\n                    <ion-label>Team {booking + 1}</ion-label>\n                  </ion-item-divider>\n                ) : booking.uid == this.userId && this.waitingRequest ? (\n                  <app-skeletons skeleton=\"diveTripBooking\" />\n                ) : (\n                  <ion-item>\n                    {!this.isEditing && booking.user.photoURL ? (\n                      <ion-avatar slot=\"start\">\n                        <ion-img src={booking.user.photoURL} />\n                      </ion-avatar>\n                    ) : (\n                      <ion-reorder slot=\"start\"></ion-reorder>\n                    )}\n                    <ion-label>{booking.user.displayName}</ion-label>\n                    {booking.confirmedUser ? (\n                      <ion-icon\n                        slot=\"end\"\n                        color=\"success\"\n                        name=\"checkmark-outline\"\n                      ></ion-icon>\n                    ) : (\n                      <ion-icon\n                        slot=\"end\"\n                        color=\"warning\"\n                        name=\"help-outline\"\n                      ></ion-icon>\n                    )}\n                    {!this.isEditing ? (\n                      booking.confirmedOrganiser ? (\n                        <ion-icon\n                          slot=\"end\"\n                          color=\"success\"\n                          name=\"checkmark-outline\"\n                        ></ion-icon>\n                      ) : (\n                        <ion-icon\n                          slot=\"end\"\n                          color=\"warning\"\n                          name=\"help-outline\"\n                        ></ion-icon>\n                      )\n                    ) : (\n                      <ion-segment\n                        style={{\n                          maxWidth: \"40%\",\n                          marginLeft: \"15%\",\n                        }}\n                        slot=\"end\"\n                        mode=\"ios\"\n                        color={Environment.getAppColor()}\n                        onIonChange={(ev) => this.updateBooking(k, ev)}\n                        value={booking.confirmedOrganiser.toString()}\n                      >\n                        <ion-segment-button value=\"\">\n                          <ion-icon\n                            color=\"danger\"\n                            name=\"close-outline\"\n                          ></ion-icon>\n                        </ion-segment-button>\n                        <ion-segment-button value=\"false\">\n                          <ion-icon\n                            color=\"warning\"\n                            name=\"help-outline\"\n                          ></ion-icon>\n                        </ion-segment-button>\n                        <ion-segment-button value=\"true\">\n                          <ion-icon\n                            color=\"success\"\n                            name=\"checkmark-outline\"\n                          ></ion-icon>\n                        </ion-segment-button>\n                      </ion-segment>\n                    )}\n                  </ion-item>\n                )\n              )}\n            </ion-reorder-group>\n            {this.availableSpots.map(() => (\n              <ion-item>\n                <ion-icon slot=\"start\" name=\"person-add-outline\"></ion-icon>\n                <ion-label>\n                  <my-transl tag=\"available\" text=\"Available\" />\n                </ion-label>\n              </ion-item>\n            ))}\n          </ion-list>\n        </ion-card-content>\n      </ion-card>\n    );\n  }\n}\n","app-dive-trip-card {\n  /* Component styles go here */\n  width: 100%;\n  height: 100%;\n}\n","import {\n  Component,\n  h,\n  Prop,\n  Event,\n  EventEmitter,\n  Watch,\n  State,\n  Element,\n} from \"@stencil/core\";\nimport {DivePlanModel} from \"../../../../../interfaces/udive/planner/dive-plan\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {TripDive} from \"../../../../../interfaces/udive/dive-trip/diveTrip\";\nimport {MapDataDiveSite} from \"../../../../../interfaces/udive/dive-site/diveSite\";\nimport {DiveSitesService} from \"../../../../../services/udive/diveSites\";\nimport {MapDataDivingCenter} from \"../../../../../interfaces/udive/diving-center/divingCenter\";\nimport {DivingCentersService} from \"../../../../../services/udive/divingCenters\";\nimport {Subscription} from \"rxjs\";\nimport {UserService} from \"../../../../../services/common/user\";\nimport {DivePlansService} from \"../../../../../services/udive/divePlans\";\nimport {format} from \"date-fns\";\nimport {toNumber} from \"lodash\";\nimport {Environment} from \"../../../../../global/env\";\n\n@Component({\n  tag: \"app-dive-trip-card\",\n  styleUrl: \"app-dive-trip-card.scss\",\n})\nexport class AppDiveTripCard {\n  @Element() el: HTMLElement;\n  @Prop({mutable: true}) tripDive: TripDive;\n  diveSites: MapDataDiveSite[] = [];\n  @Prop() editable = false;\n  @Event() updateDiveEmit: EventEmitter<DivePlanModel>;\n  @Event() addDiveEmit: EventEmitter<any>;\n  @Event() removeDiveTripEmit: EventEmitter<any>;\n  @Event() removeTripDiveEmit: EventEmitter<number>;\n  @Prop({mutable: true}) updateView = false;\n  @State() segment: number = 0;\n  divingCenters: MapDataDivingCenter[] = [];\n  userSub: Subscription;\n  userId: string;\n  @State() loogBookButton: boolean;\n\n  @Watch(\"updateView\")\n  update() {\n    this.findDiveSites();\n  }\n\n  componentWillLoad() {\n    this.findDiveSites();\n    this.userSub = UserService.userProfile$.subscribe((user) => {\n      this.userId = user && user.uid ? user.uid : null;\n      this.activateLogbook();\n    });\n    this.userId =\n      UserService.userProfile && UserService.userProfile.uid\n        ? UserService.userProfile.uid\n        : null;\n    this.activateLogbook();\n  }\n\n  activateLogbook() {\n    this.loogBookButton = false;\n    this.tripDive.bookings.map((booking) => {\n      if (booking.uid == this.userId) {\n        this.loogBookButton = true;\n      }\n    });\n  }\n\n  findDiveSites() {\n    this.diveSites = [];\n    this.divingCenters = [];\n    this.tripDive.divePlan.dives.forEach((dive) => {\n      this.diveSites.push(\n        DiveSitesService.diveSitesList.find(\n          (site) => site.id === dive.diveSiteId\n        )\n      );\n      this.divingCenters.push(\n        DivingCentersService.divingCentersList.find(\n          (dc) => dc.id === dive.divingCenterId\n        )\n      );\n    });\n  }\n\n  updateDivePlan(ev, index) {\n    ev.stopPropagation();\n    this.updateDiveEmit.emit(index);\n  }\n\n  removeDiveTrip() {\n    this.removeDiveTripEmit.emit();\n  }\n\n  addDivePlan() {\n    this.addDiveEmit.emit();\n  }\n\n  removeDivePlan(ev, i) {\n    ev.stopPropagation();\n    this.segment = this.segment - 1;\n    this.removeTripDiveEmit.emit(i);\n  }\n\n  segmentChanged(ev) {\n    if (ev.detail.value) {\n      this.segment = toNumber(ev.detail.value);\n    }\n  }\n\n  createDivePlan(plan) {\n    if (plan.configuration) {\n      DivePlansService.createNewDivePlan(plan);\n    } else {\n      //dummy plan\n      DivePlansService.createNewDivePlanWithConfiguration(plan);\n    }\n  }\n\n  render() {\n    return (\n      <ion-card>\n        <ion-card-header>\n          <ion-card-title>\n            <ion-item class=\"ion-no-padding\" lines=\"none\">\n              <ion-label>\n                {format(this.tripDive.divePlan.dives[0].date, \"PP\")}\n              </ion-label>\n              {this.editable\n                ? [\n                    <ion-button\n                      icon-only\n                      slot=\"end\"\n                      color=\"danger\"\n                      fill=\"clear\"\n                      onClick={() => this.removeDiveTrip()}\n                    >\n                      <ion-icon name=\"trash-bin-outline\"></ion-icon>\n                    </ion-button>,\n                    <ion-button\n                      icon-only\n                      slot=\"end\"\n                      color=\"divetrip\"\n                      fill=\"clear\"\n                      onClick={() => this.addDivePlan()}\n                    >\n                      <ion-icon name=\"add-circle\"></ion-icon>\n                    </ion-button>,\n                  ]\n                : undefined}\n            </ion-item>\n          </ion-card-title>\n          <ion-card-subtitle>\n            {this.tripDive.divePlan.title +\n              \" -> \" +\n              TranslationService.getTransl(\n                \"max-participants\",\n                \"Max xxx participants\",\n                {xxx: this.tripDive.numberOfParticipants}\n              )}\n          </ion-card-subtitle>\n        </ion-card-header>\n        <ion-card-content>\n          {this.tripDive.divePlan.dives.length > 1 ? (\n            <ion-toolbar>\n              <ion-segment\n                mode=\"md\"\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.segmentChanged(ev)}\n                value={this.segment.toString()}\n              >\n                {Object.keys(this.tripDive.divePlan.dives).map((i) => (\n                  <ion-segment-button value={i}>\n                    <ion-label>\n                      <my-transl tag=\"dive\" text=\"Dive\" />\n                      {\" \" +\n                        (toNumber(i) + 1) +\n                        \": \" +\n                        format(this.tripDive.divePlan.dives[i].date, \"p\")}\n                    </ion-label>\n                  </ion-segment-button>\n                ))}\n              </ion-segment>\n            </ion-toolbar>\n          ) : undefined}\n          <ion-card>\n            {this.diveSites[this.segment] ? (\n              <app-item-cover item={this.diveSites[this.segment]} />\n            ) : undefined}\n            <ion-card-header>\n              <ion-card-subtitle>\n                {this.diveSites[this.segment] ? (\n                  <h2>{this.diveSites[this.segment].displayName}</h2>\n                ) : undefined}\n                {this.divingCenters[this.segment] ? (\n                  <h3>{this.divingCenters[this.segment].displayName}</h3>\n                ) : undefined}\n              </ion-card-subtitle>\n              <ion-card-title>\n                <ion-item class=\"ion-no-padding\" lines=\"none\">\n                  <ion-label>\n                    {format(\n                      this.tripDive.divePlan.dives[this.segment].date,\n                      \"p\"\n                    )}\n                  </ion-label>\n                  {this.editable\n                    ? [\n                        this.segment > 0 ? (\n                          <ion-button\n                            icon-only\n                            slot=\"end\"\n                            color=\"danger\"\n                            fill=\"clear\"\n                            onClick={(ev) =>\n                              this.removeDivePlan(ev, this.segment)\n                            }\n                          >\n                            <ion-icon name=\"trash-bin-outline\"></ion-icon>\n                          </ion-button>\n                        ) : undefined,\n                        <ion-button\n                          icon-only\n                          slot=\"end\"\n                          color=\"primary\"\n                          fill=\"clear\"\n                          onClick={(ev) =>\n                            this.updateDivePlan(ev, this.segment)\n                          }\n                        >\n                          <ion-icon name=\"create\"></ion-icon>\n                        </ion-button>,\n                      ]\n                    : undefined}\n                </ion-item>\n              </ion-card-title>\n            </ion-card-header>\n            {this.tripDive.divePlan.configuration ? (\n              <ion-card-content>\n                {this.tripDive.divePlan.dives[this.segment]\n                  .getProfilePointsDetails()\n                  .map((detail) => (\n                    <p class=\"ion-text-start\">{detail}</p>\n                  ))}\n              </ion-card-content>\n            ) : undefined}\n          </ion-card>\n        </ion-card-content>\n        {!this.editable && this.loogBookButton ? (\n          <ion-button\n            expand=\"full\"\n            color=\"secondary\"\n            onClick={() => this.createDivePlan(this.tripDive.divePlan)}\n          >\n            {this.tripDive.divePlan.dives.length == 1 ? (\n              <my-transl tag=\"log-dive\" text=\"Log Dive\" />\n            ) : (\n              <my-transl tag=\"log-dives\" text=\"Log Dives\" />\n            )}\n          </ion-button>\n        ) : undefined}\n      </ion-card>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}