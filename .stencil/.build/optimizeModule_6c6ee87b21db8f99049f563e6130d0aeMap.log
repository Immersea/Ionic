{"version":3,"names":["StripeAPIController","constructor","this","shouldBeAsync","publishableKeyTest_Immersea","publishableKeyProd_Immersea","publishableKeyTest_ORange","publishableKeyProd_ORange","test","immersea","publishableKey","stripe","initStripe","Stripe","payWithCard","collectionId","id","total","connectedAccountID","paymentCollectionID","paymentId","options","orderId","amount","round","currency","application_fee_amount","console","log","RouterService","openModal","connectStripeUser","res","httpsCallable","functions","link","Environment","getSiteUrl","error","retrieveStripeConnectedAccount","accountID","makePaymentIntent","element","el","orderData","querySelector","disabled","SystemService","presentAlertError","elements","setupElements","data","form","addEventListener","event","preventDefault","pay","card","clientSecret","makePaymentIntentToConnectedAccount","stripeAccount","payment_method_types","connectedStripeAccount","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","create","mount","on","empty","textContent","message","changeLoadingState","confirmCardPayment","payment_method","then","result","showError","orderComplete","retrievePaymentIntent","paymentIntent","updatePaymentStatus","status","classList","add","remove","errorMsgText","errorMsg","setTimeout","order","DatabaseService","getDocument","paymentStatus","payAt","paymentStaus","updateDocument","isLoading","document","StripeAPIService"],"sources":["src/services/common/stripe-api.ts"],"sourcesContent":["import {httpsCallable} from \"firebase/functions\";\nimport {Environment} from \"../../global/env\";\nimport {functions} from \"../../helpers/firebase\";\nimport {PaymentStatus} from \"../../interfaces/common/stripe/stripe\";\nimport {DatabaseService} from \"./database\";\nimport {RouterService} from \"./router\";\nimport {SystemService} from \"./system\";\nimport {round} from \"lodash\";\ndeclare var Stripe;\n\n/**\n * @module Services\n */\n\nexport class StripeAPIController {\n  el: HTMLElement;\n  public shouldBeAsync = true;\n\n  /**\n   * Immersea\n   */\n  public publishableKeyTest_Immersea: string =\n    \"pk_test_51IyID2DiIthbhXzgcmfDTzMVwJEf8cXgDaMgWdulWi1yjdKdTEYaj9FZXeFiGRWlR9P8IXDpYnkD84OyrGlikLfI00PE5fMGdl\";\n  public publishableKeyProd_Immersea: string =\n    \"sk_test_51IyID2DiIthbhXzg0non2BblyCy3l2qF4hiTybt5ZQaFZ3OJLvmGsFK3Z4JI8omJru3sWjTuHxh3ZCnNWqsFLYG300Lnvr5vYV\";\n\n  /**\n   * O-Range\n   */\n  public publishableKeyTest_ORange: string =\n    \"pk_test_51IvOEYEKefFL9WPBfoYdfFjPfbnvO9gK8A5wAD5cnpzbJmtYugrv45nowbB1P50jn2ECZ9xcbk49SWTS6dqDDMgR00dtep8t1v\";\n  public publishableKeyProd_ORange: string =\n    \"pk_live_51IvOEYEKefFL9WPBMN1NQ3iqosSXd9X62oF3tI6kWclmEoDUYlbXu7BqBNDTtZUGbMhRr4Z74pNVcjUVvc9kI5DN004WVwJgzv\";\n\n  /**\n   * DEFINE KEY!!\n   */\n  test = true;\n  immersea = true; //immersea or orange stripe account as master\n  publishableKey = this.test\n    ? this.immersea\n      ? this.publishableKeyTest_Immersea\n      : this.publishableKeyTest_ORange\n    : this.immersea\n      ? this.publishableKeyProd_Immersea\n      : this.publishableKeyProd_ORange;\n  stripe = null;\n  card: any;\n\n  paymentCollectionID: string;\n  paymentId: string;\n\n  initStripe() {\n    this.stripe = Stripe(this.publishableKey);\n  }\n  /**************\n   *\n   * Open Modal for Stripe payments\n   *\n   **************/\n  async payWithCard(collectionId, id, total, connectedAccountID?) {\n    this.paymentCollectionID = collectionId;\n    this.paymentId = id;\n    var options = {\n      collectionId: collectionId,\n      orderId: id,\n      amount: round(total, 2) * 100, // in cent\n      currency: \"eur\",\n      connectedAccountID: connectedAccountID,\n      application_fee_amount: 0,\n    };\n    console.log(\"options\", options);\n    RouterService.openModal(\"app-stripe-pay\", options, false);\n  }\n\n  /**************\n   *\n   * Stripe Connect for third party payments\n   *\n   **************/\n  async connectStripeUser() {\n    let res;\n    try {\n      res = await httpsCallable(\n        functions,\n        \"stripeConnectStandardUser\"\n      )({\n        link: Environment.getSiteUrl(),\n      });\n    } catch (error) {\n      res = {\n        error: error,\n      };\n    }\n    if (res && res.error) {\n      return {error: res.error};\n    } else {\n      return res;\n    }\n  }\n\n  /**************\n   *\n   * Retrieve Stripe Connected Account\n   *\n   **************/\n  async retrieveStripeConnectedAccount(id) {\n    let res;\n    try {\n      res = await httpsCallable(\n        functions,\n        \"stripeRetrieveConnectedAccount\"\n      )({\n        accountID: id,\n      });\n    } catch (error) {\n      res = {\n        error: error,\n      };\n    }\n    if (res && res.error) {\n      return {error: res.error};\n    } else {\n      return res;\n    }\n  }\n\n  /**************\n   *\n   * Payment Intent for dierct payment to account\n   *\n   **************/\n  async makePaymentIntent(amount, currency, element?) {\n    if (Stripe) {\n      this.stripe = Stripe(this.publishableKey);\n      if (element) {\n        this.el = element;\n      }\n      const orderData = {\n        amount: round(amount, 2),\n        currency: currency,\n      };\n\n      // Disable the button until we have Stripe set up on the page\n      this.el.querySelector(\"button\").disabled = false;\n      let res;\n      try {\n        res = await httpsCallable(functions, \"createPaymentIntent\")(orderData);\n      } catch (error) {\n        res = {\n          error: error,\n        };\n      }\n      if (res && res.error) {\n        SystemService.presentAlertError(res.error);\n      } else {\n        const elements = await this.setupElements(res.data);\n        this.el.querySelector(\"button\").disabled = false;\n        // Handle form submission.\n        const form = this.el.querySelector(\"#payment-form\");\n        form.addEventListener(\"submit\", (event) => {\n          event.preventDefault();\n          // Initiate payment when the submit button is clicked\n          this.pay(elements.stripe, elements.card, elements.clientSecret);\n        });\n      }\n    }\n  }\n\n  /**************\n   *\n   * Payment Intent for dierct payment to account\n   *\n   **************/\n  async makePaymentIntentToConnectedAccount(\n    amount,\n    currency,\n    application_fee_amount,\n    connectedAccountID,\n    element?\n  ) {\n    if (Stripe) {\n      this.stripe = Stripe(this.publishableKey, {\n        stripeAccount: connectedAccountID,\n      });\n      if (element) {\n        this.el = element;\n      }\n      const orderData = {\n        amount: round(amount, 2),\n        currency: currency,\n        payment_method_types: [\"card\"],\n        application_fee_amount: application_fee_amount,\n        connectedStripeAccount: connectedAccountID,\n      };\n      // Disable the button until we have Stripe set up on the page\n      this.el.querySelector(\"button\").disabled = false;\n      let res;\n      try {\n        res = await httpsCallable(\n          functions,\n          \"createPaymentIntentForConnectedAccount\"\n        )(orderData);\n      } catch (error) {\n        res = {\n          error: error,\n        };\n      }\n      if (res && res.error) {\n        SystemService.presentAlertError(res.error);\n      } else {\n        const elements = await this.setupElements(res.data);\n        this.el.querySelector(\"button\").disabled = false;\n        // Handle form submission.\n        const form = this.el.querySelector(\"#payment-form\");\n        form.addEventListener(\"submit\", (event) => {\n          event.preventDefault();\n          // Initiate payment when the submit button is clicked\n          this.pay(elements.stripe, elements.card, elements.clientSecret);\n        });\n      }\n    }\n  }\n\n  // Set up Stripe.js and Elements to use in checkout form\n  setupElements(data) {\n    var elements = this.stripe.elements();\n    var style = {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\",\n        },\n      },\n      invalid: {\n        fontFamily: \"Arial, sans-serif\",\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\",\n      },\n    };\n\n    var card = elements.create(\"card\", {style: style});\n    card.mount(\"#card-element\");\n\n    card.on(\"change\", (event) => {\n      // Disable the Pay button if there are no card details in the Element\n      this.el.querySelector(\"button\").disabled = event.empty;\n      this.el.querySelector(\"#card-errors\").textContent = event.error\n        ? event.error.message\n        : \"\";\n    });\n\n    return {\n      stripe: this.stripe,\n      card: card,\n      clientSecret: data.clientSecret,\n    };\n  }\n\n  /*\n   * Calls stripe.confirmCardPayment which creates a pop-up modal to\n   * prompt the user to enter extra authentication details without leaving your page\n   */\n  pay(stripe, card, clientSecret) {\n    this.changeLoadingState(true);\n    stripe\n      .confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: card,\n        },\n      })\n      .then((result) => {\n        if (result.error) {\n          // Show error to your customer\n          this.showError(result.error.message);\n        } else {\n          // The payment has been processed!\n          this.orderComplete(clientSecret);\n        }\n      });\n  }\n\n  /* ------- Post-payment helpers ------- */\n\n  /* Shows a success / error message when the payment is complete */\n  orderComplete(clientSecret) {\n    // Just for the purpose of the sample, show the PaymentIntent response object\n    this.stripe.retrievePaymentIntent(clientSecret).then((result) => {\n      const paymentIntent = result.paymentIntent;\n      this.updatePaymentStatus(paymentIntent.id, paymentIntent.status);\n\n      this.el.querySelector(\".sr-payment-form\").classList.add(\"hidden\");\n\n      this.el.querySelector(\"#success\").classList.remove(\"hidden\");\n\n      this.changeLoadingState(false);\n    });\n  }\n\n  async showError(errorMsgText) {\n    this.changeLoadingState(false);\n    var errorMsg = this.el.querySelector(\".sr-field-error\");\n    errorMsg.textContent = errorMsgText;\n    setTimeout(() => {\n      errorMsg.textContent = \"\";\n    }, 4000);\n    this.updatePaymentStatus(null, \"error\");\n  }\n\n  async updatePaymentStatus(id, status) {\n    //update payment in order\n    const order = await DatabaseService.getDocument(\n      this.paymentCollectionID,\n      this.paymentId\n    );\n    const paymentStatus: PaymentStatus = {\n      id: id,\n      status: status,\n      payAt: \"stripe\",\n    };\n    order.paymentStaus = paymentStatus;\n    await DatabaseService.updateDocument(\n      this.paymentCollectionID,\n      this.paymentId,\n      order\n    );\n  }\n\n  // Show a spinner on payment submission\n  changeLoadingState(isLoading) {\n    if (isLoading) {\n      this.el.querySelector(\"button\").disabled = true;\n      this.el.querySelector(\"#spinner\").classList.remove(\"hidden\");\n      this.el.querySelector(\"#button-text\").classList.add(\"hidden\");\n    } else {\n      this.el.querySelector(\"button\").disabled = false;\n      this.el.querySelector(\"#spinner\").classList.add(\"hidden\");\n      document.querySelector(\"#button-text\").classList.remove(\"hidden\");\n    }\n  }\n\n  /*\n\n  async makeStripeSessionPayment() {\n    await SystemService.presentLoading(\"please-wait\");\n    let data = {\n      amount: 110, //in cent\n      currency: \"eur\",\n    };\n    let response = await functions.httpsCallable(\"createStripeCheckoutSession\",\n      {\n        method: \"POST\",\n        redirect: \"follow\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    try {\n      let json = await response.json();\n      SystemService.dismissLoading();\n      if (!json.err) {\n        let header = TranslationService.getTransl(\n          \"stripe-payment-title\",\n          \"Stripe Payment\"\n        );\n        let message = TranslationService.getTransl(\n          \"stripe-payment-confirmed\",\n          \"The payment was succesfull!\"\n        );\n        const alert = await alertController.create({\n          header: header,\n          message: message,\n          buttons: [\n            {\n              text: TranslationService.getTransl(\"ok\", \"OK\"),\n              handler: async () => {},\n            },\n          ],\n        });\n        alert.present();\n      } else {\n        SystemService.presentAlertError(json.err);\n      }\n    } catch (error) {\n      SystemService.dismissLoading();\n      SystemService.presentAlertError(error);\n    }\n\n    fetch(\"/createStripeCheckoutSession\", {\n      method: \"POST\",\n    })\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (session) {\n        return this.stripe.redirectToCheckout({ sessionId: session.id });\n      })\n      .then(function (result) {\n        // If `redirectToCheckout` fails due to a browser or network\n        // error, you should display the localized error message to your\n        // customer using `error.message`.\n        if (result.error) {\n          alert(result.error.message);\n        }\n      })\n      .catch(function (error) {\n        console.error(\"Error:\", error);\n      });\n  }\n\n  setupStripe(form) {\n    let elements = this.stripe.elements();\n    var style = {\n      base: {\n        color: \"#32325d\",\n        lineHeight: \"24px\",\n        fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#aab7c4\",\n        },\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\",\n      },\n    };\n    var paymentData = {\n      type: \"card\",\n      currency: \"eur\",\n      amount: \"100\",\n      usage: \"single_use\",\n      owner: {\n        name: \"Jenny Rosen\",\n        address: {\n          line1: \"Nollendorfstraße 27\",\n          city: \"Berlin\",\n          postal_code: \"10777\",\n          country: \"DE\",\n        },\n        email: \"jenny.rosen@example.com\",\n      },\n    };\n\n    this.card = elements.create(\"card\", { style: style });\n    this.card.mount(\"#card-element\");\n\n    this.card.addEventListener(\"change\", (event) => {\n      var displayError = document.getElementById(\"card-errors\");\n      if (event.error) {\n        displayError.textContent = event.error.message;\n      } else {\n        displayError.textContent = \"\";\n      }\n    });\n\n    form.addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n      this.stripe.createSource(this.card, paymentData).then((source) => {\n        console.log(\"source\", source);\n        if (source.error) {\n          var errorElement = document.getElementById(\"card-errors\");\n          errorElement.textContent = source.error.message;\n        } else {\n          this.makePayment(source.source);\n        }\n      });\n    });\n  }\n\n  async makePayment(source) {\n    await SystemService.presentLoading(\"please-wait\");\n    let data = {\n      amount: 110, //in cent\n      currency: \"eur\",\n      source: source.id,\n    };\n    let response = await functions.httpsCallable(\"payWithStripe\",\n      {\n        method: \"POST\",\n        redirect: \"follow\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    try {\n      let json = await response.json();\n      SystemService.dismissLoading();\n      if (!json.err) {\n        let header = TranslationService.getTransl(\n          \"stripe-payment-title\",\n          \"Stripe Payment\"\n        );\n        let message = TranslationService.getTransl(\n          \"stripe-payment-confirmed\",\n          \"The payment was succesfull!\"\n        );\n        const alert = await alertController.create({\n          header: header,\n          message: message,\n          buttons: [\n            {\n              text: TranslationService.getTransl(\"ok\", \"OK\"),\n              handler: async () => {},\n            },\n          ],\n        });\n        alert.present();\n      } else {\n        SystemService.presentAlertError(json.err);\n      }\n    } catch (error) {\n      SystemService.dismissLoading();\n      SystemService.presentAlertError(error);\n    }\n  }*/\n}\n\nexport const StripeAPIService = new StripeAPIController();\n"],"mappings":"iHAcaA,EAAb,WAAAC,GAESC,KAAAC,cAAgB,KAKhBD,KAAAE,4BACL,8GACKF,KAAAG,4BACL,8GAKKH,KAAAI,0BACL,8GACKJ,KAAAK,0BACL,8GAKFL,KAAAM,KAAO,KACPN,KAAAO,SAAW,KACXP,KAAAQ,eAAiBR,KAAKM,KAClBN,KAAKO,SACHP,KAAKE,4BACLF,KAAKI,0BACPJ,KAAKO,SACHP,KAAKG,4BACLH,KAAKK,0BACXL,KAAAS,OAAS,I,CAMT,UAAAC,GACEV,KAAKS,OAASE,OAAOX,KAAKQ,e,CAO5B,iBAAMI,CAAYC,EAAcC,EAAIC,EAAOC,GACzChB,KAAKiB,oBAAsBJ,EAC3Bb,KAAKkB,UAAYJ,EACjB,IAAIK,EAAU,CACZN,aAAcA,EACdO,QAASN,EACTO,OAAQC,gBAAMP,EAAO,GAAK,IAC1BQ,SAAU,MACVP,mBAAoBA,EACpBQ,uBAAwB,GAE1BC,QAAQC,IAAI,UAAWP,GACvBQ,EAAcC,UAAU,iBAAkBT,EAAS,M,CAQrD,uBAAMU,GACJ,IAAIC,EACJ,IACEA,QAAYC,EACVC,EACA,4BAFUD,CAGV,CACAE,KAAMC,EAAYC,c,CAEpB,MAAOC,GACPN,EAAM,CACJM,MAAOA,E,CAGX,GAAIN,GAAOA,EAAIM,MAAO,CACpB,MAAO,CAACA,MAAON,EAAIM,M,KACd,CACL,OAAON,C,EASX,oCAAMO,CAA+BvB,GACnC,IAAIgB,EACJ,IACEA,QAAYC,EACVC,EACA,iCAFUD,CAGV,CACAO,UAAWxB,G,CAEb,MAAOsB,GACPN,EAAM,CACJM,MAAOA,E,CAGX,GAAIN,GAAOA,EAAIM,MAAO,CACpB,MAAO,CAACA,MAAON,EAAIM,M,KACd,CACL,OAAON,C,EASX,uBAAMS,CAAkBlB,EAAQE,EAAUiB,GACxC,GAAI7B,OAAQ,CACVX,KAAKS,OAASE,OAAOX,KAAKQ,gBAC1B,GAAIgC,EAAS,CACXxC,KAAKyC,GAAKD,C,CAEZ,MAAME,EAAY,CAChBrB,OAAQC,gBAAMD,EAAQ,GACtBE,SAAUA,GAIZvB,KAAKyC,GAAGE,cAAc,UAAUC,SAAW,MAC3C,IAAId,EACJ,IACEA,QAAYC,EAAcC,EAAW,sBAAzBD,CAAgDW,E,CAC5D,MAAON,GACPN,EAAM,CACJM,MAAOA,E,CAGX,GAAIN,GAAOA,EAAIM,MAAO,CACpBS,EAAcC,kBAAkBhB,EAAIM,M,KAC/B,CACL,MAAMW,QAAiB/C,KAAKgD,cAAclB,EAAImB,MAC9CjD,KAAKyC,GAAGE,cAAc,UAAUC,SAAW,MAE3C,MAAMM,EAAOlD,KAAKyC,GAAGE,cAAc,iBACnCO,EAAKC,iBAAiB,UAAWC,IAC/BA,EAAMC,iBAENrD,KAAKsD,IAAIP,EAAStC,OAAQsC,EAASQ,KAAMR,EAASS,aAAa,G,GAWvE,yCAAMC,CACJpC,EACAE,EACAC,EACAR,EACAwB,GAEA,GAAI7B,OAAQ,CACVX,KAAKS,OAASE,OAAOX,KAAKQ,eAAgB,CACxCkD,cAAe1C,IAEjB,GAAIwB,EAAS,CACXxC,KAAKyC,GAAKD,C,CAEZ,MAAME,EAAY,CAChBrB,OAAQC,gBAAMD,EAAQ,GACtBE,SAAUA,EACVoC,qBAAsB,CAAC,QACvBnC,uBAAwBA,EACxBoC,uBAAwB5C,GAG1BhB,KAAKyC,GAAGE,cAAc,UAAUC,SAAW,MAC3C,IAAId,EACJ,IACEA,QAAYC,EACVC,EACA,yCAFUD,CAGVW,E,CACF,MAAON,GACPN,EAAM,CACJM,MAAOA,E,CAGX,GAAIN,GAAOA,EAAIM,MAAO,CACpBS,EAAcC,kBAAkBhB,EAAIM,M,KAC/B,CACL,MAAMW,QAAiB/C,KAAKgD,cAAclB,EAAImB,MAC9CjD,KAAKyC,GAAGE,cAAc,UAAUC,SAAW,MAE3C,MAAMM,EAAOlD,KAAKyC,GAAGE,cAAc,iBACnCO,EAAKC,iBAAiB,UAAWC,IAC/BA,EAAMC,iBAENrD,KAAKsD,IAAIP,EAAStC,OAAQsC,EAASQ,KAAMR,EAASS,aAAa,G,GAOvE,aAAAR,CAAcC,GACZ,IAAIF,EAAW/C,KAAKS,OAAOsC,WAC3B,IAAIc,EAAQ,CACVC,KAAM,CACJC,MAAO,UACPC,WAAY,oBACZC,cAAe,cACfC,SAAU,OACV,gBAAiB,CACfH,MAAO,YAGXI,QAAS,CACPH,WAAY,oBACZD,MAAO,UACPK,UAAW,YAIf,IAAIb,EAAOR,EAASsB,OAAO,OAAQ,CAACR,MAAOA,IAC3CN,EAAKe,MAAM,iBAEXf,EAAKgB,GAAG,UAAWnB,IAEjBpD,KAAKyC,GAAGE,cAAc,UAAUC,SAAWQ,EAAMoB,MACjDxE,KAAKyC,GAAGE,cAAc,gBAAgB8B,YAAcrB,EAAMhB,MACtDgB,EAAMhB,MAAMsC,QACZ,EAAE,IAGR,MAAO,CACLjE,OAAQT,KAAKS,OACb8C,KAAMA,EACNC,aAAcP,EAAKO,a,CAQvB,GAAAF,CAAI7C,EAAQ8C,EAAMC,GAChBxD,KAAK2E,mBAAmB,MACxBlE,EACGmE,mBAAmBpB,EAAc,CAChCqB,eAAgB,CACdtB,KAAMA,KAGTuB,MAAMC,IACL,GAAIA,EAAO3C,MAAO,CAEhBpC,KAAKgF,UAAUD,EAAO3C,MAAMsC,Q,KACvB,CAEL1E,KAAKiF,cAAczB,E,KAQ3B,aAAAyB,CAAczB,GAEZxD,KAAKS,OAAOyE,sBAAsB1B,GAAcsB,MAAMC,IACpD,MAAMI,EAAgBJ,EAAOI,cAC7BnF,KAAKoF,oBAAoBD,EAAcrE,GAAIqE,EAAcE,QAEzDrF,KAAKyC,GAAGE,cAAc,oBAAoB2C,UAAUC,IAAI,UAExDvF,KAAKyC,GAAGE,cAAc,YAAY2C,UAAUE,OAAO,UAEnDxF,KAAK2E,mBAAmB,MAAM,G,CAIlC,eAAMK,CAAUS,GACdzF,KAAK2E,mBAAmB,OACxB,IAAIe,EAAW1F,KAAKyC,GAAGE,cAAc,mBACrC+C,EAASjB,YAAcgB,EACvBE,YAAW,KACTD,EAASjB,YAAc,EAAE,GACxB,KACHzE,KAAKoF,oBAAoB,KAAM,Q,CAGjC,yBAAMA,CAAoBtE,EAAIuE,GAE5B,MAAMO,QAAcC,EAAgBC,YAClC9F,KAAKiB,oBACLjB,KAAKkB,WAEP,MAAM6E,EAA+B,CACnCjF,GAAIA,EACJuE,OAAQA,EACRW,MAAO,UAETJ,EAAMK,aAAeF,QACfF,EAAgBK,eACpBlG,KAAKiB,oBACLjB,KAAKkB,UACL0E,E,CAKJ,kBAAAjB,CAAmBwB,GACjB,GAAIA,EAAW,CACbnG,KAAKyC,GAAGE,cAAc,UAAUC,SAAW,KAC3C5C,KAAKyC,GAAGE,cAAc,YAAY2C,UAAUE,OAAO,UACnDxF,KAAKyC,GAAGE,cAAc,gBAAgB2C,UAAUC,IAAI,S,KAC/C,CACLvF,KAAKyC,GAAGE,cAAc,UAAUC,SAAW,MAC3C5C,KAAKyC,GAAGE,cAAc,YAAY2C,UAAUC,IAAI,UAChDa,SAASzD,cAAc,gBAAgB2C,UAAUE,OAAO,S,SA0LjDa,EAAmB,IAAIvG,S","ignoreList":[]}