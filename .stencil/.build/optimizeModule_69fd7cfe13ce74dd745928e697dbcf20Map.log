{"version":3,"names":["pageDivePlannerCss","PageDivePlannerStyle0","PageDivePlanner","this","plans","stdDiveProfile","depth","DiveToolsService","isMetric","time","fO2","fHe","setpoint","isLoaded","stdConfigurations","maxLocalPlans","componentWillLoad","userSettingsSub$","UserService","userSettings$","subscribe","userSettings","UserSettings","loadLocalData","componentDidLoad","initLocalUser","swiper","Swiper","speed","spaceBetween","allowTouchMove","settings","cloneDeep","userConfigurations","localPlans","orderPlans","DatabaseService","getLocalDocument","DiveStandardsService","getStdConfigurations","forEach","plan","model","DivePlanModel","push","getDivePlansFromConfigurations","saveLocalDocument","disconnectedCallback","unsubscribe","addDivePlan","length","alert","alertController","create","header","TranslationService","getTransl","message","xxx","buttons","text","present","inputs","userProfile","type","label","value","checked","conf","key","stdName","handler","async","data","addDivePlanWithConf","openModal","checkLicence","newConfig","configuration","DiveConfiguration","bottom","maxDepth","maxTime","divePlan","DivePlan","setConfiguration","confModal","RouterService","diveDataToShare","showConfigurations","onDidDismiss","then","updatedConf","newConf","newArray","concat","updateUserConfigurations","role","cssClass","selectedConfiguration","index","user","dpModal","updatePlans","viewDive","i","addDive","divePlanModel","updateUserLocalPlans","orderBy","removeDive","event","stopPropagation","confirm","splice","render","h","tag","color","Environment","isDecoplanner","class","map","onClick","lines","slot","fill","ev","name","dives","getProfilePointsDetails","detail","undefined","tank","gas","toString","deco"],"sources":["src/components/udive/pages/dive-plan/page-dive-planner/page-dive-planner.scss?tag=page-dive-planner","src/components/udive/pages/dive-plan/page-dive-planner/page-dive-planner.tsx"],"sourcesContent":["page-dive-planner {\n  .cards-container {\n    margin: 0;\n    margin-bottom: 1rem; /* Space between the rows */\n  }\n\n  .cards-column {\n    margin-bottom: 1rem !important; /* Add space between rows */\n  }\n\n  .card {\n    display: flex;\n    flex-direction: column;\n    height: 100%; /* Make card take the full height of the container */\n    box-sizing: border-box;\n    cursor: pointer; /* Change cursor to pointer */\n    transition: transform 0.2s ease-in-out; /* Add smooth transition effect */\n  }\n\n  .card:hover {\n    transform: scale(1.02); /* Slight zoom effect on hover */\n  }\n\n  .card-content {\n    flex-grow: 1; /* Make card content grow to fill the available space */\n  }\n\n  .card-margins {\n    margin-bottom: 1rem; /* Ensure there's space inside the cards */\n  }\n\n  .add-card {\n    min-height: 200px; /* Set minimum height to 200px */\n    min-width: 200px; /* Set minimum width to 200px */\n  }\n\n  .add-card-content {\n    display: flex;\n    justify-content: center;\n    align-items: center; /* Center the icon both horizontally and vertically */\n    height: 100%; /* Ensure it fills the entire card */\n    width: 100%; /* Ensure it stretches the entire card width */\n  }\n\n  .add-icon {\n    width: 70%; /* Set icon width to 70% of parent container */\n    height: 70%; /* Set icon height to 70% of parent container */\n  }\n}\n","import { Component, h, State } from \"@stencil/core\";\nimport { alertController } from \"@ionic/core\";\nimport { Subscription } from \"rxjs\";\n\nimport { cloneDeep, forEach, orderBy } from \"lodash\";\nimport { DiveConfiguration } from \"../../../../../interfaces/udive/planner/dive-configuration\";\nimport { TranslationService } from \"../../../../../services/common/translations\";\nimport { DivePlan } from \"../../../../../services/udive/planner/dive-plan\";\nimport { UserService } from \"../../../../../services/common/user\";\nimport { DivePlanModel } from \"../../../../../interfaces/udive/planner/dive-plan\";\nimport { DiveStandardsService } from \"../../../../../services/udive/planner/dive-standards\";\nimport { DatabaseService } from \"../../../../../services/common/database\";\nimport { UserSettings } from \"../../../../../interfaces/udive/user/user-settings\";\nimport { RouterService } from \"../../../../../services/common/router\";\nimport { DiveToolsService } from \"../../../../../services/udive/planner/dive-tools\";\nimport { Environment } from \"../../../../../global/env\";\n// core version + navigation, pagination modules:\nimport Swiper from \"swiper\";\n\n@Component({\n  tag: \"page-dive-planner\",\n  styleUrl: \"page-dive-planner.scss\",\n})\nexport class PageDivePlanner {\n  plans: Array<DivePlan> = [];\n  stdDiveProfile = {\n    depth: DiveToolsService.isMetric() ? 30 : 100,\n    time: 30,\n    fO2: 0.32,\n    fHe: 0,\n    setpoint: 1.4,\n  };\n  isLoaded = false;\n  stdConfigurations: DiveConfiguration[] = [];\n  @State() localPlans: DivePlanModel[] = [];\n  userSettings: UserSettings;\n  userSettingsSub$: Subscription;\n  swiper: Swiper;\n  @State() scrollTop = 0;\n  maxLocalPlans = 15;\n\n  componentWillLoad() {\n    this.userSettingsSub$ = UserService.userSettings$.subscribe(\n      (userSettings: UserSettings) => {\n        this.userSettings = new UserSettings(userSettings);\n        this.loadLocalData();\n      }\n    );\n  }\n  componentDidLoad() {\n    //check if user is loaded or trigger local user\n    if (!this.userSettings) {\n      UserService.initLocalUser();\n    }\n    // init Swiper:\n    this.swiper = new Swiper(\".swiper\", {\n      speed: 400,\n      spaceBetween: 100,\n      allowTouchMove: true,\n    });\n  }\n\n  async loadLocalData() {\n    if (this.userSettings && this.userSettings.settings) {\n      //user loggedin\n      this.stdConfigurations = cloneDeep(this.userSettings.userConfigurations);\n      //order by name\n      this.localPlans = this.userSettings.localPlans;\n      this.orderPlans();\n    } else {\n      //no user loggedin\n      const localPlans = await DatabaseService.getLocalDocument(\"localplans\");\n      this.stdConfigurations = DiveStandardsService.getStdConfigurations();\n      if (localPlans) {\n        this.localPlans = [];\n        localPlans.forEach((plan) => {\n          const model = new DivePlanModel(plan);\n          this.localPlans.push(model);\n        });\n      } else {\n        this.localPlans = DiveStandardsService.getDivePlansFromConfigurations(\n          this.stdConfigurations\n        );\n        DatabaseService.saveLocalDocument(\"localplans\", this.localPlans);\n      }\n      this.orderPlans();\n    }\n  }\n\n  disconnectedCallback() {\n    this.userSettingsSub$.unsubscribe();\n  }\n\n  async addDivePlan() {\n    if (this.localPlans.length >= this.maxLocalPlans) {\n      const alert = await alertController.create({\n        header: TranslationService.getTransl(\"max-plans\", \"Maximum Plans\"),\n        message: TranslationService.getTransl(\n          \"max-plans-descr\",\n          \"You can store a maximum of xxx plans. Use the 'Logbook' for additional plans.\",\n          { xxx: this.maxLocalPlans }\n        ),\n        buttons: [\n          {\n            text: TranslationService.getTransl(\"ok\", \"OK\"),\n          },\n        ],\n      });\n      alert.present();\n    } else {\n      let inputs = [];\n      if (UserService.userProfile && UserService.userProfile) {\n        inputs.push({\n          type: \"radio\",\n          label: \"New Configuration\",\n          value: -1,\n          checked: false,\n        });\n      }\n      forEach(this.stdConfigurations, (conf, key) => {\n        inputs.push({\n          type: \"radio\",\n          label: conf.stdName,\n          value: key,\n          checked: key == 0 ? true : false,\n        });\n      });\n\n      const alert = await alertController.create({\n        header: TranslationService.getTransl(\n          \"select-standard-configuration\",\n          \"Select standard configuration\"\n        ),\n        buttons: [\n          {\n            text: TranslationService.getTransl(\"ok\", \"OK\"),\n            handler: async (data: any) => {\n              if (data > -1) {\n                this.addDivePlanWithConf(this.stdConfigurations[data]);\n              } else {\n                let openModal = await UserService.checkLicence(\"configs\", true);\n                if (openModal) {\n                  const newConfig =\n                    UserService.userSettings.userConfigurations[0];\n                  const configuration = new DiveConfiguration(newConfig);\n                  configuration.stdName = \"\";\n                  configuration.configuration.bottom = [];\n                  configuration.maxDepth = 0;\n                  configuration.maxTime = 0;\n                  const divePlan = new DivePlan();\n                  divePlan.setConfiguration(configuration);\n                  const confModal = await RouterService.openModal(\n                    \"modal-dive-configuration\",\n                    {\n                      diveDataToShare: {\n                        divePlan: divePlan,\n                        showConfigurations: true,\n                      },\n                    }\n                  );\n                  confModal.onDidDismiss().then((updatedConf) => {\n                    updatedConf = updatedConf.data;\n                    if (updatedConf) {\n                      //save new configuration and then open deco planner\n                      const newConf = new DiveConfiguration(updatedConf);\n                      //put new configuration on top\n                      const newArray = [newConf].concat(\n                        this.userSettings.userConfigurations\n                      );\n                      this.userSettings.userConfigurations = newArray;\n                      UserService.updateUserConfigurations(\n                        this.userSettings.userConfigurations\n                      );\n                      this.addDivePlanWithConf(newConf);\n                    }\n                  });\n                }\n              }\n            },\n          },\n          {\n            text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n            role: \"cancel\",\n            cssClass: \"secondary\",\n          },\n        ],\n        inputs: inputs,\n      });\n      alert.present();\n    }\n  }\n\n  async addDivePlanWithConf(selectedConfiguration: DiveConfiguration) {\n    const openModal = await RouterService.openModal(\"modal-dive-planner\", {\n      selectedConfiguration: selectedConfiguration,\n      stdConfigurations: this.stdConfigurations,\n      index: 0,\n      user: this.userSettings,\n    });\n    openModal.onDidDismiss().then((divePlan) => {\n      const dpModal = divePlan.data;\n      if (dpModal) {\n        this.localPlans.push(dpModal);\n        this.updatePlans();\n      }\n    });\n  }\n\n  async viewDive(i) {\n    const openModal = await RouterService.openModal(\"modal-dive-planner\", {\n      addDive: false,\n      divePlanModel: this.localPlans[i],\n      stdConfigurations: this.stdConfigurations,\n      index: 0,\n      user: this.userSettings,\n    });\n    openModal.onDidDismiss().then((divePlan) => {\n      const dpModal = divePlan.data;\n      if (dpModal) {\n        this.localPlans[i] = dpModal;\n        this.updatePlans();\n      }\n    });\n  }\n\n  updatePlans() {\n    if (this.userSettings && this.userSettings.localPlans) {\n      UserService.updateUserLocalPlans(this.localPlans);\n    } else {\n      DatabaseService.saveLocalDocument(\"localplans\", this.localPlans);\n      this.loadLocalData();\n    }\n  }\n\n  orderPlans() {\n    this.localPlans = orderBy(this.localPlans, \"configuration.stdName\");\n  }\n\n  async removeDive(event, i) {\n    event.stopPropagation();\n    const confirm = await alertController.create({\n      header: TranslationService.getTransl(\n        \"delete-dive-header\",\n        \"Delete dive?\"\n      ),\n      message: TranslationService.getTransl(\n        \"delete-dive-message\",\n        \"This dive plan will be deleted! Are you sure?\"\n      ),\n      buttons: [\n        {\n          text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n          role: \"cancel\",\n          handler: () => {},\n        },\n        {\n          text: TranslationService.getTransl(\"ok\", \"OK\"),\n          handler: () => {\n            this.localPlans.splice(i, 1);\n            this.updatePlans();\n          },\n        },\n      ],\n    });\n    confirm.present();\n  }\n\n  render() {\n    return [\n      <app-navbar\n        tag='deco-planner'\n        text='Deco Planner'\n        color={Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"}\n      ></app-navbar>,\n      <ion-content>\n        {this.localPlans.length > 0 ? (\n          <ion-grid class='ion-no-padding'>\n            <ion-row class='ion-no-padding cards-container'>\n              {this.localPlans.map((plan, i) => (\n                <ion-col\n                  size-sm='12'\n                  size-md='6'\n                  size-lg='4'\n                  class='ion-no-padding cards-column'\n                >\n                  <ion-card onClick={() => this.viewDive(i)} class='card'>\n                    <div class='card-content'>\n                      <ion-card-header>\n                        <ion-card-subtitle>\n                          <ion-item lines='none' class='ion-no-padding'>\n                            <ion-button\n                              icon-only\n                              slot='end'\n                              color='danger'\n                              fill='clear'\n                              onClick={(ev) => this.removeDive(ev, i)}\n                            >\n                              <ion-icon name='trash-bin-outline'></ion-icon>\n                            </ion-button>\n                            <ion-label>\n                              <h1>{plan.configuration.stdName}</h1>\n                            </ion-label>\n                          </ion-item>\n                          {plan.dives[0]\n                            .getProfilePointsDetails()\n                            .map((detail) => (\n                              <p class='ion-text-start'>{detail}</p>\n                            ))}\n                        </ion-card-subtitle>\n                      </ion-card-header>\n\n                      <ion-card-content>\n                        {plan.configuration.configuration.bottom.length > 0 ? (\n                          <p>\n                            <my-transl tag='bottom-tanks' text='Bottom Tanks' />\n                            :\n                          </p>\n                        ) : undefined}\n                        {plan.configuration.configuration.bottom.map((tank) => (\n                          <p>{tank.name + \"->\" + tank.gas.toString()}</p>\n                        ))}\n                        {plan.configuration.configuration.deco.length > 0 ? (\n                          <p>\n                            <my-transl tag='deco-tanks' text='Deco Tanks' />:\n                          </p>\n                        ) : undefined}\n                        {plan.configuration.configuration.deco.map((tank) => (\n                          <p>{tank.name + \"->\" + tank.gas.toString()}</p>\n                        ))}\n                      </ion-card-content>\n                    </div>\n                  </ion-card>\n                </ion-col>\n              ))}\n              {/* Add new card button */}\n              <ion-col\n                size-sm='12'\n                size-md='6'\n                size-lg='4'\n                class='ion-no-padding cards-column'\n              >\n                <ion-card\n                  class='card add-card'\n                  onClick={() => this.addDivePlan()}\n                >\n                  <ion-card-content class='card-content add-card-content'>\n                    <ion-icon\n                      name='add-circle-outline'\n                      class='add-icon'\n                    ></ion-icon>\n                  </ion-card-content>\n                </ion-card>\n              </ion-col>\n            </ion-row>\n          </ion-grid>\n        ) : undefined}\n      </ion-content>,\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]}