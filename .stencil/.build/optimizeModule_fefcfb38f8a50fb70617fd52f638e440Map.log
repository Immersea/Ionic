{"version":3,"names":["modalDivePlannerCss","ModalDivePlannerStyle0","ModalDivePlanner","this","dive","DecoplannerDive","dive_less_time","dive_more_time","dive_less_depth","dive_more_depth","selectedChartModel","selectedModelGasView","isSaving","showLoadingTab","tag","icon","slotIcon","disabled","componentWillLoad","divePlan","DivePlan","newPlanModel","divePlanModel","selectedConfiguration","setConfiguration","addDive","resetDiveWithConfiguration","diveTripData","dives","diveSiteId","divingCenterId","date","Date","configuration","setWithDivePlanModel","index","length","setDate","stdGases","stdDecoGases","gases","DiveStandardsService","getStdGases","forEach","list","push","filter","deco","orderBy","update","componentDidLoad","slider","Swiper","speed","spaceBetween","allowTouchMove","autoHeight","setSliderHeight","updateView","slideContainers","Array","from","el","getElementsByClassName","map","container","setAttribute","slideHeight","updateAutoHeight","undefined","saveDoc","updateParams","params","setParams","detail","updateCalculations","selectedModel","diveDataToShare","stdConfigurations","user","userRoles","showDiveSite","showPositionTab","getDecoTime","UserService","licences","getUserLimitations","maxDecoTime","showProfiles","presentLicenceLimitation","titles","save","closest","dismiss","getDivePlanModel","close","scrollToTop","content","logScrollStart","ev","srcElement","render","h","key","text","stdName","color","Environment","isDecoplanner","modal","swiper","updateBadge","noHeader","class","scrollEvents","onIonScrollStart","onUpdateParamsEvent","isShown","segment","onCancelEmit","onSaveEmit"],"sources":["src/components/udive/modals/dive-plan/modal-dive-planner/modal-dive-planner.scss?tag=modal-dive-planner","src/components/udive/modals/dive-plan/modal-dive-planner/modal-dive-planner.tsx"],"sourcesContent":["modal-dive-planner {\n  ion-segment-button {\n    --color-checked: var(--ion-color-planner-contrast);\n  }\n  .nopaddingtop {\n    //remove extra padding for iOS\n    padding-top: 0px !important;\n  }\n}\n","import { Component, h, Prop, State, Element } from \"@stencil/core\";\n\nimport { DecoplannerDive } from \"../../../../../interfaces/udive/planner/decoplanner-dive\";\nimport { DivePlan } from \"../../../../../services/udive/planner/dive-plan\";\n//import { Config } from '../../../../../../providers/config';\nimport { UserRoles } from \"../../../../../interfaces/common/user/user-roles\";\n//import { DataBase } from '../../../../../../providers/database';\nimport { DecoplannerParameters } from \"../../../../../interfaces/udive/planner/decoplanner-parameters\";\nimport { DiveStandardsService } from \"../../../../../services/udive/planner/dive-standards\";\n//import { LicenceCheckProvider } from '../../../../../../providers/licence-check';\nimport { GasModel } from \"../../../../../interfaces/udive/planner/gas-model\";\nimport { filter, orderBy } from \"lodash\";\n//import { DiveConfigurationsModel } from \"../../../interfaces/udive/planner/dive-configurations-model\";\nimport { DiveConfiguration } from \"../../../../../interfaces/udive/planner/dive-configuration\";\n//import { Tank } from \"../../../interfaces/udive/planner/tank\";\n\nimport { DivePlanModel } from \"../../../../../interfaces/udive/planner/dive-plan\";\nimport { slideHeight } from \"../../../../../helpers/utils\";\nimport { UserService } from \"../../../../../services/common/user\";\nimport { Environment } from \"../../../../../global/env\";\nimport Swiper from \"swiper\";\n\n@Component({\n  tag: \"modal-dive-planner\",\n  styleUrl: \"modal-dive-planner.scss\",\n})\nexport class ModalDivePlanner {\n  @Element() el: HTMLElement;\n\n  loading: any;\n  segments: any;\n  dives: Array<DecoplannerDive>;\n  dive: DecoplannerDive = new DecoplannerDive();\n  dive_less_time: DecoplannerDive = new DecoplannerDive();\n  dive_more_time: DecoplannerDive = new DecoplannerDive();\n  dive_less_depth: DecoplannerDive = new DecoplannerDive();\n  dive_more_depth: DecoplannerDive = new DecoplannerDive();\n  selectedChartModel = \"BUHL\";\n  selectedModelGasView = \"BUHL\";\n  licences: any;\n  divePlan: DivePlan;\n  parameters: DecoplannerParameters;\n  ranges: any;\n  isSaving = false;\n  diveDataToShare: any;\n  screenHeight: number;\n  headerHeight: number;\n  chartHeight: number;\n  chartTopMargin: number;\n  @State() slider: Swiper;\n  content: HTMLIonContentElement;\n\n  showLoadingTab = true;\n\n  profileChartDataSource: any;\n  profileChartData: any;\n  profileChart: any;\n\n  stdGases: Array<GasModel>;\n  stdDecoGases: Array<GasModel>;\n\n  @Prop() stdConfigurations: Array<DiveConfiguration> = [];\n  @Prop() index: number = 0;\n  @Prop() userRoles: UserRoles;\n  @Prop() selectedConfiguration: DiveConfiguration;\n  @Prop() diveTripData: {\n    date: Date;\n    diveSiteId: string;\n    divingCenterId: string;\n  };\n  @Prop() divePlanModel: DivePlanModel;\n  @Prop() addDive?: boolean = false;\n  @Prop() showDiveSite?: boolean = false;\n  @Prop() showPositionTab?: boolean = false;\n  @Prop() setDate?: boolean = false;\n\n  @State() updateView = true;\n  @State() segment: string = \"plan\";\n\n  @State() showProfiles = false;\n\n  @State() titles = [\n    { tag: \"plan\", icon: \"chevron-forward\", slotIcon: \"end\" },\n    {\n      tag: \"profile\",\n      disabled: true,\n      icon: \"chevron-forward\",\n      slotIcon: \"end\",\n    },\n    { tag: \"gas\", disabled: true, icon: \"chevron-forward\", slotIcon: \"end\" },\n    { tag: \"charts\", disabled: true, icon: \"chevron-forward\", slotIcon: \"end\" },\n    { tag: \"settings\", disabled: true },\n  ];\n\n  componentWillLoad() {\n    //convert into DivePlan provider and start calculations for the dive\n    this.divePlan = new DivePlan();\n    //this.divePlan.setProviders(this.translate)\n    let newPlanModel = this.divePlanModel;\n    if (!newPlanModel) {\n      //insert new dive plan\n      let selectedConfiguration = this.selectedConfiguration;\n      //add new dive with selected config\n      this.divePlan.setConfiguration(selectedConfiguration);\n      let dive = this.divePlan.addDive();\n      this.divePlan.resetDiveWithConfiguration(dive, selectedConfiguration);\n      if (this.diveTripData) {\n        this.divePlan.dives[0].diveSiteId = this.diveTripData.diveSiteId\n          ? this.diveTripData.diveSiteId\n          : null;\n        this.divePlan.dives[0].divingCenterId = this.diveTripData.divingCenterId\n          ? this.diveTripData.divingCenterId\n          : null;\n        this.divePlan.dives[0].date = this.diveTripData.date\n          ? new Date(this.diveTripData.date)\n          : new Date();\n      }\n    } else {\n      this.divePlan.setConfiguration(newPlanModel.configuration);\n      this.divePlan.setWithDivePlanModel(newPlanModel);\n      if (this.addDive) {\n        //insert new dive plan\n        let dive = this.divePlan.addDive();\n        this.divePlan.resetDiveWithConfiguration(\n          dive,\n          newPlanModel.configuration\n        );\n        this.index = this.divePlan.dives.length - 1;\n        //set dive siteid to previous site\n        if (this.index > 0) {\n          this.divePlan.dives[this.index].diveSiteId =\n            this.divePlan.dives[this.index - 1].diveSiteId;\n        }\n      }\n    }\n    //set updated date\n    if (this.setDate) {\n      this.divePlan.dives[this.index].date = new Date();\n    }\n    this.stdGases = [];\n    this.stdDecoGases = [];\n    let gases = [];\n    DiveStandardsService.getStdGases().forEach((list) => {\n      gases.push(list);\n    });\n    this.stdGases = filter(gases, { deco: false });\n    this.stdGases = orderBy(this.stdGases, \"fromDepth\", \"asc\");\n    this.stdDecoGases = filter(gases, { deco: true });\n    this.stdDecoGases = orderBy(this.stdDecoGases, \"fromDepth\", \"desc\");\n\n    this.update();\n\n    this.showLoadingTab = false;\n    //this.segment = 1;\n    /*setTimeout(() => {\n      this.tabsItem.select(this.currentTab);\n    });*/\n  }\n\n  componentDidLoad() {\n    this.slider = new Swiper(\".slider-dive-planner\", {\n      speed: 400,\n      spaceBetween: 100,\n      allowTouchMove: false,\n      autoHeight: true,\n    });\n    this.setSliderHeight();\n  }\n\n  setSliderHeight() {\n    this.updateView = !this.updateView;\n\n    //reset sliders height inside slider\n    const slideContainers = Array.from(\n      this.el.getElementsByClassName(\"slide-container\")\n    );\n    slideContainers.map((container) => {\n      container.setAttribute(\n        \"style\",\n        \"height: \" + slideHeight(null, 3, true) + \"px\"\n      );\n    });\n    this.slider ? this.slider.updateAutoHeight() : null;\n    this.slider ? this.slider.update() : undefined;\n  }\n\n  saveDoc(updateView = true) {\n    if (updateView) this.update();\n    //document is saved on modal dismiss\n  }\n\n  updateParams(params) {\n    //this.divePlan.configuration.parameters = params.detail;\n    this.divePlan.setParams(params.detail, false);\n    this.update();\n  }\n\n  async update() {\n    this.divePlan.updateCalculations();\n    this.dives = this.divePlan.dives;\n    this.dive = this.divePlan.dives[this.index];\n    this.selectedChartModel = this.dive.selectedModel;\n    this.selectedModelGasView = this.dive.selectedModel;\n    //send updated params to other views\n    this.diveDataToShare = {\n      divePlan: this.divePlan,\n      dive_less_time: this.dive_less_time,\n      dive_more_time: this.dive_more_time,\n      dive_less_depth: this.dive_less_depth,\n      dive_more_depth: this.dive_more_depth,\n      index: this.index,\n      stdGases: this.stdGases,\n      stdDecoGases: this.stdDecoGases,\n      stdConfigurations: this.stdConfigurations,\n      user: this.userRoles,\n      showDiveSite: this.showDiveSite,\n      showPositionTab: this.showPositionTab,\n    };\n    //check user licence limitations\n    if (\n      this.dive.getDecoTime() >\n      UserService.userRoles.licences.getUserLimitations().maxDecoTime\n    ) {\n      this.showProfiles = false;\n      UserService.userRoles.licences.presentLicenceLimitation(\"decotime\");\n    } else {\n      this.showProfiles = true;\n    }\n    this.titles[1].disabled = !this.showProfiles;\n    this.titles[2].disabled = !this.showProfiles;\n    this.titles[3].disabled = !this.showProfiles;\n    this.titles[4].disabled = !this.showProfiles;\n    this.setSliderHeight();\n  }\n\n  save() {\n    this.el.closest(\"ion-modal\").dismiss(this.divePlan.getDivePlanModel());\n  }\n\n  close() {\n    this.el.closest(\"ion-modal\").dismiss();\n  }\n\n  scrollToTop() {\n    this.content ? this.content.scrollToTop() : undefined;\n  }\n\n  logScrollStart(ev) {\n    this.content = ev.srcElement;\n  }\n\n  render() {\n    return [\n      <ion-header>\n        <app-navbar\n          tag='deco-planner'\n          text='Deco Planner'\n          extra-title={this.divePlan.configuration.stdName}\n          color={Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"}\n          modal={true}\n        ></app-navbar>\n        <app-header-segment-toolbar\n          color={Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"}\n          swiper={this.slider}\n          titles={this.titles}\n          updateBadge={this.updateView}\n          noHeader\n          class='nopaddingtop'\n        ></app-header-segment-toolbar>\n      </ion-header>,\n      <ion-content\n        class='slides'\n        scrollEvents={true}\n        onIonScrollStart={(ev) => this.logScrollStart(ev)}\n      >\n        <swiper-container class='slider-dive-planner swiper'>\n          <swiper-wrapper class='swiper-wrapper'>\n            <swiper-slide class='swiper-slide'>\n              <app-decoplanner-plan\n                diveDataToShare={this.diveDataToShare}\n                onUpdateParamsEvent={(params) => this.updateParams(params)}\n              />\n            </swiper-slide>\n            <swiper-slide class='swiper-slide'>\n              <app-decoplanner-profile diveDataToShare={this.diveDataToShare} />\n            </swiper-slide>\n            <swiper-slide class='swiper-slide'>\n              <app-decoplanner-gas\n                diveDataToShare={this.diveDataToShare}\n                isShown={this.segment == \"gas\"}\n              />\n            </swiper-slide>\n            <swiper-slide class='swiper-slide'>\n              <ion-content class='slide-container'>\n                <app-decoplanner-charts\n                  diveDataToShare={this.diveDataToShare}\n                  isShown={this.segment == \"charts\"}\n                />\n              </ion-content>\n            </swiper-slide>\n            <swiper-slide class='swiper-slide'>\n              <app-decoplanner-settings\n                diveDataToShare={this.diveDataToShare}\n                onUpdateParamsEvent={(params) => this.updateParams(params)}\n              />\n            </swiper-slide>\n          </swiper-wrapper>\n        </swiper-container>\n      </ion-content>,\n      <app-modal-footer\n        onCancelEmit={() => this.close()}\n        onSaveEmit={() => this.save()}\n      />,\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]}