{"version":3,"names":["appAdminDiveTripsCss","AppAdminDiveTripsStyle0","AppAdminDiveTrips","this","userPublicProfilesList","divingCentersList","diveCommunitiesList","divingSchoolsList","componentWillLoad","loadingDiveTrips$","DiveTripsService","creatingNewDiveTrip$","subscribe","value","creatingNewDiveTrip","editingDiveTrip$","editingDiveTripId$","editingDiveTrip","filterByOrganisierId","DivingSchoolsService","selectedDivingSchoolId","userDiveTrips$","selectedDivingSchoolTrips$","sub","loadDiveTrips","DivingCentersService","selectedDivingCenterId","selectedDivingCenterTrips$","UserService","userPublicProfilesList$","collection","filter","divingCentersList$","diveCommunitiesList$","DiveCommunitiesService","divingSchoolsList$","userRoles$","roles","userRoles","disconnectedCallback","unsubscribe","userDiveTrips","resetSkeletons","loadingDiveTrips","adminDiveTripsArray","Object","keys","forEach","key","trip","id","organiser","push","orderBy","length","map","diveTrip","collectionId","USERPROFILECOLLECTION","item","find","user","uid","DIVECENTERSSCOLLECTION","dc","DIVECOMMUNITIESCOLLECTION","DIVESCHOOLSSCOLLECTION","school","role","editorOf","editor","owner","includes","filterByTrips","tripsArray","updateView","update","event","stopPropagation","presentDiveTripUpdate","deleteDiveTrip","render","h","Host","skeleton","undefined","button","onClick","pushDiveTrip","detail","photoURL","slot","src","displayName","format","date","tag","text","fill","color","ev","delete","name","TranslationService","getTransl"],"sources":["src/components/udive/app/admin/app-admin-dive-trips/app-admin-dive-trips.scss?tag=app-admin-dive-trips","src/components/udive/app/admin/app-admin-dive-trips/app-admin-dive-trips.tsx"],"sourcesContent":["app-admin-dive-trips {\n  /* Component styles go here */\n}\n","import {Component, h, State, Host, Prop} from \"@stencil/core\";\nimport {Subscription} from \"rxjs\";\nimport {\n  UserService,\n  USERPROFILECOLLECTION,\n} from \"../../../../../services/common/user\";\nimport {orderBy} from \"lodash\";\nimport {DiveTripsService} from \"../../../../../services/udive/diveTrips\";\nimport {UserRoles} from \"../../../../../interfaces/common/user/user-roles\";\nimport {UserPubicProfile} from \"../../../../../interfaces/common/user/user-public-profile\";\nimport {\n  DivingCentersService,\n  DIVECENTERSSCOLLECTION,\n} from \"../../../../../services/udive/divingCenters\";\nimport {MapDataDivingCenter} from \"../../../../../interfaces/udive/diving-center/divingCenter\";\nimport {MapDataDivingSchool} from \"../../../../../interfaces/udive/diving-school/divingSchool\";\nimport {\n  DivingSchoolsService,\n  DIVESCHOOLSSCOLLECTION,\n} from \"../../../../../services/udive/divingSchools\";\nimport {TripSummary} from \"../../../../../interfaces/udive/dive-trip/diveTrip\";\nimport {\n  DIVECOMMUNITIESCOLLECTION,\n  DiveCommunitiesService,\n} from \"../../../../../services/udive/diveCommunities\";\nimport {MapDataDiveCommunity} from \"../../../../../interfaces/udive/dive-community/diveCommunity\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {format} from \"date-fns\";\n\n@Component({\n  tag: \"app-admin-dive-trips\",\n  styleUrl: \"app-admin-dive-trips.scss\",\n})\nexport class AppAdminDiveTrips {\n  @Prop() filterByOrganisierId: string;\n  @Prop() filterByTrips: any;\n  @State() adminDiveTripsArray: any[] = [];\n  @State() updateView = false;\n  @State() creatingNewDiveTrip = false;\n  @State() loadingDiveTrips = true;\n  loadingDiveTrips$: Subscription;\n  @State() editingDiveTrip = \"\";\n  editingDiveTrip$: Subscription;\n\n  userRoles: UserRoles;\n  userRoles$: Subscription;\n  userDiveTrips: TripSummary;\n  userDiveTrips$: Subscription;\n  userPublicProfilesList: UserPubicProfile[] = [];\n  userPublicProfilesList$: Subscription;\n  divingCentersList: MapDataDivingCenter[] = [];\n  divingCentersList$: Subscription;\n  diveCommunitiesList: MapDataDiveCommunity[] = [];\n  diveCommunitiesList$: Subscription;\n  divingSchoolsList: MapDataDivingSchool[] = [];\n  divingSchoolsList$: Subscription;\n\n  async componentWillLoad() {\n    this.loadingDiveTrips$ = DiveTripsService.creatingNewDiveTrip$.subscribe(\n      (value) => {\n        this.creatingNewDiveTrip = value;\n      }\n    );\n    this.editingDiveTrip$ = DiveTripsService.editingDiveTripId$.subscribe(\n      (value) => {\n        this.editingDiveTrip = value;\n      }\n    );\n\n    //load classes\n    //if filterbyorganiserId  ==  loaded school/center -> load classes from school or diving center\n    if (this.filterByOrganisierId) {\n      if (\n        this.filterByOrganisierId ===\n        DivingSchoolsService.selectedDivingSchoolId\n      ) {\n        this.userDiveTrips$ =\n          DivingSchoolsService.selectedDivingSchoolTrips$.subscribe((sub) =>\n            this.loadDiveTrips(sub)\n          );\n      } else if (\n        this.filterByOrganisierId ===\n        DivingCentersService.selectedDivingCenterId\n      ) {\n        this.userDiveTrips$ =\n          DivingCentersService.selectedDivingCenterTrips$.subscribe((sub) =>\n            this.loadDiveTrips(sub)\n          );\n      }\n    } else {\n      this.userDiveTrips$ = UserService.userDiveTrips$.subscribe((sub) =>\n        this.loadDiveTrips(sub)\n      );\n    }\n\n    //load all users list\n    this.userPublicProfilesList$ =\n      UserService.userPublicProfilesList$.subscribe((collection) => {\n        //update dive sites\n        this.userPublicProfilesList = collection;\n        this.filter();\n      });\n    //load all diving centers list\n    this.divingCentersList$ = DivingCentersService.divingCentersList$.subscribe(\n      (collection) => {\n        //update dive sites\n        this.divingCentersList = collection;\n        this.filter();\n      }\n    );\n    //load all dive communities list\n    this.diveCommunitiesList$ =\n      DiveCommunitiesService.diveCommunitiesList$.subscribe((collection) => {\n        //update dive sites\n        this.diveCommunitiesList = collection;\n        this.filter();\n      });\n    //load all diving schools list\n    this.divingSchoolsList$ = DivingSchoolsService.divingSchoolsList$.subscribe(\n      (collection) => {\n        //update dive sites\n        this.divingSchoolsList = collection;\n        this.filter();\n      }\n    );\n    this.userRoles$ = UserService.userRoles$.subscribe((roles) => {\n      this.userRoles = roles;\n      this.filter();\n    });\n  }\n\n  disconnectedCallback() {\n    this.userRoles$.unsubscribe();\n    this.userDiveTrips$.unsubscribe();\n    this.userPublicProfilesList$.unsubscribe();\n    this.divingCentersList$.unsubscribe();\n    this.diveCommunitiesList$.unsubscribe();\n    this.divingSchoolsList$.unsubscribe();\n    this.editingDiveTrip$.unsubscribe();\n    this.loadingDiveTrips$.unsubscribe();\n  }\n\n  loadDiveTrips(userDiveTrips: TripSummary) {\n    DiveTripsService.resetSkeletons();\n    this.loadingDiveTrips = false;\n    if (userDiveTrips) {\n      let adminDiveTripsArray = [];\n      Object.keys(userDiveTrips).forEach((key) => {\n        let trip = userDiveTrips[key] as any;\n        trip.id = key;\n        if (\n          this.filterByOrganisierId &&\n          trip.organiser.id == this.filterByOrganisierId\n        ) {\n          adminDiveTripsArray.push(trip);\n        } else if (!this.filterByOrganisierId) {\n          adminDiveTripsArray.push(trip);\n        }\n      });\n\n      adminDiveTripsArray = orderBy(adminDiveTripsArray, \"date\", \"desc\");\n      this.adminDiveTripsArray = adminDiveTripsArray;\n      this.filter();\n    }\n  }\n\n  filter() {\n    if (this.adminDiveTripsArray.length > 0) {\n      //load organiser data\n      this.adminDiveTripsArray.map((diveTrip) => {\n        const organiser = diveTrip.organiser;\n        switch (organiser.collectionId) {\n          case USERPROFILECOLLECTION:\n            organiser.item = this.userPublicProfilesList.find(\n              (user) => user.uid === organiser.id\n            );\n            break;\n          case DIVECENTERSSCOLLECTION:\n            organiser.item = this.divingCentersList.find(\n              (dc) => dc.id === organiser.id\n            );\n            break;\n          case DIVECOMMUNITIESCOLLECTION:\n            organiser.item = this.diveCommunitiesList.find(\n              (dc) => dc.id === organiser.id\n            );\n            break;\n          case DIVESCHOOLSSCOLLECTION:\n            organiser.item = this.divingSchoolsList.find(\n              (school) => school.id === organiser.id\n            );\n            break;\n        }\n        if (this.userRoles) {\n          const role = this.userRoles.editorOf[diveTrip.id];\n          diveTrip.editor = role && role.roles && role.roles.length > 0;\n          diveTrip.owner = role && role.roles && role.roles.includes(\"owner\");\n        }\n      });\n      //filter by trips id for clients visualisation\n      if (this.filterByTrips) {\n        const tripsArray = Object.keys(this.filterByTrips);\n        this.adminDiveTripsArray = this.adminDiveTripsArray.filter((trip) =>\n          tripsArray.includes(trip.id)\n        );\n      }\n      this.updateView = !this.updateView;\n    }\n  }\n\n  update(event, id) {\n    event.stopPropagation();\n    DiveTripsService.presentDiveTripUpdate(null, null, id);\n  }\n\n  delete(event, id) {\n    event.stopPropagation();\n    DiveTripsService.deleteDiveTrip(id);\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.loadingDiveTrips\n          ? [\n              <app-skeletons skeleton=\"diveTrip\" />,\n              <app-skeletons skeleton=\"diveTrip\" />,\n              <app-skeletons skeleton=\"diveTrip\" />,\n              <app-skeletons skeleton=\"diveTrip\" />,\n              <app-skeletons skeleton=\"diveTrip\" />,\n            ]\n          : undefined}\n        {this.creatingNewDiveTrip ? (\n          <app-skeletons skeleton=\"diveTrip\" />\n        ) : undefined}\n        {this.adminDiveTripsArray.map((diveTrip) =>\n          this.editingDiveTrip == diveTrip.id ? (\n            <app-skeletons skeleton=\"diveTrip\" />\n          ) : (\n            <ion-item\n              button\n              onClick={() => DiveTripsService.pushDiveTrip(diveTrip.id)}\n              detail\n            >\n              {diveTrip.organiser &&\n              diveTrip.organiser.item &&\n              diveTrip.organiser.item.photoURL ? (\n                <ion-avatar slot=\"start\">\n                  <ion-img src={diveTrip.organiser.item.photoURL} />\n                </ion-avatar>\n              ) : undefined}\n              <ion-label>\n                <h2>{diveTrip.displayName}</h2>\n                <h4>{format(diveTrip.date, \"PP\")}</h4>\n                {diveTrip.organiser &&\n                diveTrip.organiser.item &&\n                diveTrip.organiser.item.displayName ? (\n                  <p>\n                    <my-transl tag=\"organiser\" text=\"Organiser\" />\n                    {\": \" + diveTrip.organiser.item.displayName}\n                  </p>\n                ) : undefined}\n              </ion-label>\n              {diveTrip.owner ? (\n                <ion-button\n                  fill=\"clear\"\n                  color=\"danger\"\n                  icon-only\n                  slot=\"end\"\n                  onClick={(ev) => this.delete(ev, diveTrip.id)}\n                >\n                  <ion-icon name=\"trash\" slot=\"end\"></ion-icon>\n                </ion-button>\n              ) : undefined}\n              {diveTrip.editor ? (\n                <ion-button\n                  fill=\"clear\"\n                  color=\"divetrip\"\n                  icon-only\n                  slot=\"end\"\n                  onClick={(ev) => this.update(ev, diveTrip.id)}\n                >\n                  <ion-icon name=\"create\" slot=\"end\"></ion-icon>\n                </ion-button>\n              ) : undefined}\n            </ion-item>\n          )\n        )}\n        {this.adminDiveTripsArray.length == 0 ? (\n          <ion-item>\n            <ion-label>\n              <h2>\n                {TranslationService.getTransl(\n                  \"no-dive-trips\",\n                  \"No dive trips yet. Click on the '+' button to create your first one.\"\n                )}\n              </h2>\n            </ion-label>\n          </ion-item>\n        ) : undefined}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}