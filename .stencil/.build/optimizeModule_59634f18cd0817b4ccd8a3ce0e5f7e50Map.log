{"version":3,"names":["UDiveServicesController","getUserRoles","UDiveService","modalEditUserRolesCss","ModalEditUserRolesStyle0","ModalEditUserRoles","undefined","componentWillLoad","roles","DatabaseService","getDocument","USERROLESCOLLECTION","this","uid","userRoles","UserRoles","save","updateDocument","modalController","dismiss","cancel","presentActionSheet","buttons","Environment","isTrasteel","TrasteelService","isDecoplanner","isUdive","forEach","role","includes","push","text","handler","updateView","icon","actionSheet","actionSheetController","create","header","present","updateLicense","license","ev","licences","detail","checked","handleChange","name","trial","fromDate","Date","value","deleteRole","index","el","itemSliding","getElementsByClassName","closeOpened","splice","render","h","Host","key","color","getAppColor","email","Object","keys","length","map","duration","onFormItemChanged","validator","toISOString","level","trialDays","slot","onIonChange","class","onClick","button","onCancelEmit","onSaveEmit"],"sources":["src/services/udive/services.ts","src/components/common/modals/modal-edit-user-roles/modal-edit-user-roles.scss?tag=modal-edit-user-roles","src/components/common/modals/modal-edit-user-roles/modal-edit-user-roles.tsx"],"sourcesContent":["export class UDiveServicesController {\n  getUserRoles() {\n    return [\"registered\", \"translator\", \"superAdmin\"];\n  }\n}\nexport const UDiveService = new UDiveServicesController();\n","modal-edit-user-roles {\n  ion-list {\n    width: 100%;\n  }\n}\n","import {Component, h, Host, Prop, State, Element} from \"@stencil/core\";\nimport {actionSheetController, modalController} from \"@ionic/core\";\nimport {USERROLESCOLLECTION} from \"../../../../services/common/user\";\nimport {UserRoles} from \"../../../../interfaces/common/user/user-roles\";\nimport {Environment} from \"../../../../global/env\";\nimport {DatabaseService} from \"../../../../services/common/database\";\nimport {TrasteelService} from \"../../../../services/trasteel/common/services\";\nimport {UDiveService} from \"../../../../services/udive/services\";\n\n@Component({\n  tag: \"modal-edit-user-roles\",\n  styleUrl: \"modal-edit-user-roles.scss\",\n})\nexport class ModalEditUserRoles {\n  @Element() itemSliding: HTMLElement;\n  @Prop() uid: string = undefined;\n  @State() userRoles: UserRoles;\n  @State() updateView = false;\n\n  async componentWillLoad() {\n    const roles = await DatabaseService.getDocument(\n      USERROLESCOLLECTION,\n      this.uid\n    );\n    this.userRoles = new UserRoles(roles);\n  }\n\n  async save() {\n    await DatabaseService.updateDocument(\n      USERROLESCOLLECTION,\n      this.uid,\n      this.userRoles\n    );\n    modalController.dismiss();\n  }\n\n  async cancel() {\n    modalController.dismiss();\n  }\n\n  async presentActionSheet() {\n    let buttons = [];\n    let roles = [];\n    if (Environment.isTrasteel()) {\n      roles = TrasteelService.getUserRoles();\n    } else if (Environment.isDecoplanner() || Environment.isUdive()) {\n      roles = UDiveService.getUserRoles();\n    }\n    roles.forEach((role) => {\n      if (!this.userRoles.roles.includes(role)) {\n        buttons.push({\n          text: role,\n          handler: () => {\n            this.userRoles.roles.push(role);\n            this.updateView = !this.updateView;\n          },\n        });\n      }\n    });\n    buttons.push({\n      text: \"Close\",\n      icon: \"close\",\n      role: \"cancel\",\n      handler: () => {},\n    });\n    const actionSheet = await actionSheetController.create({\n      header: \"Add\",\n      buttons: buttons,\n    });\n    await actionSheet.present();\n  }\n\n  updateLicense(license, ev) {\n    this.userRoles.licences[license] = ev.detail.checked;\n    this.updateView = !this.updateView;\n  }\n\n  handleChange(ev) {\n    if (ev.detail.name == \"fromDate\") {\n      this.userRoles.licences.trial.fromDate = new Date(ev.detail.value);\n    } else {\n      this.userRoles.licences.trial[ev.detail.name] = ev.detail.value;\n    }\n    this.updateView = !this.updateView;\n  }\n\n  deleteRole(index) {\n    const el = this.itemSliding.getElementsByClassName(\n      \"item-sliding-\" + index\n    )[0] as HTMLIonItemSlidingElement;\n    el.closeOpened();\n    this.userRoles.roles.splice(index, 1);\n    this.updateView = !this.updateView;\n  }\n\n  render() {\n    return (\n      <Host>\n        <ion-header>\n          <ion-toolbar color={Environment.getAppColor()}>\n            <ion-title>User Roles Manager</ion-title>\n          </ion-toolbar>\n        </ion-header>\n        <ion-content>\n          <ion-list>\n            <ion-item>uid: {this.userRoles.uid}</ion-item>\n            <ion-item>email: {this.userRoles.email}</ion-item>\n            {!Environment.isTrasteel &&\n            Object.keys(this.userRoles.licences).length > 0\n              ? [\n                  <ion-item-divider>User Licences</ion-item-divider>,\n                  Object.keys(this.userRoles.licences).map((license) =>\n                    license == \"trial\"\n                      ? [\n                          <ion-item-divider>\n                            <ion-label>Trial</ion-label>\n                          </ion-item-divider>,\n                          <app-form-item\n                            label-tag=\"duration\"\n                            label-text=\"Duration\"\n                            value={this.userRoles.licences.trial.duration}\n                            name=\"duration\"\n                            input-type=\"number\"\n                            onFormItemChanged={(ev) => this.handleChange(ev)}\n                            validator={[]}\n                          ></app-form-item>,\n                          <app-form-item\n                            label-tag=\"fromDate\"\n                            label-text=\"From Date\"\n                            value={\n                              this.userRoles.licences.trial.fromDate !== null\n                                ? this.userRoles.licences.trial.fromDate.toISOString()\n                                : new Date().toISOString()\n                            }\n                            name=\"fromDate\"\n                            input-type=\"date\"\n                            onFormItemChanged={(ev) => this.handleChange(ev)}\n                            validator={[]}\n                          ></app-form-item>,\n                          <app-form-item\n                            label-tag=\"level\"\n                            label-text=\"Level\"\n                            value={this.userRoles.licences.trial.level}\n                            name=\"level\"\n                            input-type=\"string\"\n                            onFormItemChanged={(ev) => this.handleChange(ev)}\n                            validator={[]}\n                          ></app-form-item>,\n                          <ion-item>\n                            <ion-label>\n                              <p>\n                                Trial Days:{\" \"}\n                                {this.userRoles.licences.trialDays()}\n                              </p>\n                            </ion-label>\n                          </ion-item>,\n                        ]\n                      : [\n                          <ion-item>\n                            <ion-label>{license}</ion-label>\n                            <ion-toggle\n                              slot=\"end\"\n                              onIonChange={(ev) =>\n                                this.updateLicense(license, ev)\n                              }\n                              checked={this.userRoles.licences[license]}\n                            ></ion-toggle>\n                          </ion-item>,\n                        ]\n                  ),\n                ]\n              : null}\n          </ion-list>\n          <ion-list>\n            <ion-item-divider>User Roles</ion-item-divider>\n            {this.userRoles.roles.map((role, index) => (\n              <ion-item-sliding class={\"item-sliding-\" + index}>\n                <ion-item>\n                  <ion-label>{role}</ion-label>\n                </ion-item>\n                <ion-item-options>\n                  <ion-item-option\n                    color=\"danger\"\n                    onClick={() => this.deleteRole(index)}\n                  >\n                    Delete\n                  </ion-item-option>\n                </ion-item-options>\n              </ion-item-sliding>\n            ))}\n            <ion-item button onClick={() => this.presentActionSheet()}>\n              <ion-icon name=\"add\"></ion-icon>\n              <ion-label>Add</ion-label>\n            </ion-item>\n          </ion-list>\n        </ion-content>\n        <app-modal-footer\n          color={Environment.getAppColor()}\n          onCancelEmit={() => this.cancel()}\n          onSaveEmit={() => this.save()}\n        />\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}