{"version":3,"names":["popoverTankCss","PopoverTankStyle0","PopoverTank","this","hasTrimixlicence","hasReblicence","componentWillLoad","tank","newTank","TankModel","setForDeco","decoTanks","getTank","selectedTank","find","tanksList","name","toUpperCase","gas","fO2","setForm","updateStdGasList","componentDidLoad","scrollGas","el","querySelector","popover","closest","form","getForm","UserService","checkLicence","stdGases","isStandardGas","i","n","stdGasesList","forEach","selected","O2","He","push","getGas","setTimeout","width","scrollWidth","clientWidth","pagination","scrollLeft","selectStdGas","updateTank","setPressure","toNumber","pressure","updateGas","fromDepth","save","setTankType","dismiss","close","inputHandler","event","detail","value","blurHandler","selectTank","ev","render","h","key","style","marginBottom","class","label","TranslationService","getTransl","onIonChange","map","onFormItemChanged","onFormItemBlur","validator","options","min","max","onClick","ccr","ppO2","undefined","id","shape","color","GasBlenderService","getGasName","getMod","DiveToolsService","depthUnit","getpO2atDepth","onCancelEmit","onSaveEmit"],"sources":["src/components/udive/popovers/popover-tank/popover-tank.scss?tag=popover-tank","src/components/udive/popovers/popover-tank/popover-tank.tsx"],"sourcesContent":["popover-tank {\n  .scrollx {\n    display: flex;\n    flex-wrap: nowrap;\n    overflow-x: auto;\n\n    .item {\n      flex: 0 0 0 0;\n    }\n\n    ::-webkit-scrollbar {\n      display: none;\n    }\n  }\n\n  //validators notification\n  .notification {\n    min-height: 20px;\n    height: 20px;\n    font-size: 0.8em;\n    color: #ea6153;\n    border-width: 1px;\n    border-color: #ea6153;\n    padding-left: 10px;\n    .item-inner {\n      margin-left: 0px !important;\n      border-bottom: 0px !important;\n    }\n    .icon {\n      font-size: 1.7em;\n      padding-left: 6px !important;\n      padding-top: 4px !important;\n    }\n  }\n}\n","import {Component, h, Element, Prop, State} from \"@stencil/core\";\nimport {GasModel} from \"../../../../interfaces/udive/planner/gas-model\";\nimport {Tank} from \"../../../../interfaces/udive/planner/tank\";\nimport {TankModel} from \"../../../../interfaces/udive/planner/tank-model\";\nimport {GasBlenderService} from \"../../../../services/udive/planner/gas-blender\";\nimport {UserService} from \"../../../../services/common/user\";\nimport {DiveToolsService} from \"../../../../services/udive/planner/dive-tools\";\nimport {find, toNumber} from \"lodash\";\nimport {TranslationService} from \"../../../../services/common/translations\";\n\n@Component({\n  tag: \"popover-tank\",\n  styleUrl: \"popover-tank.scss\",\n})\nexport class PopoverTank {\n  @Element() el: HTMLElement;\n  scrollGas: HTMLElement;\n  hasTrimixlicence = false;\n  hasReblicence = false;\n  @Prop() ccr = false;\n  stdGases: Array<any>;\n  @Prop() stdGasesList: Array<GasModel>;\n  @Prop() parameters: any;\n  @Prop() tank: Tank;\n  @Prop() decoTanks: boolean;\n  popover: HTMLIonPopoverElement;\n  @State() form: any;\n\n  selectedTank: TankModel;\n  @Prop() tanksList: Array<any>;\n\n  componentWillLoad() {\n    if (!this.tank) {\n      let newTank = new TankModel();\n      newTank.setForDeco(this.decoTanks);\n      this.tank = newTank.getTank();\n    }\n    this.selectedTank = find(this.tanksList, {name: this.tank.name});\n    if (!this.selectedTank)\n      this.selectedTank = find(this.tanksList, {\n        name: this.tank.name.toUpperCase(),\n      });\n    let gas = this.tank.gas;\n    if (gas.fO2) {\n      //update setpoint according to parameters\n      /*if (gas.fO2 == 1) {\n        gas.ppO2 = this.parameters.oxygenppO2;\n      } else {\n        gas.ppO2 = this.parameters.decoppO2;\n      }*/\n      this.tank.gas = gas;\n    }\n    this.setForm();\n    this.updateStdGasList();\n  }\n\n  componentDidLoad() {\n    this.scrollGas = this.el.querySelector(\"#scrollTankGas\");\n    this.updateStdGasList();\n    this.popover = this.el.closest(\"ion-popover\");\n    this.setForm();\n  }\n\n  async setForm() {\n    this.form = this.tank.getForm();\n    this.hasTrimixlicence = await UserService.checkLicence(\"trimix\");\n    this.hasReblicence = await UserService.checkLicence(\"reb\");\n  }\n\n  updateStdGasList() {\n    //create gas list\n    this.stdGases = [];\n    let isStandardGas = false;\n    let i = 0,\n      n = 0;\n    this.stdGasesList.forEach((gas) => {\n      i++;\n      let selected =\n        this.tank.gas.O2 === gas.O2 && this.tank.gas.He === gas.He\n          ? true\n          : false;\n      if (selected) {\n        isStandardGas = true;\n        n = i;\n      }\n      //update setpoint according to parameters\n      /*if (gas.O2 == 100) {\n        gas.ppO2 = this.parameters.oxygenppO2;\n      } else {\n        gas.ppO2 = this.parameters.decoppO2;\n      }*/\n      this.stdGases.push({\n        selected: selected,\n        gas: gas.getGas(),\n      });\n    });\n\n    if (isStandardGas && this.scrollGas) {\n      //scroll list to the left at the selected gas\n      setTimeout(() => {\n        let width = this.scrollGas.scrollWidth;\n        let clientWidth = this.scrollGas.clientWidth;\n        let pagination = i / (width / clientWidth);\n        n = n - pagination;\n        n = n < 0 ? 0 : n;\n        this.scrollGas.scrollLeft = ((width * n) / i) * 1.15;\n      });\n    }\n  }\n\n  selectStdGas(gas) {\n    if (!this.hasTrimixlicence && gas.He > 0) {\n      UserService.checkLicence(\"trimix\", true);\n      return;\n    }\n    this.tank.gas = gas;\n    this.setForm();\n    this.updateStdGasList();\n  }\n\n  updateTank() {\n    this.tank.setPressure(toNumber(this.form.pressure));\n    this.tank.gas.updateGas(\n      toNumber(this.form.O2) / 100,\n      toNumber(this.form.He) / 100,\n      toNumber(this.form.fromDepth)\n    );\n    this.updateStdGasList();\n  }\n\n  save() {\n    this.tank.setTankType(this.selectedTank);\n    this.popover.dismiss(this.tank);\n  }\n\n  close() {\n    this.popover.dismiss();\n  }\n\n  inputHandler(event: any) {\n    this.form[event.detail.name] = event.detail.value;\n  }\n\n  blurHandler() {\n    this.updateTank();\n    this.setForm();\n  }\n\n  selectTank(ev) {\n    this.selectedTank = ev.detail.value;\n  }\n\n  render() {\n    return [\n      <ion-list style={{marginBottom: \"0\"}}>\n        <ion-grid class=\"ion-no-padding\">\n          <ion-row>\n            <ion-col>\n              <ion-item>\n                <ion-select\n                  label={TranslationService.getTransl(\"tank\", \"Tank\")}\n                  onIonChange={(ev) => this.selectTank(ev)}\n                  value={this.selectedTank}\n                >\n                  {this.tanksList.map((tank) => (\n                    <ion-select-option value={tank}>\n                      {tank.name}\n                    </ion-select-option>\n                  ))}\n                </ion-select>\n              </ion-item>\n            </ion-col>\n          </ion-row>\n          <ion-row>\n            <ion-col>\n              <app-form-item\n                label-tag=\"pressure\"\n                label-text=\"Pressure\"\n                value={this.form.pressure}\n                name=\"pressure\"\n                input-type=\"number\"\n                onFormItemChanged={(ev) => this.inputHandler(ev)}\n                onFormItemBlur={() => this.blurHandler()}\n                validator={[\"required\"]}\n              ></app-form-item>\n            </ion-col>\n          </ion-row>\n          <ion-row>\n            <ion-col>\n              <app-form-item\n                label-text=\"O2\"\n                value={this.form.O2}\n                name=\"O2\"\n                input-type=\"number\"\n                onFormItemChanged={(ev) => this.inputHandler(ev)}\n                onFormItemBlur={() => this.blurHandler()}\n                validator={[\n                  \"required\",\n                  {\n                    name: \"minmaxvalue\",\n                    options: {min: 1, max: 100 - this.form.He},\n                  },\n                ]}\n              ></app-form-item>\n            </ion-col>\n            <ion-col>\n              {this.hasTrimixlicence ? (\n                <app-form-item\n                  label-text=\"He\"\n                  value={this.form.He}\n                  name=\"He\"\n                  input-type=\"number\"\n                  onFormItemChanged={(ev) => this.inputHandler(ev)}\n                  onFormItemBlur={() => this.blurHandler()}\n                  validator={[\n                    \"required\",\n                    {\n                      name: \"minmaxvalue\",\n                      options: {min: 0, max: 100 - this.form.O2},\n                    },\n                  ]}\n                ></app-form-item>\n              ) : (\n                <ion-item\n                  onClick={() => UserService.checkLicence(\"trimix\", true)}\n                >\n                  <ion-label>He</ion-label>\n                  {this.form.He}\n                </ion-item>\n              )}\n            </ion-col>\n          </ion-row>\n          <ion-row>\n            <ion-col>\n              <app-form-item\n                label-tag=\"depth\"\n                label-text=\"Depth\"\n                value={this.form.fromDepth}\n                name=\"fromDepth\"\n                input-type=\"number\"\n                onFormItemChanged={(ev) => this.inputHandler(ev)}\n                onFormItemBlur={() => this.blurHandler()}\n                validator={[\"required\"]}\n              ></app-form-item>\n            </ion-col>\n            {this.ccr ? (\n              <ion-col>\n                {this.hasReblicence ? (\n                  <app-form-item\n                    label-tag=\"pO2-setpoint\"\n                    label-text=\"pO2 setPoint\"\n                    value={this.form.ppO2}\n                    name=\"ppO2\"\n                    input-type=\"number\"\n                    onFormItemChanged={(ev) => this.inputHandler(ev)}\n                    onFormItemBlur={() => this.blurHandler()}\n                    validator={[\n                      {\n                        name: \"minmaxvalue\",\n                        options: {min: 0.5, max: 1.6},\n                      },\n                    ]}\n                  ></app-form-item>\n                ) : (\n                  <app-form-item\n                    label-tag=\"pO2-setpoint\"\n                    label-text=\"pO2 setPoint\"\n                    value={this.form.ppO2}\n                    onClick={() => UserService.checkLicence(\"reb\", true)}\n                  ></app-form-item>\n                )}\n              </ion-col>\n            ) : undefined}\n          </ion-row>\n          <ion-row class=\"scrollx\" id=\"scrollTankGas\">\n            {this.stdGases.map((gas) => (\n              <ion-col class=\"item\">\n                <ion-button\n                  shape=\"round\"\n                  color={gas.selected ? \"secondary\" : \"primary\"}\n                  onClick={() => this.selectStdGas(gas.gas)}\n                >\n                  {GasBlenderService.getGasName(gas.gas)}\n                </ion-button>\n              </ion-col>\n            ))}\n          </ion-row>\n          <ion-row>\n            <ion-col>\n              <div class=\"notification\" style={{color: \"blue\"}}>\n                MOD: {this.tank.gas.getMod()}\n                {DiveToolsService.depthUnit} @ {this.tank.gas.ppO2} pO2\n              </div>\n              <div class=\"notification\" style={{color: \"blue\"}}>\n                pO2: {this.tank.gas.getpO2atDepth(this.tank.gas.fromDepth, 2)}{\" \"}\n                pO2 @ {this.tank.gas.fromDepth}\n                {DiveToolsService.depthUnit}\n              </div>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n      </ion-list>,\n      <app-modal-footer\n        onCancelEmit={() => this.close()}\n        onSaveEmit={() => this.save()}\n      />,\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]}