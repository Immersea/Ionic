{"version":3,"names":["pageUserPlansCss","PageUserPlansStyle0","PageUserPlans","this","titles","tag","text","disabled","usersList","componentWillLoad","loadUserPlans","uid","userPlans","UserPlans","UserPlansService","getPlansOfUser","users","map","userPlan","plan","UserPlan","customerId","otherName","planOfActions","planofaction","product","TrasteelService","isRefraTeamAdmin","push","isElecTeamAdmin","isEngTeamAdmin","isRawTeamAdmin","length","selectedUser","UserService","getPublicProfileUserDetails","updateSlider","userPlansSub","userPlans$","subscribe","isTeamAdmin","usersListSub","userPublicProfilesList$","userProfiles","undefined","disconnectedCallback","unsubscribe","componentDidLoad","slider","Swiper","speed","spaceBetween","allowTouchMove","autoHeight","on","slideChange","updateAutoHeight","usersTeams","getUsersTeams","setTimeout","update","editPlan","index","modal","presentUserPlansUpdate","onDidDismiss","then","renderTeam","userIds","team","userProfile","Object","keys","find","x","orderBy","user","h","button","onClick","openUsersPlans","displayName","email","render","key","color","Environment","getAppColor","backButton","swiper","class","vertical","horizontal","slot","edge","size","name","CustomersService","getCustomersDetails","fullName","lines","detailText","ProductLines","Date","updated","toLocaleDateString","dueDate","situation"],"sources":["src/components/trasteel/pages/crm/page-user-plans/page-user-plans.scss?tag=page-user-plans","src/components/trasteel/pages/crm/page-user-plans/page-user-plans.tsx"],"sourcesContent":["page-user-plans {\n  /* Component styles go here */\n}\n","import {Component, Prop, State, h} from \"@stencil/core\";\nimport Swiper from \"swiper\";\nimport {UserPlansService} from \"../../../../../services/trasteel/crm/user-plans\";\nimport {\n  ProductLines,\n  UserPlan,\n  UserPlans,\n} from \"../../../../../interfaces/trasteel/users/user-plans\";\nimport {Subscription} from \"rxjs\";\nimport {CustomersService} from \"../../../../../services/trasteel/crm/customers\";\nimport {TrasteelService} from \"../../../../../services/trasteel/common/services\";\nimport {UsersTeams} from \"../../../../../interfaces/trasteel/users/users-teams\";\nimport {UserService} from \"../../../../../services/common/user\";\nimport {UserPubicProfile} from \"../../../../../components\";\nimport {orderBy} from \"lodash\";\nimport {Environment} from \"../../../../../global/env\";\n\n@Component({\n  tag: \"page-user-plans\",\n  styleUrl: \"page-user-plans.scss\",\n})\nexport class PageUserPlans {\n  @Prop() uid: string;\n  @State() userPlans: UserPlans;\n  userPlansSub: Subscription;\n  titles = [\n    {tag: \"personal\", text: \"Personal\", disabled: false},\n    {tag: \"team\", text: \"Team\", disabled: false},\n  ];\n  @State() slider: Swiper;\n  @State() usersTeams: UsersTeams;\n  usersListSub: Subscription;\n  usersList: UserPubicProfile[] = [];\n  @State() selectedUser: UserPubicProfile;\n  @State() updateView = false;\n\n  async componentWillLoad() {\n    await this.loadUserPlans();\n  }\n\n  async loadUserPlans() {\n    if (this.uid) {\n      //open other user plan\n      let userPlans: UserPlans = new UserPlans(\n        await UserPlansService.getPlansOfUser(this.uid)\n      );\n      this.userPlans = new UserPlans();\n      this.userPlans.users = userPlans.users;\n      //filter user plans by team manager\n      userPlans.userPlans.map((userPlan) => {\n        const plan = new UserPlan();\n        plan.customerId = userPlan.customerId;\n        plan.otherName = userPlan.otherName;\n        plan.planOfActions = [];\n        userPlan.planOfActions.map((planofaction) => {\n          if (\n            planofaction.product == \"refractories\" &&\n            TrasteelService.isRefraTeamAdmin()\n          ) {\n            plan.planOfActions.push(planofaction);\n          } else if (\n            planofaction.product == \"electrodes\" &&\n            TrasteelService.isElecTeamAdmin()\n          ) {\n            plan.planOfActions.push(planofaction);\n          } else if (\n            planofaction.product == \"engineering\" &&\n            TrasteelService.isEngTeamAdmin()\n          ) {\n            plan.planOfActions.push(planofaction);\n          } else if (\n            planofaction.product == \"rawmaterials\" &&\n            TrasteelService.isRawTeamAdmin()\n          ) {\n            plan.planOfActions.push(planofaction);\n          }\n        });\n        if (plan.planOfActions.length > 0) {\n          this.userPlans.userPlans.push(plan);\n        }\n      });\n      this.selectedUser = await UserService.getPublicProfileUserDetails(\n        this.uid\n      );\n      this.updateSlider();\n    } else {\n      //personal user plans\n      this.userPlansSub = UserPlansService.userPlans$.subscribe((userPlans) => {\n        this.userPlans = userPlans;\n        this.updateSlider();\n      });\n      TrasteelService.isTeamAdmin()\n        ? (this.usersListSub = UserService.userPublicProfilesList$.subscribe(\n            (userProfiles) => {\n              this.usersList = userProfiles;\n              this.updateSlider();\n            }\n          ))\n        : undefined;\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.uid) {\n      //open other user plan\n    } else {\n      TrasteelService.isTeamAdmin()\n        ? this.usersListSub.unsubscribe()\n        : undefined;\n      this.userPlansSub.unsubscribe();\n    }\n  }\n\n  async componentDidLoad() {\n    this.slider = new Swiper(\".slider-plans\" + this.uid, {\n      speed: 400,\n      spaceBetween: 100,\n      allowTouchMove: false,\n      autoHeight: true,\n      on: {\n        slideChange: () => {\n          this.slider ? this.slider.updateAutoHeight() : null;\n        },\n      },\n    });\n    if (!this.uid && TrasteelService.isTeamAdmin()) {\n      this.usersTeams = await TrasteelService.getUsersTeams();\n    }\n  }\n\n  updateSlider() {\n    setTimeout(() => {\n      //reset slider height\n      this.slider ? this.slider.update() : undefined;\n    }, 100);\n  }\n\n  async editPlan(index?) {\n    const modal = await UserPlansService.presentUserPlansUpdate(\n      this.uid,\n      this.userPlans,\n      index\n    );\n    modal.onDidDismiss().then(() => {\n      if (this.uid) this.loadUserPlans(); //update data for team user\n    });\n  }\n\n  renderTeam() {\n    //list users for this team\n    if (\n      this.usersTeams &&\n      this.usersTeams.usersTeams &&\n      this.usersTeams.usersTeams.length > 0\n    ) {\n      const userIds = {};\n      this.usersTeams.usersTeams.map((team) => {\n        if (team.uid !== UserService.userProfile.uid) {\n          userIds[team.uid] = true;\n        }\n      });\n      let users: UserPubicProfile[] = [];\n      Object.keys(userIds).map((uid) => {\n        users.push(this.usersList.find((x) => x.uid == uid));\n      });\n      users = orderBy(users, \"displayName\");\n      return users.length > 0\n        ? [\n            users.map((user) => [\n              <ion-item\n                button\n                onClick={() => UserPlansService.openUsersPlans(user.uid)}\n              >\n                {user.displayName + \" - \" + user.email}\n              </ion-item>,\n            ]),\n          ]\n        : null;\n    } else return null;\n  }\n\n  render() {\n    return [\n      <ion-header>\n        <app-navbar\n          tag={this.uid == null ? \"plan-of-actions\" : null}\n          text={\n            this.uid == null\n              ? \"Plan of Actions\"\n              : \"Plan of Actions - \" + this.selectedUser.displayName\n          }\n          color={Environment.getAppColor()}\n          backButton={this.uid != null}\n        ></app-navbar>\n      </ion-header>,\n      !this.uid && TrasteelService.isTeamAdmin() ? (\n        <app-header-segment-toolbar\n          color={Environment.getAppColor()}\n          swiper={this.slider}\n          titles={this.titles}\n        ></app-header-segment-toolbar>\n      ) : undefined,\n      <ion-content class=\"slides\">\n        <ion-fab vertical=\"top\" horizontal=\"end\" slot=\"fixed\" edge>\n          <ion-fab-button\n            size=\"small\"\n            onClick={() => this.editPlan()}\n            color={Environment.getAppColor()}\n          >\n            <ion-icon name=\"add\"></ion-icon>\n          </ion-fab-button>\n        </ion-fab>\n        <swiper-container class={\"slider-plans\" + this.uid + \" swiper\"}>\n          <swiper-wrapper class=\"swiper-wrapper\">\n            {/* PERSONAL */}\n            <swiper-slide class=\"swiper-slide\">\n              <div class=\"ion-padding-top\"></div>\n              {this.userPlans &&\n              this.userPlans.userPlans &&\n              this.userPlans.userPlans.length > 0 ? (\n                this.userPlans.userPlans.map((userPlan, index) => [\n                  <ion-item button onClick={() => this.editPlan(index)}>\n                    <ion-grid class=\"ion-no-padding\">\n                      <ion-row class=\"ion-no-padding\">\n                        <ion-col>\n                          <ion-item-divider color=\"trasteel\">\n                            {userPlan.customerId != null\n                              ? CustomersService.getCustomersDetails(\n                                  userPlan.customerId\n                                ).fullName\n                              : userPlan.otherName}\n                          </ion-item-divider>\n                        </ion-col>\n                      </ion-row>\n                      {userPlan.planOfActions.map((plan) => [\n                        <ion-row class=\"ion-no-padding\">\n                          <ion-col>\n                            <app-item-detail\n                              lines=\"none\"\n                              label-tag=\"product\"\n                              label-text=\"Product\"\n                              detailText={ProductLines[plan.product]}\n                            ></app-item-detail>\n                          </ion-col>\n                          <ion-col>\n                            <app-item-detail\n                              lines=\"none\"\n                              label-tag=\"updated\"\n                              label-text=\"Updated\"\n                              detailText={new Date(\n                                plan.updated\n                              ).toLocaleDateString()}\n                            ></app-item-detail>\n                          </ion-col>\n                          <ion-col>\n                            <app-item-detail\n                              lines=\"none\"\n                              label-tag=\"due-date\"\n                              label-text=\"Due Date\"\n                              detailText={new Date(\n                                plan.dueDate\n                              ).toLocaleDateString()}\n                            ></app-item-detail>\n                          </ion-col>\n                        </ion-row>,\n                        <ion-row class=\"ion-no-padding\">\n                          <ion-col>\n                            <app-item-detail\n                              lines=\"none\"\n                              label-tag=\"actual-situation\"\n                              label-text=\"Actual Situation\"\n                              detailText={plan.situation}\n                            ></app-item-detail>\n                          </ion-col>\n                          <ion-col>\n                            <app-item-detail\n                              lines=\"none\"\n                              label-tag=\"plan\"\n                              label-text=\"Plan\"\n                              detailText={plan.plan}\n                            ></app-item-detail>\n                          </ion-col>\n                        </ion-row>,\n                        <ion-row class=\"ion-no-padding\">\n                          <ion-item-divider></ion-item-divider>\n                        </ion-row>,\n                      ])}\n                    </ion-grid>\n                  </ion-item>,\n                ])\n              ) : (\n                <ion-item>\n                  <ion-label>Insert a new plan of actions</ion-label>\n                </ion-item>\n              )}\n            </swiper-slide>\n            {/* TEAM */}\n            {!this.uid && TrasteelService.isTeamAdmin() ? (\n              <swiper-slide class=\"swiper-slide\">\n                <ion-list>{this.renderTeam()}</ion-list>\n              </swiper-slide>\n            ) : undefined}\n          </swiper-wrapper>\n        </swiper-container>\n      </ion-content>,\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]}