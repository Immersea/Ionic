{"version":3,"names":["appUserDivePlansCss","AppUserDivePlansStyle0","AppUserDivePlans","this","sitesCollection","componentWillLoad","userDivePlans$","UserService","subscribe","async","userDivePlans","loadingDivePlans","DivePlansService","resetSkeletons","userDivePlansArray","Object","keys","forEach","key","plan","id","date","dives","push","orderBy","filterMySites","diveSitesList$","DiveSitesService","collection","disconnectedCallback","unsubscribe","length","map","divePlan","dive","diveSite","find","site","diveSiteId","updateView","update","event","divePlanId","diveId","stopPropagation","presentDivePlanUpdate","deleteDiveFromPlan","addDive","addDiveToPlan","deleteDivePlan","render","h","Host","skeleton","undefined","format","configuration","fill","slot","color","onClick","ev","name","Environment","isDecoplanner","detail","button","presentDivePlanDetails","coverURL","src","displayName","profilePoints","point","time","depth","DiveToolsService","depthUnit","GasBlenderService","getGasName","gas","delete","TranslationService","getTransl"],"sources":["src/components/udive/app/user/app-user-dive-plans/app-user-dive-plans.scss?tag=app-user-dive-plans","src/components/udive/app/user/app-user-dive-plans/app-user-dive-plans.tsx"],"sourcesContent":["app-user-dive-plans {\n  /* Component styles go here */\n}\n","import {Component, h, State, Host} from \"@stencil/core\";\nimport {UserDivePlans} from \"../../../../../interfaces/udive/user/user-dive-plans\";\nimport {Subscription} from \"rxjs\";\nimport {UserService} from \"../../../../../services/common/user\";\nimport {orderBy} from \"lodash\";\nimport {DiveSitesService} from \"../../../../../services/udive/diveSites\";\nimport {GasBlenderService} from \"../../../../../services/udive/planner/gas-blender\";\nimport {DivePlansService} from \"../../../../../services/udive/divePlans\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {Environment} from \"../../../../../global/env\";\nimport {DiveToolsService} from \"../../../../../services/udive/planner/dive-tools\";\nimport {format} from \"date-fns\";\n\n@Component({\n  tag: \"app-user-dive-plans\",\n  styleUrl: \"app-user-dive-plans.scss\",\n})\nexport class AppUserDivePlans {\n  @State() userDivePlansArray: any[] = [];\n  @State() updateView = false;\n  userDivePlans$: Subscription;\n  diveSitesList$: Subscription;\n  sitesCollection: any[] = [];\n\n  @State() loadingDivePlans = true;\n  //@State() creatingNewDivePlan = false;\n  //creatingNewDivePlan$: Subscription;\n  //@State() editingDivePlan = \"\";\n  //editingDivePlan$: Subscription;\n\n  async componentWillLoad() {\n    /*this.creatingNewDivePlan$ = DivePlansService.creatingNewDivePlan$.subscribe(\n      (value) => {\n        this.creatingNewDivePlan = value;\n      }\n    );\n    this.editingDivePlan$ = DivePlansService.editingDivePlanId$.subscribe(\n      (value) => {\n        this.editingDivePlan = value;\n      }\n    );*/\n    this.userDivePlans$ = UserService.userDivePlans$.subscribe(\n      async (userDivePlans: UserDivePlans) => {\n        this.loadingDivePlans = false;\n        DivePlansService.resetSkeletons();\n        if (userDivePlans) {\n          this.userDivePlansArray = [];\n          Object.keys(userDivePlans).forEach((key) => {\n            let plan = userDivePlans[key] as any;\n            plan.id = key;\n            plan.date = plan.dives[0].date;\n            this.userDivePlansArray.push(plan);\n          });\n          this.userDivePlansArray = orderBy(\n            this.userDivePlansArray,\n            \"date\",\n            \"desc\"\n          );\n          this.filterMySites();\n        }\n      }\n    );\n\n    //load all dive sites\n    this.diveSitesList$ = DiveSitesService.diveSitesList$.subscribe(\n      (collection) => {\n        //update dive sites\n        this.sitesCollection = collection;\n        this.filterMySites();\n      }\n    );\n  }\n\n  disconnectedCallback() {\n    //this.creatingNewDivePlan$.unsubscribe();\n    //this.editingDivePlan$.unsubscribe();\n    this.userDivePlans$.unsubscribe();\n    this.diveSitesList$.unsubscribe();\n  }\n\n  filterMySites() {\n    if (this.sitesCollection.length > 0 && this.userDivePlansArray.length > 0) {\n      this.userDivePlansArray.map((divePlan) => {\n        divePlan.dives.map((dive) => {\n          dive.diveSite = this.sitesCollection.find(\n            (site) => site.id == dive.diveSiteId\n          );\n          this.updateView = !this.updateView;\n        });\n      });\n    }\n  }\n\n  update(event, divePlanId, diveId) {\n    event.stopPropagation();\n    DivePlansService.presentDivePlanUpdate(divePlanId, diveId);\n  }\n\n  delete(event, divePlanId, diveId) {\n    event.stopPropagation();\n    DivePlansService.deleteDiveFromPlan(divePlanId, diveId);\n  }\n\n  addDive(event, divePlanId, diveId) {\n    event.stopPropagation();\n    DivePlansService.addDiveToPlan(divePlanId, diveId);\n  }\n\n  deleteDivePlan(event, divePlanId) {\n    event.stopPropagation();\n    DivePlansService.deleteDivePlan(divePlanId);\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.loadingDivePlans\n          ? [\n              <app-skeletons skeleton=\"userDivePlan\" />,\n              <app-skeletons skeleton=\"userDivePlan\" />,\n              <app-skeletons skeleton=\"userDivePlan\" />,\n              <app-skeletons skeleton=\"userDivePlan\" />,\n              <app-skeletons skeleton=\"userDivePlan\" />,\n            ]\n          : undefined}\n        {/*this.creatingNewDivePlan ? (\n          <app-skeletons skeleton=\"userDivePlan\" />\n        ) : undefined*/}\n        {this.userDivePlansArray.map((divePlan) => (\n          <ion-card>\n            <ion-item>\n              <ion-label>\n                <h2>{format(divePlan.date, \"PP\")}</h2>\n                <p>{divePlan.configuration}</p>\n              </ion-label>\n              <ion-button\n                fill=\"clear\"\n                icon-only\n                slot=\"end\"\n                color=\"danger\"\n                onClick={(ev) => this.deleteDivePlan(ev, divePlan.id)}\n              >\n                <ion-icon name=\"trash-bin\" slot=\"end\"></ion-icon>\n              </ion-button>\n              <ion-button\n                fill=\"clear\"\n                icon-only\n                color={Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"}\n                slot=\"end\"\n                onClick={(ev) =>\n                  this.addDive(ev, divePlan.id, divePlan.dives.length - 1)\n                }\n              >\n                <ion-icon name=\"add-circle\" slot=\"end\"></ion-icon>\n              </ion-button>\n            </ion-item>\n            {divePlan.dives.map((dive, key) => (\n              <ion-item\n                detail\n                button\n                onClick={() =>\n                  DivePlansService.presentDivePlanDetails(divePlan.id, key)\n                }\n              >\n                {dive.diveSite && dive.diveSite.coverURL ? (\n                  <ion-thumbnail slot=\"start\">\n                    <img src={dive.diveSite.coverURL} />\n                  </ion-thumbnail>\n                ) : undefined}\n                <ion-label>\n                  <h3>{format(dive.date, \"p\")}</h3>\n                  {dive.diveSite ? (\n                    <h4>{dive.diveSite.displayName}</h4>\n                  ) : undefined}\n                  {dive.profilePoints.map((point) => (\n                    <p>\n                      {point.time}min @{point.depth}\n                      {DiveToolsService.depthUnit} (\n                      {GasBlenderService.getGasName(point.gas)})\n                    </p>\n                  ))}\n                </ion-label>\n                {key > 0 ? (\n                  <ion-button\n                    fill=\"clear\"\n                    icon-only\n                    slot=\"end\"\n                    color=\"danger\"\n                    onClick={(ev) => this.delete(ev, divePlan.id, key)}\n                  >\n                    <ion-icon name=\"trash\" slot=\"end\"></ion-icon>\n                  </ion-button>\n                ) : undefined}\n\n                <ion-button\n                  fill=\"clear\"\n                  icon-only\n                  slot=\"end\"\n                  color={Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"}\n                  onClick={(ev) => this.update(ev, divePlan.id, key)}\n                >\n                  <ion-icon name=\"create\" slot=\"end\"></ion-icon>\n                </ion-button>\n              </ion-item>\n            ))}\n          </ion-card>\n        ))}\n        {this.userDivePlansArray.length == 0 ? (\n          <ion-item>\n            <ion-label>\n              <h2>\n                {TranslationService.getTransl(\n                  \"no-logbooks\",\n                  \"No dives yet. Click on the '+' button to create your first one.\"\n                )}\n              </h2>\n            </ion-label>\n          </ion-item>\n        ) : undefined}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}