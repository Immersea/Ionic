{"version":3,"names":["pageDivePlanDetailsCss","PageDivePlanDetailsStyle0","PageDivePlanDetails","this","titles","tag","text","disabled","componentWillLoad","divePlanModel","DivePlansService","getDivePlan","planid","divePlan","DivePlan","setConfiguration","configuration","setWithDivePlanModel","diveid","toNumber","dive","dives","getDiveSitesDetails","userRoles","UserService","diveDataToShare","index","user","editPlan","diveSite","RouterService","goBack","componentDidLoad","slider","Swiper","speed","spaceBetween","allowTouchMove","autoHeight","diveSiteId","DiveSitesService","render","h","key","color","Environment","isDecoplanner","slot","onClick","name","format","date","displayName","undefined","stdName","coverURL","photoURL","style","height","item","swiper","class","isShown","segment"],"sources":["src/components/udive/pages/dive-plan/page-dive-plan-details/page-dive-plan-details.scss?tag=page-dive-plan-details","src/components/udive/pages/dive-plan/page-dive-plan-details/page-dive-plan-details.tsx"],"sourcesContent":["page-dive-plan-details {\n  ion-segment-button {\n    --color-checked: var(--ion-color-planner-contrast);\n  }\n}\n","import {Component, h, Prop, State, Element} from \"@stencil/core\";\nimport {UserRoles} from \"../../../../../interfaces/common/user/user-roles\";\nimport {UserService} from \"../../../../../services/common/user\";\nimport {DivePlansService} from \"../../../../../services/udive/divePlans\";\nimport {DecoplannerDive} from \"../../../../../interfaces/udive/planner/decoplanner-dive\";\nimport {DiveSitesService} from \"../../../../../services/udive/diveSites\";\nimport {DivePlan} from \"../../../../../services/udive/planner/dive-plan\";\nimport {MapDataDiveSite} from \"../../../../../interfaces/udive/dive-site/diveSite\";\nimport {RouterService} from \"../../../../../services/common/router\";\nimport {Environment} from \"../../../../../global/env\";\nimport Swiper from \"swiper\";\nimport {format} from \"date-fns\";\nimport {toNumber} from \"lodash\";\n\n@Component({\n  tag: \"page-dive-plan-details\",\n  styleUrl: \"page-dive-plan-details.scss\",\n})\nexport class PageDivePlanDetails {\n  @Element() el: HTMLElement;\n  @Prop() planid: string;\n  @Prop() diveid: number;\n  @State() divePlan: DivePlan;\n  dive: DecoplannerDive;\n  diveSite: MapDataDiveSite;\n  @State() segment = \"plan\";\n  @State() segmentNum = 0;\n  titles = [\n    {tag: \"plan\", text: \"Plan\", disabled: false},\n    {tag: \"profile\", text: \"Profile\", disabled: false},\n    {tag: \"gas\", text: \"Gas\", disabled: false},\n    {tag: \"charts\", text: \"Charts\", disabled: false},\n  ];\n  @State() slider: Swiper;\n  userRoles: UserRoles;\n  diveDataToShare: any;\n\n  async componentWillLoad() {\n    let divePlanModel = await DivePlansService.getDivePlan(this.planid);\n    if (divePlanModel) {\n      this.divePlan = new DivePlan();\n      this.divePlan.setConfiguration(divePlanModel.configuration);\n      this.divePlan.setWithDivePlanModel(divePlanModel);\n      this.diveid = toNumber(this.diveid);\n      this.dive = this.divePlan.dives[this.diveid];\n      this.getDiveSitesDetails();\n      this.userRoles = UserService.userRoles;\n      //send updated params to other views\n      this.diveDataToShare = {\n        divePlan: this.divePlan,\n        index: this.diveid,\n        user: this.userRoles,\n        editPlan: false,\n        diveSite: this.diveSite,\n      };\n    } else {\n      RouterService.goBack();\n    }\n  }\n\n  async componentDidLoad() {\n    this.slider = new Swiper(\".slider-dive-plan\", {\n      speed: 400,\n      spaceBetween: 100,\n      allowTouchMove: true,\n      autoHeight: true,\n    });\n  }\n\n  getDiveSitesDetails() {\n    if (this.dive.diveSiteId) {\n      this.diveSite = DiveSitesService.getDiveSitesDetails(\n        this.dive.diveSiteId\n      );\n    }\n  }\n\n  render() {\n    return [\n      <ion-header>\n        <ion-toolbar\n          color={Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"}\n        >\n          <ion-buttons slot=\"start\">\n            <ion-button onClick={() => RouterService.goBack()} icon-only>\n              <ion-icon name=\"arrow-back\"></ion-icon>\n            </ion-button>\n          </ion-buttons>\n          <ion-title>\n            {format(this.dive.date, \"PP\")}\n            {this.diveSite ? \" - \" + this.diveSite.displayName : undefined}\n            {\" - \" + this.divePlan.configuration.stdName}\n          </ion-title>\n        </ion-toolbar>\n      </ion-header>,\n      this.diveSite && (this.diveSite.coverURL || this.diveSite.photoURL) ? (\n        <ion-header style={{height: \"var(--coverHeight)\"}}>\n          <app-item-cover item={this.diveSite} />\n        </ion-header>\n      ) : undefined,\n      <app-header-segment-toolbar\n        color={Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"}\n        swiper={this.slider}\n        titles={this.titles}\n      ></app-header-segment-toolbar>,\n      <ion-content class=\"slides\">\n        <swiper-container class=\"slider-dive-plan swiper\">\n          <swiper-wrapper class=\"swiper-wrapper\">\n            <swiper-slide class=\"swiper-slide\">\n              <app-decoplanner-showplan\n                diveDataToShare={this.diveDataToShare}\n              />\n            </swiper-slide>\n            <swiper-slide class=\"swiper-slide\">\n              <app-decoplanner-profile diveDataToShare={this.diveDataToShare} />\n            </swiper-slide>\n            <swiper-slide class=\"swiper-slide\">\n              <app-decoplanner-gas\n                diveDataToShare={this.diveDataToShare}\n                isShown={this.segment == \"gas\"}\n              />\n            </swiper-slide>\n            <swiper-slide class=\"swiper-slide\">\n              <app-decoplanner-charts\n                diveDataToShare={this.diveDataToShare}\n                isShown={this.segment == \"charts\"}\n              />\n            </swiper-slide>\n          </swiper-wrapper>\n        </swiper-container>\n      </ion-content>,\n    ];\n  }\n}\n"],"mappings":"0eAAA,MAAMA,EAAyB,+FAC/B,MAAAC,EAAeD,E,MCiBFE,EAAmB,M,yBAS9BC,KAAAC,OAAS,CACP,CAACC,IAAK,OAAQC,KAAM,OAAQC,SAAU,OACtC,CAACF,IAAK,UAAWC,KAAM,UAAWC,SAAU,OAC5C,CAACF,IAAK,MAAOC,KAAM,MAAOC,SAAU,OACpC,CAACF,IAAK,SAAUC,KAAM,SAAUC,SAAU,Q,iFANzB,O,gBACG,E,sBAWtB,uBAAMC,GACJ,IAAIC,QAAsBC,EAAiBC,YAAYR,KAAKS,QAC5D,GAAIH,EAAe,CACjBN,KAAKU,SAAW,IAAIC,EACpBX,KAAKU,SAASE,iBAAiBN,EAAcO,eAC7Cb,KAAKU,SAASI,qBAAqBR,GACnCN,KAAKe,OAASC,mBAAShB,KAAKe,QAC5Bf,KAAKiB,KAAOjB,KAAKU,SAASQ,MAAMlB,KAAKe,QACrCf,KAAKmB,sBACLnB,KAAKoB,UAAYC,EAAYD,UAE7BpB,KAAKsB,gBAAkB,CACrBZ,SAAUV,KAAKU,SACfa,MAAOvB,KAAKe,OACZS,KAAMxB,KAAKoB,UACXK,SAAU,MACVC,SAAU1B,KAAK0B,S,KAEZ,CACLC,EAAcC,Q,EAIlB,sBAAMC,GACJ7B,KAAK8B,OAAS,IAAIC,EAAO,oBAAqB,CAC5CC,MAAO,IACPC,aAAc,IACdC,eAAgB,KAChBC,WAAY,M,CAIhB,mBAAAhB,GACE,GAAInB,KAAKiB,KAAKmB,WAAY,CACxBpC,KAAK0B,SAAWW,EAAiBlB,oBAC/BnB,KAAKiB,KAAKmB,W,EAKhB,MAAAE,GACE,MAAO,CACLC,EAAA,cAAAC,IAAA,4CACED,EAAA,eAAAC,IAAA,2CACEC,MAAOC,EAAYC,gBAAkB,WAAa,WAElDJ,EAAA,eAAAC,IAAA,2CAAaI,KAAK,SAChBL,EAAA,cAAAC,IAAA,2CAAYK,QAAS,IAAMlB,EAAcC,SAAQ,kBAC/CW,EAAA,YAAAC,IAAA,2CAAUM,KAAK,iBAGnBP,EAAA,aAAAC,IAAA,4CACGO,SAAO/C,KAAKiB,KAAK+B,KAAM,MACvBhD,KAAK0B,SAAW,MAAQ1B,KAAK0B,SAASuB,YAAcC,UACpD,MAAQlD,KAAKU,SAASG,cAAcsC,WAI3CnD,KAAK0B,WAAa1B,KAAK0B,SAAS0B,UAAYpD,KAAK0B,SAAS2B,UACxDd,EAAA,cAAYe,MAAO,CAACC,OAAQ,uBAC1BhB,EAAA,kBAAgBiB,KAAMxD,KAAK0B,YAE3BwB,UACJX,EAAA,8BAAAC,IAAA,2CACEC,MAAOC,EAAYC,gBAAkB,WAAa,UAClDc,OAAQzD,KAAK8B,OACb7B,OAAQD,KAAKC,SAEfsC,EAAA,eAAAC,IAAA,2CAAakB,MAAM,UACjBnB,EAAA,oBAAAC,IAAA,2CAAkBkB,MAAM,2BACtBnB,EAAA,kBAAAC,IAAA,2CAAgBkB,MAAM,kBACpBnB,EAAA,gBAAAC,IAAA,2CAAckB,MAAM,gBAClBnB,EAAA,4BAAAC,IAAA,2CACElB,gBAAiBtB,KAAKsB,mBAG1BiB,EAAA,gBAAAC,IAAA,2CAAckB,MAAM,gBAClBnB,EAAA,2BAAAC,IAAA,2CAAyBlB,gBAAiBtB,KAAKsB,mBAEjDiB,EAAA,gBAAAC,IAAA,2CAAckB,MAAM,gBAClBnB,EAAA,uBAAAC,IAAA,2CACElB,gBAAiBtB,KAAKsB,gBACtBqC,QAAS3D,KAAK4D,SAAW,SAG7BrB,EAAA,gBAAAC,IAAA,2CAAckB,MAAM,gBAClBnB,EAAA,0BAAAC,IAAA,2CACElB,gBAAiBtB,KAAKsB,gBACtBqC,QAAS3D,KAAK4D,SAAW,e","ignoreList":[]}