{"version":3,"names":["appCoordinatesCss","AppCoordinatesStyle0","AppCoordinates","updateCoords","this","convertFromDecimals","componentWillLoad","decimalCoordinatesHandler","event","coordinates","detail","name","toNumber","value","DMSCoordinatesHandler","DMSCoordinates","lat","degrees","minutes","seconds","lon","convertToDecimals","lat_degree","Math","trunc","lat_minutesdecimal","lat_minutes","lat_seconds","round","lon_degree","lon_minutesdecimal","lon_minutes","lon_seconds","reverseGeocode","timer","countdown","executeReverseGeocode","location","addressEmit","emit","setTimeout","clearTimeout","coordinatesUpdated","coordinatesEmit","render","h","Host","key","toString","onFormItemChanged","ev","onFormItemBlur","validator","options","min","max","abs","color","lines","slot","display_name","undefined"],"sources":["src/components/common/app/map/app-coordinates/app-coordinates.scss?tag=app-coordinates","src/components/common/app/map/app-coordinates/app-coordinates.tsx"],"sourcesContent":["app-coordinates {\n  width: 100%;\n  height: 100%;\n}\n","import {\n  Component,\n  h,\n  Prop,\n  State,\n  Watch,\n  Host,\n  Event,\n  EventEmitter,\n} from \"@stencil/core\";\nimport {reverseGeocode} from \"../../../../../helpers/utils\";\nimport {LocationIQ} from \"../../../../../services/common/map\";\nimport {toNumber, toString} from \"lodash\";\n\nexport interface DecimalCoords {\n  lat: number;\n  lon: number;\n}\nexport interface DMSCoords {\n  lat: {\n    degrees: number;\n    minutes: number;\n    seconds: number;\n  };\n  lon: {\n    degrees: number;\n    minutes: number;\n    seconds: number;\n  };\n}\n\n@Component({\n  tag: \"app-coordinates\",\n  styleUrl: \"app-coordinates.scss\",\n})\nexport class AppCoordinates {\n  @Event() coordinatesEmit: EventEmitter<DecimalCoords>;\n  @Event() addressEmit: EventEmitter<LocationIQ>;\n  @Prop({mutable: true}) coordinates: DecimalCoords;\n  @State() DMSCoordinates: DMSCoords;\n  @State() location: LocationIQ;\n  timer: number;\n\n  @Watch(\"coordinates\")\n  updateCoords() {\n    this.convertFromDecimals();\n  }\n\n  componentWillLoad() {\n    this.convertFromDecimals();\n  }\n\n  decimalCoordinatesHandler(event: any) {\n    this.coordinates[event.detail.name] = toNumber(event.detail.value);\n  }\n\n  DMSCoordinatesHandler(event: any) {\n    switch (event.detail.name) {\n      case \"latitude-degrees\":\n        this.DMSCoordinates.lat.degrees = toNumber(event.detail.value);\n        break;\n      case \"latitude-minutes\":\n        this.DMSCoordinates.lat.minutes = toNumber(event.detail.value);\n        break;\n      case \"latitude-seconds\":\n        this.DMSCoordinates.lat.seconds = toNumber(event.detail.value);\n        break;\n      case \"longitude-degrees\":\n        this.DMSCoordinates.lon.degrees = toNumber(event.detail.value);\n        break;\n      case \"longitude-minutes\":\n        this.DMSCoordinates.lon.minutes = toNumber(event.detail.value);\n        break;\n      case \"longitude-seconds\":\n        this.DMSCoordinates.lon.seconds = toNumber(event.detail.value);\n        break;\n    }\n    this.convertToDecimals();\n  }\n\n  convertFromDecimals() {\n    if (this.coordinates && this.coordinates.lat) {\n      const lat = this.coordinates.lat;\n      const lat_degree = Math.trunc(lat);\n      const lat_minutesdecimal = (lat - lat_degree) * 60;\n      const lat_minutes = Math.trunc(lat_minutesdecimal);\n      const lat_seconds = Math.round((lat_minutesdecimal - lat_minutes) * 60);\n      const lon = this.coordinates.lon;\n      const lon_degree = Math.trunc(lon);\n      const lon_minutesdecimal = (lon - lon_degree) * 60;\n      const lon_minutes = Math.trunc(lon_minutesdecimal);\n      const lon_seconds = Math.round((lon_minutesdecimal - lon_minutes) * 60);\n      this.DMSCoordinates = {\n        lat: {\n          degrees: lat_degree,\n          minutes: lat_minutes,\n          seconds: lat_seconds,\n        },\n        lon: {\n          degrees: lon_degree,\n          minutes: lon_minutes,\n          seconds: lon_seconds,\n        },\n      };\n      this.reverseGeocode();\n    }\n  }\n\n  convertToDecimals() {\n    if (this.DMSCoordinates && this.DMSCoordinates.lat) {\n      const lat =\n        this.DMSCoordinates.lat.degrees +\n        this.DMSCoordinates.lat.minutes / 60 +\n        this.DMSCoordinates.lat.seconds / 3600;\n      const lon =\n        this.DMSCoordinates.lon.degrees +\n        this.DMSCoordinates.lon.minutes / 60 +\n        this.DMSCoordinates.lon.seconds / 3600;\n      this.coordinates.lat = lat;\n      this.coordinates.lon = lon;\n      this.reverseGeocode();\n    }\n  }\n  async reverseGeocode() {\n    //set timer for geocode - wait until draggable marker is fixed or coordinates are written\n    this.timer = 2000;\n    this.countdown();\n  }\n\n  async executeReverseGeocode() {\n    this.location = await reverseGeocode(\n      this.coordinates.lat,\n      this.coordinates.lon\n    );\n    this.addressEmit.emit(this.location);\n  }\n\n  countdown() {\n    const timer = setTimeout(() => {\n      this.timer -= 1;\n      if (this.timer == 0) {\n        this.executeReverseGeocode();\n      } else {\n        clearTimeout(timer);\n        this.countdown();\n      }\n    }, 1);\n  }\n\n  coordinatesUpdated() {\n    this.coordinatesEmit.emit(this.coordinates);\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.coordinates &&\n        this.coordinates.lat &&\n        this.DMSCoordinates &&\n        this.DMSCoordinates.lat ? (\n          <ion-grid>\n            <ion-row>\n              <ion-col>\n                <app-form-item\n                  label-tag=\"latitude\"\n                  label-text=\"Latitude\"\n                  value={toString(this.coordinates.lat)}\n                  name=\"lat\"\n                  input-type=\"number\"\n                  onFormItemChanged={(ev) => this.decimalCoordinatesHandler(ev)}\n                  onFormItemBlur={() => this.coordinatesUpdated()}\n                  validator={[\n                    {\n                      name: \"minmaxvalue\",\n                      options: {min: -90, max: 90},\n                    },\n                  ]}\n                ></app-form-item>\n              </ion-col>\n              <ion-col>\n                <ion-row>\n                  <ion-col>\n                    <app-form-item\n                      label-tag=\"degrees\"\n                      label-text=\"Degrees\"\n                      value={toString(this.DMSCoordinates.lat.degrees)}\n                      name=\"latitude-degrees\"\n                      input-type=\"number\"\n                      onFormItemChanged={(ev) => this.DMSCoordinatesHandler(ev)}\n                      onFormItemBlur={() => this.coordinatesUpdated()}\n                      validator={[\n                        {\n                          name: \"minmaxvalue\",\n                          options: {min: -90, max: 90},\n                        },\n                      ]}\n                    ></app-form-item>\n                  </ion-col>\n                  <ion-col>\n                    <app-form-item\n                      label-tag=\"minutes\"\n                      label-text=\"Minutes\"\n                      value={toString(\n                        Math.abs(this.DMSCoordinates.lat.minutes)\n                      )}\n                      name=\"latitude-minutes\"\n                      input-type=\"number\"\n                      onFormItemChanged={(ev) => this.DMSCoordinatesHandler(ev)}\n                      onFormItemBlur={() => this.coordinatesUpdated()}\n                      validator={[\n                        {\n                          name: \"minmaxvalue\",\n                          options: {min: 0, max: 60},\n                        },\n                      ]}\n                    ></app-form-item>\n                  </ion-col>\n                  <ion-col>\n                    <app-form-item\n                      label-tag=\"seconds\"\n                      label-text=\"Seconds\"\n                      value={toString(\n                        Math.abs(this.DMSCoordinates.lat.seconds)\n                      )}\n                      name=\"latitude-seconds\"\n                      input-type=\"number\"\n                      onFormItemChanged={(ev) => this.DMSCoordinatesHandler(ev)}\n                      onFormItemBlur={() => this.coordinatesUpdated()}\n                      validator={[\n                        {\n                          name: \"minmaxvalue\",\n                          options: {min: 0, max: 60},\n                        },\n                      ]}\n                    ></app-form-item>\n                  </ion-col>\n                </ion-row>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col>\n                <app-form-item\n                  label-tag=\"longitude\"\n                  label-text=\"Longitude\"\n                  value={toString(this.coordinates.lon)}\n                  name=\"lon\"\n                  input-type=\"number\"\n                  onFormItemChanged={(ev) => this.decimalCoordinatesHandler(ev)}\n                  onFormItemBlur={() => this.coordinatesUpdated()}\n                  validator={[\n                    {\n                      name: \"minmaxvalue\",\n                      options: {min: -180, max: 180},\n                    },\n                  ]}\n                ></app-form-item>\n              </ion-col>\n              <ion-col>\n                <ion-row>\n                  <ion-col>\n                    <app-form-item\n                      label-tag=\"degrees\"\n                      label-text=\"Degrees\"\n                      value={toString(this.DMSCoordinates.lon.degrees)}\n                      name=\"longitude-degrees\"\n                      input-type=\"number\"\n                      onFormItemChanged={(ev) => this.DMSCoordinatesHandler(ev)}\n                      onFormItemBlur={() => this.coordinatesUpdated()}\n                      validator={[\n                        {\n                          name: \"minmaxvalue\",\n                          options: {min: -180, max: 180},\n                        },\n                      ]}\n                    ></app-form-item>\n                  </ion-col>\n                  <ion-col>\n                    <app-form-item\n                      label-tag=\"minutes\"\n                      label-text=\"Minutes\"\n                      value={toString(\n                        Math.abs(this.DMSCoordinates.lon.minutes)\n                      )}\n                      name=\"longitude-minutes\"\n                      input-type=\"number\"\n                      onFormItemChanged={(ev) => this.DMSCoordinatesHandler(ev)}\n                      onFormItemBlur={() => this.coordinatesUpdated()}\n                      validator={[\n                        {\n                          name: \"minmaxvalue\",\n                          options: {min: 0, max: 60},\n                        },\n                      ]}\n                    ></app-form-item>\n                  </ion-col>\n                  <ion-col>\n                    <app-form-item\n                      label-tag=\"seconds\"\n                      label-text=\"Seconds\"\n                      value={toString(\n                        Math.abs(this.DMSCoordinates.lon.seconds)\n                      )}\n                      name=\"longitude-seconds\"\n                      input-type=\"number\"\n                      onFormItemChanged={(ev) => this.DMSCoordinatesHandler(ev)}\n                      onFormItemBlur={() => this.coordinatesUpdated()}\n                      validator={[\n                        {\n                          name: \"minmaxvalue\",\n                          options: {min: 0, max: 60},\n                        },\n                      ]}\n                    ></app-form-item>\n                  </ion-col>\n                </ion-row>\n              </ion-col>\n            </ion-row>\n            {this.location ? (\n              <ion-row>\n                <ion-col>\n                  <ion-item color=\"dark\" lines=\"none\">\n                    <ion-icon\n                      name=\"navigate-circle-outline\"\n                      slot=\"start\"\n                    ></ion-icon>\n                    <ion-label>{this.location.display_name}</ion-label>\n                  </ion-item>\n                </ion-col>\n              </ion-row>\n            ) : undefined}\n          </ion-grid>\n        ) : undefined}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}