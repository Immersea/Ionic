{"version":3,"names":["appItemDetailCss","AppItemDetailStyle0","AppItemDetail","this","show","componentWillLoad","isBoolean","detailText","isString","isNumber","isObject","isNull","inset","h","labelText","style","color","labelTag","TranslationService","getTransl","appendText","undefined","alignRight","text","detailTag","isDate","Date","toLocaleDateString","render","showItem","lines","appMultilanguageTextCss","AppMultilanguageTextStyle0","AppMultilanguageText","selectedLanguage","UserService","userSettings","getLanguage","textLanguages","Object","keys","sort","length","includes","changeSelectedLanguage","ev","detail","Host","key","size","selectedLangCode","picker","selectOnly","onLanguageChanged","gridCss","IonGridStyle0","Grid","constructor","hostRef","fixed","mode","getIonMode","class","noteIosCss","IonNoteIosStyle0","noteMdCss","IonNoteMdStyle0","Note","createColorClasses","skeletonTextCss","IonSkeletonTextStyle0","SkeletonText","animated","emitStyle","ionStyle","emit","config","getBoolean","inMedia","hostContext","el"],"sources":["src/components/common/app/common/app-item-detail/app-item-detail.scss?tag=app-item-detail&encapsulation=shadow","src/components/common/app/common/app-item-detail/app-item-detail.tsx","src/components/common/app/common/app-multilanguage-text/app-multilanguage-text.scss?tag=app-multilanguage-text","src/components/common/app/common/app-multilanguage-text/app-multilanguage-text.tsx","node_modules/@ionic/core/dist/collection/components/grid/grid.css?tag=ion-grid&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/grid/grid.js","node_modules/@ionic/core/dist/collection/components/note/note.ios.css?tag=ion-note&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/note/note.md.css?tag=ion-note&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/note/note.js","node_modules/@ionic/core/dist/collection/components/skeleton-text/skeleton-text.css?tag=ion-skeleton-text&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/skeleton-text/skeleton-text.js"],"sourcesContent":["app-item-detail {\n  ion-item {\n    border: 1px solid black;\n    background-color: #000000;\n    --padding-end: 0px;\n    --padding-start: 0px;\n    --inner-padding-bottom: 0;\n    --inner-padding-end: 0;\n    --inner-padding-start: 0;\n    --inner-padding-top: 0;\n  }\n}\n","import {Component, Prop, Watch, h} from \"@stencil/core\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {TextMultilanguage} from \"../../../../../interfaces/interfaces\";\nimport {isBoolean, isNull, isNumber, isObject, isString} from \"lodash\";\n\n@Component({\n  tag: \"app-item-detail\",\n  styleUrl: \"app-item-detail.scss\",\n  shadow: true,\n})\nexport class AppItemDetail {\n  @Prop() labelTag?: string; //optional to get translation\n  @Prop() labelText?: string;\n  @Prop() detailTag?: string; //optional to get translation\n  @Prop({mutable: true}) detailText?:\n    | string\n    | number\n    | boolean\n    | TextMultilanguage;\n  @Prop() appendText?: string;\n  @Prop() showItem?: boolean = true;\n  @Prop() lines?: \"none\" | \"full\" | \"inset\" = \"none\";\n  @Prop() isDate? = false;\n  @Prop() alignRight? = false;\n  show = false;\n\n  componentWillLoad() {\n    this.show =\n      (isBoolean(this.detailText) ||\n        isString(this.detailText) ||\n        isNumber(this.detailText) ||\n        isObject(this.detailText)) &&\n      !isNull(this.detailText);\n  }\n\n  @Watch(\"detailText\")\n  inset() {\n    return (\n      <ion-label>\n        {this.labelText ? (\n          <p\n            style={\n              isNumber(this.detailText) || this.detailText == \"-\"\n                ? {\n                    \"font-size\": \"0.75rem\",\n                    color: \"black\",\n                  }\n                : {\n                    \"font-size\": \"0.75rem\",\n                    color: \"black\",\n                  }\n            }\n          >\n            {this.labelTag\n              ? TranslationService.getTransl(this.labelTag, this.labelText)\n              : this.labelText}\n            {this.appendText ? this.appendText : undefined}\n          </p>\n        ) : undefined}\n        <h2\n          style={\n            this.alignRight\n              ? {\n                  \"text-align\": \"right\",\n                }\n              : null\n          }\n        >\n          {typeof this.detailText === \"object\" && !isNull(this.detailText) ? (\n            <app-multilanguage-text\n              text={this.detailText}\n            ></app-multilanguage-text>\n          ) : isBoolean(this.detailText) ? (\n            this.detailText === true ? (\n              TranslationService.getTransl(\"yes\", \"Yes\")\n            ) : (\n              TranslationService.getTransl(\"no\", \"No\")\n            )\n          ) : this.detailTag && isString(this.detailText) ? (\n            TranslationService.getTransl(this.detailTag, this.detailText)\n          ) : this.isDate ? (\n            new Date(this.detailText).toLocaleDateString()\n          ) : (\n            this.detailText\n          )}\n        </h2>\n      </ion-label>\n    );\n  }\n\n  render() {\n    return [\n      this.show ? (\n        this.showItem ? (\n          <ion-item lines={this.lines}>{this.inset()}</ion-item>\n        ) : (\n          <div>{this.inset()}</div>\n        )\n      ) : undefined,\n    ];\n  }\n}\n","app-multilanguage-text {\n  ion-grid {\n    --ion-grid-column-padding: 0px;\n    --ion-grid-padding: 0px;\n  }\n}\n","import {Component, h, Host, Prop, State} from \"@stencil/core\";\nimport {TextMultilanguage} from \"../../../../../interfaces/interfaces\";\nimport {UserService} from \"../../../../../services/common/user\";\n\n@Component({\n  tag: \"app-multilanguage-text\",\n  styleUrl: \"app-multilanguage-text.scss\",\n})\nexport class AppMultilanguageText {\n  @Prop() text: TextMultilanguage;\n  @State() selectedLanguage = \"en\";\n\n  componentWillLoad() {\n    this.selectedLanguage = UserService.userSettings.getLanguage();\n    const textLanguages = Object.keys(this.text).sort();\n    //check if user language is available\n    if (\n      textLanguages &&\n      textLanguages.length > 0 &&\n      !textLanguages.includes(this.selectedLanguage)\n    ) {\n      //not available - check if english is available\n      if (textLanguages.includes(\"en\")) {\n        this.selectedLanguage = \"en\";\n      } else {\n        this.selectedLanguage = textLanguages[0];\n      }\n    }\n  }\n\n  changeSelectedLanguage(ev) {\n    if (ev.detail) {\n      this.selectedLanguage = ev.detail;\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <ion-grid>\n          <ion-row>\n            <ion-col>\n              {\n                //show according to user language\n                this.text[this.selectedLanguage]\n              }\n            </ion-col>\n            <ion-col size=\"1\">\n              <app-language-picker\n                selectedLangCode={this.selectedLanguage}\n                picker\n                selectOnly\n                onLanguageChanged={(ev) => this.changeSelectedLanguage(ev)}\n              ></app-language-picker>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n      </Host>\n    );\n  }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --ion-grid-padding: Padding for the Grid\n   * @prop --ion-grid-padding-xs: Padding for the Grid on xs screens\n   * @prop --ion-grid-padding-sm: Padding for the Grid on sm screens\n   * @prop --ion-grid-padding-md: Padding for the Grid on md screens\n   * @prop --ion-grid-padding-lg: Padding for the Grid on lg screens\n   * @prop --ion-grid-padding-xl: Padding for the Grid on xl screens\n   *\n   * @prop --ion-grid-width: Width of the fixed Grid\n   * @prop --ion-grid-width-xs: Width of the fixed Grid on xs screens\n   * @prop --ion-grid-width-sm: Width of the fixed Grid on sm screens\n   * @prop --ion-grid-width-md: Width of the fixed Grid on md screens\n   * @prop --ion-grid-width-lg: Width of the fixed Grid on lg screens\n   * @prop --ion-grid-width-xl: Width of the fixed Grid on xl screens\n   */\n  -webkit-padding-start: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  padding-inline-start: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  -webkit-padding-end: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  padding-inline-end: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  padding-top: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  padding-bottom: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  display: block;\n  flex: 1;\n}\n@media (min-width: 576px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    padding-inline-start: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    padding-inline-end: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    padding-top: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    padding-bottom: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n  }\n}\n@media (min-width: 768px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    padding-inline-start: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    padding-inline-end: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    padding-top: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    padding-bottom: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n  }\n}\n@media (min-width: 992px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    padding-inline-start: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    padding-inline-end: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    padding-top: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    padding-bottom: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n  }\n}\n@media (min-width: 1200px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    padding-inline-start: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    padding-inline-end: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    padding-top: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    padding-bottom: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n  }\n}\n\n:host(.grid-fixed) {\n  width: var(--ion-grid-width-xs, var(--ion-grid-width, 100%));\n  max-width: 100%;\n}\n@media (min-width: 576px) {\n  :host(.grid-fixed) {\n    width: var(--ion-grid-width-sm, var(--ion-grid-width, 540px));\n  }\n}\n@media (min-width: 768px) {\n  :host(.grid-fixed) {\n    width: var(--ion-grid-width-md, var(--ion-grid-width, 720px));\n  }\n}\n@media (min-width: 992px) {\n  :host(.grid-fixed) {\n    width: var(--ion-grid-width-lg, var(--ion-grid-width, 960px));\n  }\n}\n@media (min-width: 1200px) {\n  :host(.grid-fixed) {\n    width: var(--ion-grid-width-xl, var(--ion-grid-width, 1140px));\n  }\n}\n\n:host(.ion-no-padding) {\n  --ion-grid-column-padding: 0;\n  --ion-grid-column-padding-xs: 0;\n  --ion-grid-column-padding-sm: 0;\n  --ion-grid-column-padding-md: 0;\n  --ion-grid-column-padding-lg: 0;\n  --ion-grid-column-padding-xl: 0;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class Grid {\n    constructor() {\n        this.fixed = false;\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '930ce78b02f8360fbca08a35d364d2c09128c6c8', class: {\n                [mode]: true,\n                'grid-fixed': this.fixed,\n            } }, h(\"slot\", { key: 'c47bf7ef2197f5ebc42d3e2c55044276fb0db393' })));\n    }\n    static get is() { return \"ion-grid\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"grid.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"grid.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"fixed\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the grid will have a fixed width based on the screen size.\"\n                },\n                \"attribute\": \"fixed\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --color: Color of the note\n   */\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  box-sizing: border-box;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n:host {\n  --color: var(--ion-color-step-350, var(--ion-text-color-step-650, #a6a6a6));\n  font-size: max(14px, 1rem);\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --color: Color of the note\n   */\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  box-sizing: border-box;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n:host {\n  --color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n  font-size: 0.875rem;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { createColorClasses } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class Note {\n    constructor() {\n        this.color = undefined;\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '90ec2fe8c9487608ed8c0bdc32c2e80a6a0890b3', class: createColorClasses(this.color, {\n                [mode]: true,\n            }) }, h(\"slot\", { key: '115ee3f79e6c526b0644443aad468e99385d0eda' })));\n    }\n    static get is() { return \"ion-note\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"note.ios.scss\"],\n            \"md\": [\"note.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"note.ios.css\"],\n            \"md\": [\"note.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            }\n        };\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the skeleton text\n   * @prop --background-rgb: Background of the skeleton text in rgb format\n   *\n   * @prop --border-radius: Border radius of the skeleton text\n   */\n  --background: rgba(var(--background-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.065);\n  border-radius: var(--border-radius, inherit);\n  display: block;\n  width: 100%;\n  height: inherit;\n  margin-top: 4px;\n  margin-bottom: 4px;\n  background: var(--background);\n  line-height: 10px;\n  user-select: none;\n  pointer-events: none;\n}\n\nspan {\n  display: inline-block;\n}\n\n:host(.in-media) {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  height: 100%;\n}\n\n:host(.skeleton-text-animated) {\n  position: relative;\n  background: linear-gradient(to right, rgba(var(--background-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.065) 8%, rgba(var(--background-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.135) 18%, rgba(var(--background-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.065) 33%);\n  background-size: 800px 104px;\n  animation-duration: 1s;\n  animation-fill-mode: forwards;\n  animation-iteration-count: infinite;\n  animation-name: shimmer;\n  animation-timing-function: linear;\n}\n\n/* stylelint-disable property-disallowed-list */\n@keyframes shimmer {\n  0% {\n    background-position: -400px 0;\n  }\n  100% {\n    background-position: 400px 0;\n  }\n}\n/* stylelint-enable property-disallowed-list */","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { hostContext } from \"../../utils/theme\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class SkeletonText {\n    constructor() {\n        this.animated = false;\n    }\n    componentWillLoad() {\n        this.emitStyle();\n    }\n    emitStyle() {\n        // The emitted property is used by item in order\n        // to add the item-skeleton-text class which applies\n        // overflow: hidden to its label\n        const style = {\n            'skeleton-text': true,\n        };\n        this.ionStyle.emit(style);\n    }\n    render() {\n        const animated = this.animated && config.getBoolean('animated', true);\n        const inMedia = hostContext('ion-avatar', this.el) || hostContext('ion-thumbnail', this.el);\n        const mode = getIonMode(this);\n        return (h(Host, { key: '1a3e78e9a6f740d609d1f0b7a16cb6eff4a2d617', class: {\n                [mode]: true,\n                'skeleton-text-animated': animated,\n                'in-media': inMedia,\n            } }, h(\"span\", { key: 'be3eabe196ec6e8ec19857375ba30f4c8aa58e7f' }, \"\\u00A0\")));\n    }\n    static get is() { return \"ion-skeleton-text\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"skeleton-text.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"skeleton-text.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"animated\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the skeleton text will animate.\"\n                },\n                \"attribute\": \"animated\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionStyle\",\n                \"name\": \"ionStyle\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Emitted when the styles change.\"\n                },\n                \"complexType\": {\n                    \"original\": \"StyleEventDetail\",\n                    \"resolved\": \"StyleEventDetail\",\n                    \"references\": {\n                        \"StyleEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::StyleEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get elementRef() { return \"el\"; }\n}\n"],"mappings":"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","ignoreList":[]}