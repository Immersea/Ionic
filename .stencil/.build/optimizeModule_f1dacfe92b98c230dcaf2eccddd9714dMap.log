{"version":3,"names":["pageAdminAgenciesCss","PageAdminAgenciesStyle0","PageAdminAgencies","componentWillLoad","this","userRoles","UserService","systemSub","SystemService","systemPreferences$","subscribe","prefs","agencies","Object","keys","divingAgencies","forEach","agencyId","isSuperAdmin","roles","includes","toLowerCase","agency","id","push","selectedAgency","cloneDeep","createCertificationsArray","selectedAgencyCertifications","certs","certifications","map","key","cert","orderBy","disconnectedCallback","unsubscribe","updateAgency","isUpdated","find","handleChange","ev","detail","name","value","reorderCertifications","reorder","itemMove","splice","from","to","order","complete","editCertification","undefined","maxDepth","length","group","modal","RouterService","openModal","diveCertification","onDidDismiss","then","updatedCert","data","updateView","updateImageUrls","imageType","type","url","photoURL","coverURL","save","res","CallableFunctionsUdiveService","updateDivingAgency","cancel","render","h","class","item","collection","SYSTEMCOLLECTION","onCoverUploaded","vertical","horizontal","slot","style","marginTop","fabButtonTopMarginString","onIonChange","interface","onFormItemChanged","validator","website","tag","text","onClick","disabled","onIonItemReorder","i","src","fill","onSaveEmit","onCancelEmit"],"sources":["src/components/udive/pages/admin/page-admin-agencies/page-admin-agencies.scss?tag=page-admin-agencies","src/components/udive/pages/admin/page-admin-agencies/page-admin-agencies.tsx"],"sourcesContent":["page-admin-agencies {\n  .cover {\n    height: var(--coverHeight);\n  }\n}\n","import {Component, h, State} from \"@stencil/core\";\nimport {UserService} from \"../../../../../services/common/user\";\nimport {UserRoles} from \"../../../../../interfaces/common/user/user-roles\";\nimport {\n  SystemService,\n  SYSTEMCOLLECTION,\n} from \"../../../../../services/common/system\";\nimport {Subscription} from \"rxjs\";\nimport {\n  Agency,\n  Certification,\n} from \"../../../../../interfaces/udive/diving-class/divingClass\";\nimport {cloneDeep, orderBy} from \"lodash\";\nimport {RouterService} from \"../../../../../services/common/router\";\nimport {fabButtonTopMarginString} from \"../../../../../helpers/utils\";\nimport {CallableFunctionsUdiveService} from \"../../../../../services/udive/callableFunctions\";\n\n@Component({\n  tag: \"page-admin-agencies\",\n  styleUrl: \"page-admin-agencies.scss\",\n})\nexport class PageAdminAgencies {\n  systemSub: Subscription;\n  userRoles: UserRoles;\n  @State() selectedAgency: Agency;\n  @State() selectedAgencyCertifications: Certification[] = [];\n  agencies: Agency[];\n  @State() isUpdated = false;\n  @State() updateView = true;\n\n  componentWillLoad() {\n    this.userRoles = UserService.userRoles;\n    this.systemSub = SystemService.systemPreferences$.subscribe((prefs) => {\n      this.agencies = [];\n      Object.keys(prefs.divingAgencies).forEach((agencyId) => {\n        //set only agencies allowed to this user\n        if (\n          this.userRoles.isSuperAdmin() ||\n          this.userRoles.roles.includes(agencyId.toLowerCase() + \"-admin\")\n        ) {\n          const agency = prefs.divingAgencies[agencyId];\n          agency.id = agencyId;\n          this.agencies.push(agency);\n        }\n      });\n      if (!this.selectedAgency)\n        this.selectedAgency = cloneDeep(this.agencies[0]);\n      this.createCertificationsArray();\n    });\n  }\n\n  createCertificationsArray() {\n    this.selectedAgencyCertifications = [];\n    const certs = [];\n    Object.keys(this.selectedAgency.certifications).map((key) => {\n      let cert = this.selectedAgency.certifications[key];\n      cert.id = key;\n      certs.push(cert);\n    });\n    this.selectedAgencyCertifications = orderBy(certs, \"order\");\n  }\n\n  disconnectedCallback() {\n    this.systemSub.unsubscribe();\n  }\n\n  updateAgency(agencyId) {\n    this.isUpdated = false;\n    this.selectedAgency = cloneDeep(\n      this.agencies.find((agency) => agency.id == agencyId)\n    );\n    this.createCertificationsArray();\n  }\n\n  handleChange(ev) {\n    this.isUpdated = true;\n    this.selectedAgency[ev.detail.name] = ev.detail.value;\n  }\n\n  async reorderCertifications(reorder) {\n    this.isUpdated = true;\n    const certs = cloneDeep(this.selectedAgencyCertifications);\n    const itemMove = certs.splice(reorder.detail.from, 1)[0];\n    certs.splice(reorder.detail.to, 0, itemMove);\n    certs.forEach((cert, order) => {\n      cert.order = order;\n    });\n    reorder.detail.complete(certs);\n    this.selectedAgencyCertifications = orderBy(certs, \"order\");\n  }\n\n  async editCertification(key?) {\n    this.isUpdated = true;\n    let cert = null;\n    if (key === undefined) {\n      cert = {\n        id: null,\n        maxDepth: 20,\n        name: \"\",\n        order: this.selectedAgencyCertifications\n          ? this.selectedAgencyCertifications.length\n          : 0,\n        group: \"\",\n      };\n    } else {\n      cert = cloneDeep(this.selectedAgencyCertifications[key]);\n    }\n\n    const modal = await RouterService.openModal(\n      \"modal-dive-certification-update\",\n      {\n        agencyId: this.selectedAgency.id,\n        diveCertification: cert,\n      }\n    );\n    modal.onDidDismiss().then((updatedCert) => {\n      const cert = updatedCert.data as Certification;\n      if (cert) {\n        if (key === undefined) {\n          this.selectedAgencyCertifications.push(cert);\n        } else {\n          this.selectedAgencyCertifications[key] = cert;\n        }\n        this.updateView = !this.updateView;\n      }\n    });\n  }\n\n  updateImageUrls(ev) {\n    this.isUpdated = true;\n    const imageType = ev.detail.type;\n    const url = ev.detail.url;\n    if (imageType == \"photo\") {\n      this.selectedAgency.photoURL = url;\n    } else {\n      this.selectedAgency.coverURL = url;\n    }\n  }\n\n  async save() {\n    //update certifications\n    this.selectedAgency.certifications = {};\n    this.selectedAgencyCertifications.map((cert) => {\n      this.selectedAgency.certifications[cert.id] = cert;\n    });\n    const res = await CallableFunctionsUdiveService.updateDivingAgency(\n      this.selectedAgency.id,\n      this.selectedAgency\n    );\n    if (res) {\n      this.isUpdated = false;\n    }\n  }\n\n  cancel() {\n    this.isUpdated = false;\n    this.updateAgency(this.selectedAgency.id);\n  }\n\n  render() {\n    return [\n      <ion-header class=\"cover\">\n        <app-upload-cover\n          item={{\n            collection: SYSTEMCOLLECTION,\n            id: this.selectedAgency.id,\n            photoURL: this.selectedAgency.photoURL,\n            coverURL: this.selectedAgency.coverURL,\n          }}\n          onCoverUploaded={(ev) => this.updateImageUrls(ev)}\n        ></app-upload-cover>\n      </ion-header>,\n      <ion-content>\n        <ion-fab\n          vertical=\"top\"\n          horizontal=\"start\"\n          slot=\"fixed\"\n          style={{marginTop: fabButtonTopMarginString(0)}}\n        >\n          <ion-menu-button class=\"fab-icon\" />\n        </ion-fab>\n        <ion-list>\n          {this.agencies.length > 0 ? (\n            <ion-item>\n              <ion-label>Select Diving Agency</ion-label>\n              <ion-select\n                value={this.selectedAgency.id}\n                onIonChange={(ev) => this.updateAgency(ev.detail.value)}\n                interface=\"popover\"\n              >\n                {this.agencies.map((agency) => (\n                  <ion-select-option value={agency.id}>\n                    {agency.name}\n                  </ion-select-option>\n                ))}\n              </ion-select>\n            </ion-item>\n          ) : undefined}\n          <app-form-item\n            label-tag=\"name\"\n            label-text=\"Name\"\n            value={this.selectedAgency.name}\n            name=\"name\"\n            input-type=\"text\"\n            onFormItemChanged={(ev) => this.handleChange(ev)}\n            validator={[\"required\"]}\n          ></app-form-item>\n          <app-form-item\n            label-tag=\"website\"\n            label-text=\"Website\"\n            value={this.selectedAgency.website}\n            name=\"website\"\n            input-type=\"text\"\n            onFormItemChanged={(ev) => this.handleChange(ev)}\n            validator={[\"required\"]}\n          ></app-form-item>\n        </ion-list>\n        <ion-list>\n          <ion-list-header>\n            <ion-label>\n              <my-transl tag=\"certifications\" text=\"Certifications\" />\n            </ion-label>\n            <ion-button icon-only onClick={() => this.editCertification()}>\n              <ion-icon name=\"add-circle-outline\"></ion-icon>\n            </ion-button>\n          </ion-list-header>\n          <ion-reorder-group\n            disabled={false}\n            onIonItemReorder={(ev) => this.reorderCertifications(ev)}\n          >\n            {this.selectedAgencyCertifications.map((cert, i) => (\n              <ion-item>\n                {cert.photoURL ? (\n                  <ion-avatar slot=\"start\">\n                    <img src={cert.photoURL} />\n                  </ion-avatar>\n                ) : undefined}\n                <ion-reorder slot=\"end\"></ion-reorder>\n                <ion-label>\n                  {cert.order + 1}. {cert.name}\n                </ion-label>\n                <ion-button\n                  icon-only\n                  fill=\"clear\"\n                  onClick={() => this.editCertification(i)}\n                >\n                  <ion-icon name=\"create-outline\"></ion-icon>\n                </ion-button>\n              </ion-item>\n            ))}\n          </ion-reorder-group>\n        </ion-list>\n      </ion-content>,\n      this.isUpdated ? (\n        <app-modal-footer\n          onSaveEmit={() => this.save()}\n          onCancelEmit={() => this.cancel()}\n        />\n      ) : undefined,\n    ];\n  }\n}\n"],"mappings":"gXAAA,MAAMA,EAAuB,wDAC7B,MAAAC,EAAeD,E,MCoBFE,EAAiB,M,yFAI6B,G,eAEpC,M,gBACC,I,CAEtB,iBAAAC,GACEC,KAAKC,UAAYC,EAAYD,UAC7BD,KAAKG,UAAYC,EAAcC,mBAAmBC,WAAWC,IAC3DP,KAAKQ,SAAW,GAChBC,OAAOC,KAAKH,EAAMI,gBAAgBC,SAASC,IAEzC,GACEb,KAAKC,UAAUa,gBACfd,KAAKC,UAAUc,MAAMC,SAASH,EAASI,cAAgB,UACvD,CACA,MAAMC,EAASX,EAAMI,eAAeE,GACpCK,EAAOC,GAAKN,EACZb,KAAKQ,SAASY,KAAKF,E,KAGvB,IAAKlB,KAAKqB,eACRrB,KAAKqB,eAAiBC,oBAAUtB,KAAKQ,SAAS,IAChDR,KAAKuB,2BAA2B,G,CAIpC,yBAAAA,GACEvB,KAAKwB,6BAA+B,GACpC,MAAMC,EAAQ,GACdhB,OAAOC,KAAKV,KAAKqB,eAAeK,gBAAgBC,KAAKC,IACnD,IAAIC,EAAO7B,KAAKqB,eAAeK,eAAeE,GAC9CC,EAAKV,GAAKS,EACVH,EAAML,KAAKS,EAAK,IAElB7B,KAAKwB,6BAA+BM,kBAAQL,EAAO,Q,CAGrD,oBAAAM,GACE/B,KAAKG,UAAU6B,a,CAGjB,YAAAC,CAAapB,GACXb,KAAKkC,UAAY,MACjBlC,KAAKqB,eAAiBC,oBACpBtB,KAAKQ,SAAS2B,MAAMjB,GAAWA,EAAOC,IAAMN,KAE9Cb,KAAKuB,2B,CAGP,YAAAa,CAAaC,GACXrC,KAAKkC,UAAY,KACjBlC,KAAKqB,eAAegB,EAAGC,OAAOC,MAAQF,EAAGC,OAAOE,K,CAGlD,2BAAMC,CAAsBC,GAC1B1C,KAAKkC,UAAY,KACjB,MAAMT,EAAQH,oBAAUtB,KAAKwB,8BAC7B,MAAMmB,EAAWlB,EAAMmB,OAAOF,EAAQJ,OAAOO,KAAM,GAAG,GACtDpB,EAAMmB,OAAOF,EAAQJ,OAAOQ,GAAI,EAAGH,GACnClB,EAAMb,SAAQ,CAACiB,EAAMkB,KACnBlB,EAAKkB,MAAQA,CAAK,IAEpBL,EAAQJ,OAAOU,SAASvB,GACxBzB,KAAKwB,6BAA+BM,kBAAQL,EAAO,Q,CAGrD,uBAAMwB,CAAkBrB,GACtB5B,KAAKkC,UAAY,KACjB,IAAIL,EAAO,KACX,GAAID,IAAQsB,UAAW,CACrBrB,EAAO,CACLV,GAAI,KACJgC,SAAU,GACVZ,KAAM,GACNQ,MAAO/C,KAAKwB,6BACRxB,KAAKwB,6BAA6B4B,OAClC,EACJC,MAAO,G,KAEJ,CACLxB,EAAOP,oBAAUtB,KAAKwB,6BAA6BI,G,CAGrD,MAAM0B,QAAcC,EAAcC,UAChC,kCACA,CACE3C,SAAUb,KAAKqB,eAAeF,GAC9BsC,kBAAmB5B,IAGvByB,EAAMI,eAAeC,MAAMC,IACzB,MAAM/B,EAAO+B,EAAYC,KACzB,GAAIhC,EAAM,CACR,GAAID,IAAQsB,UAAW,CACrBlD,KAAKwB,6BAA6BJ,KAAKS,E,KAClC,CACL7B,KAAKwB,6BAA6BI,GAAOC,C,CAE3C7B,KAAK8D,YAAc9D,KAAK8D,U,KAK9B,eAAAC,CAAgB1B,GACdrC,KAAKkC,UAAY,KACjB,MAAM8B,EAAY3B,EAAGC,OAAO2B,KAC5B,MAAMC,EAAM7B,EAAGC,OAAO4B,IACtB,GAAIF,GAAa,QAAS,CACxBhE,KAAKqB,eAAe8C,SAAWD,C,KAC1B,CACLlE,KAAKqB,eAAe+C,SAAWF,C,EAInC,UAAMG,GAEJrE,KAAKqB,eAAeK,eAAiB,GACrC1B,KAAKwB,6BAA6BG,KAAKE,IACrC7B,KAAKqB,eAAeK,eAAeG,EAAKV,IAAMU,CAAI,IAEpD,MAAMyC,QAAYC,EAA8BC,mBAC9CxE,KAAKqB,eAAeF,GACpBnB,KAAKqB,gBAEP,GAAIiD,EAAK,CACPtE,KAAKkC,UAAY,K,EAIrB,MAAAuC,GACEzE,KAAKkC,UAAY,MACjBlC,KAAKiC,aAAajC,KAAKqB,eAAeF,G,CAGxC,MAAAuD,GACE,MAAO,CACLC,EAAA,cAAA/C,IAAA,2CAAYgD,MAAM,SAChBD,EAAA,oBAAA/C,IAAA,2CACEiD,KAAM,CACJC,WAAYC,EACZ5D,GAAInB,KAAKqB,eAAeF,GACxBgD,SAAUnE,KAAKqB,eAAe8C,SAC9BC,SAAUpE,KAAKqB,eAAe+C,UAEhCY,gBAAkB3C,GAAOrC,KAAK+D,gBAAgB1B,MAGlDsC,EAAA,eAAA/C,IAAA,4CACE+C,EAAA,WAAA/C,IAAA,2CACEqD,SAAS,MACTC,WAAW,QACXC,KAAK,QACLC,MAAO,CAACC,UAAWC,EAAyB,KAE5CX,EAAA,mBAAA/C,IAAA,2CAAiBgD,MAAM,cAEzBD,EAAA,YAAA/C,IAAA,4CACG5B,KAAKQ,SAAS4C,OAAS,EACtBuB,EAAA,gBACEA,EAAA,yCACAA,EAAA,cACEnC,MAAOxC,KAAKqB,eAAeF,GAC3BoE,YAAclD,GAAOrC,KAAKiC,aAAaI,EAAGC,OAAOE,OACjDgD,UAAU,WAETxF,KAAKQ,SAASmB,KAAKT,GAClByD,EAAA,qBAAmBnC,MAAOtB,EAAOC,IAC9BD,EAAOqB,UAKdW,UACJyB,EAAA,iBAAA/C,IAAA,uDACY,OAAM,aACL,OACXY,MAAOxC,KAAKqB,eAAekB,KAC3BA,KAAK,OAAM,aACA,OACXkD,kBAAoBpD,GAAOrC,KAAKoC,aAAaC,GAC7CqD,UAAW,CAAC,cAEdf,EAAA,iBAAA/C,IAAA,uDACY,UAAS,aACR,UACXY,MAAOxC,KAAKqB,eAAesE,QAC3BpD,KAAK,UAAS,aACH,OACXkD,kBAAoBpD,GAAOrC,KAAKoC,aAAaC,GAC7CqD,UAAW,CAAC,eAGhBf,EAAA,YAAA/C,IAAA,4CACE+C,EAAA,mBAAA/C,IAAA,4CACE+C,EAAA,aAAA/C,IAAA,4CACE+C,EAAA,aAAA/C,IAAA,2CAAWgE,IAAI,iBAAiBC,KAAK,oBAEvClB,EAAA,cAAA/C,IAAA,4DAAsBkE,QAAS,IAAM9F,KAAKiD,qBACxC0B,EAAA,YAAA/C,IAAA,2CAAUW,KAAK,yBAGnBoC,EAAA,qBAAA/C,IAAA,2CACEmE,SAAU,MACVC,iBAAmB3D,GAAOrC,KAAKyC,sBAAsBJ,IAEpDrC,KAAKwB,6BAA6BG,KAAI,CAACE,EAAMoE,IAC5CtB,EAAA,gBACG9C,EAAKsC,SACJQ,EAAA,cAAYQ,KAAK,SACfR,EAAA,OAAKuB,IAAKrE,EAAKsC,YAEfjB,UACJyB,EAAA,eAAaQ,KAAK,QAClBR,EAAA,iBACG9C,EAAKkB,MAAQ,EAAC,KAAIlB,EAAKU,MAE1BoC,EAAA,+BAEEwB,KAAK,QACLL,QAAS,IAAM9F,KAAKiD,kBAAkBgD,IAEtCtB,EAAA,YAAUpC,KAAK,0BAO3BvC,KAAKkC,UACHyC,EAAA,oBACEyB,WAAY,IAAMpG,KAAKqE,OACvBgC,aAAc,IAAMrG,KAAKyE,WAEzBvB,U","ignoreList":[]}