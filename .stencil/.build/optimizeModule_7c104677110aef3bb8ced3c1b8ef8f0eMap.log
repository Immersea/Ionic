{"version":3,"names":["appInfiniteScrollCss","AppInfiniteScrollStyle0","AppInfiniteScroll","reset","this","start","listLength","setItems","groupedItems","generateItems","componentWillLoad","ev","newItems","i","list","push","orderBy","groupBy","length","forEach","item","value","undefined","target","complete","listChanged","emit","showItem","h","class","button","detail","onClick","itemClicked","returnField","photoURL","slot","src","icon","name","showFields","map","field","index","showFieldsDivider","showNotes","options","option","color","executeOptionFc","tag","text","listElement","el","querySelector","closeSlidingItems","func","render","Host","key","loading","animated","style","width","id","Object","keys","onIonInfinite","appSearchToolbarCss","AppSearchToolbarStyle0","TITLE","AppSearchToolbar","searchString","Environment","getAppColor","forceFilter","filterList","setFocus","searchbar","componentOnReady","then","setTimeout","searchTitle","search","DatabaseService","getLocalDocument","componentDidLoad","toLower","filters","filterBy","filter","x","includes","uniq","filteredList","orderFields","handleSearch","toLowerCase","saveLocalDocument","debounce","placeholder","onIonInput","infiniteScrollCss","IonInfiniteScrollStyle0","InfiniteScroll","constructor","hostRef","thrPx","thrPc","didFire","isBusy","onScroll","scrollEl","canStart","infiniteHeight","offsetHeight","scrollTop","scrollHeight","height","threshold","distanceFromInfinite","position","isLoading","ionInfinite","disabled","thresholdChanged","val","lastIndexOf","parseFloat","disabledChanged","enableScrollEvents","connectedCallback","contentEl","findClosestIonContent","printIonContentErrorMsg","getScrollElement","writeTask","clientHeight","disconnectedCallback","prev","requestAnimationFrame","readTask","newScrollTop","shouldListen","addEventListener","removeEventListener","mode","getIonMode","infiniteScrollContentIosCss","IonInfiniteScrollContentIosStyle0","infiniteScrollContentMdCss","IonInfiniteScrollContentMdStyle0","InfiniteScrollContent","customHTMLEnabled","config","get","ENABLE_HTML_CONTENT_DEFAULT","loadingSpinner","loadingText","renderLoadingText","innerHTML","sanitizeDOMString","itemGroupIosCss","IonItemGroupIosStyle0","itemGroupMdCss","IonItemGroupMdStyle0","ItemGroup","role","itemOptionIosCss","IonItemOptionIosStyle0","itemOptionMdCss","IonItemOptionMdStyle0","ItemOption","closest","preventDefault","download","expandable","href","rel","type","TagType","attrs","createColorClasses","assign","part","itemOptionsIosCss","IonItemOptionsIosStyle0","itemOptionsMdCss","IonItemOptionsMdStyle0","ItemOptions","side","fireSwipeEvent","ionSwipe","isEnd","isEndSide","itemSlidingCss","IonItemSlidingStyle0","SWIPE_MARGIN","ELASTIC_FACTOR","openSlidingItem","ItemSliding","openAmount","initialOpenAmount","optsWidthRightSide","optsWidthLeftSide","sides","optsDirty","initialContentScrollY","state","gesture","enable","mutationObserver","watchForOptions","async","updateOptions","import","createGesture","gestureName","gesturePriority","onStart","onMove","onEnd","destroy","leftOptions","rightOptions","disconnect","getOpenAmount","Promise","resolve","getSlidingRatio","getSlidingRatioSync","open","_a","optionsToOpen","getOptions","isStartOpen","isEndOpen","closeOpened","calculateOptsWidth","setOpenAmount","close","querySelectorAll","rtl","document","dir","atEdge","window","innerWidth","startX","selected","disableContentScrollY","tmr","clearTimeout","transition","deltaX","Math","max","min","console","warn","optsWidth","resetContentScrollY","velocity","velocityX","restingPoint","isResetDirection","isMovingFast","abs","isOnCloseZone","swipeShouldReset","display","offsetWidth","isFinal","classList","add","remove","transform","ionDrag","amount","ratio","isOnResetZone"],"sources":["src/components/common/app/common/app-infinite-scroll/app-infinite-scroll.scss?tag=app-infinite-scroll","src/components/common/app/common/app-infinite-scroll/app-infinite-scroll.tsx","src/components/common/app/common/app-search-toolbar/app-search-toolbar.scss?tag=app-search-toolbar","src/components/common/app/common/app-search-toolbar/app-search-toolbar.tsx","node_modules/@ionic/core/dist/collection/components/infinite-scroll/infinite-scroll.css?tag=ion-infinite-scroll","node_modules/@ionic/core/dist/collection/components/infinite-scroll/infinite-scroll.js","node_modules/@ionic/core/dist/collection/components/infinite-scroll-content/infinite-scroll-content.ios.css?tag=ion-infinite-scroll-content&mode=ios","node_modules/@ionic/core/dist/collection/components/infinite-scroll-content/infinite-scroll-content.md.css?tag=ion-infinite-scroll-content&mode=md","node_modules/@ionic/core/dist/collection/components/infinite-scroll-content/infinite-scroll-content.js","node_modules/@ionic/core/dist/collection/components/item-group/item-group.ios.css?tag=ion-item-group&mode=ios","node_modules/@ionic/core/dist/collection/components/item-group/item-group.md.css?tag=ion-item-group&mode=md","node_modules/@ionic/core/dist/collection/components/item-group/item-group.js","node_modules/@ionic/core/dist/collection/components/item-option/item-option.ios.css?tag=ion-item-option&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/item-option/item-option.md.css?tag=ion-item-option&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/item-option/item-option.js","node_modules/@ionic/core/dist/collection/components/item-options/item-options.ios.css?tag=ion-item-options&mode=ios","node_modules/@ionic/core/dist/collection/components/item-options/item-options.md.css?tag=ion-item-options&mode=md","node_modules/@ionic/core/dist/collection/components/item-options/item-options.js","node_modules/@ionic/core/dist/collection/components/item-sliding/item-sliding.css?tag=ion-item-sliding","node_modules/@ionic/core/dist/collection/components/item-sliding/item-sliding.js"],"sourcesContent":["app-infinite-scroll {\n  .no-select {\n    -webkit-user-select: none; /* Safari */\n    -moz-user-select: none; /* Firefox */\n    -ms-user-select: none; /* IE10+/Edge */\n    user-select: none; /* Standard */\n  }\n}\n","import {Element} from \"@stencil/core\";\nimport {\n  Component,\n  h,\n  Prop,\n  Event,\n  EventEmitter,\n  Host,\n  State,\n  Watch,\n} from \"@stencil/core\";\nimport {orderBy} from \"lodash\";\n\n@Component({\n  tag: \"app-infinite-scroll\",\n  styleUrl: \"app-infinite-scroll.scss\",\n})\nexport class AppInfiniteScroll {\n  @Element() el: HTMLElement;\n  private listElement: HTMLIonListElement;\n  @Event() listChanged: EventEmitter<any>;\n  @Prop({mutable: true}) list: any[] = [];\n  @Prop({mutable: true}) loading: boolean = false;\n  @Prop() groupBy: string[] = [];\n  @Prop() orderBy: string[] = [];\n  @Prop() returnField: string;\n  @Prop() showFields: string[] = [];\n  @Prop() showFieldsDivider: string = \" \";\n  @Prop() showNotes: string[] = [];\n  @Prop() icon: string;\n  @Prop() options: {\n    tag: string;\n    text: string;\n    icon: string;\n    color: string;\n    func: any;\n  }[];\n  @State() setItems: any[];\n  @State() groupedItems;\n  @State() updateView = false;\n  start: number;\n  listLength: number;\n\n  @Watch(\"list\")\n  reset() {\n    this.start = 0;\n    this.listLength = 50;\n    this.setItems = [];\n    this.groupedItems = {};\n    this.generateItems();\n  }\n\n  @Event() itemClicked: EventEmitter<any>;\n\n  componentWillLoad() {\n    this.reset();\n  }\n\n  generateItems(ev?) {\n    const newItems = [];\n    for (let i = this.start; i < this.start + this.listLength; i++) {\n      if (this.list[i]) newItems.push(this.list[i]);\n    }\n    this.setItems = [...this.setItems, ...newItems];\n    this.setItems = this.orderBy\n      ? orderBy(this.setItems, this.orderBy)\n      : this.setItems;\n    this.start += this.listLength;\n    if (this.groupBy.length > 0) {\n      const groupedItems = [];\n      this.setItems.forEach((item) => {\n        const value = item[this.groupBy[0]];\n        !groupedItems[value] ? (groupedItems[value] = []) : undefined;\n        groupedItems[value].push(item);\n      });\n      this.groupedItems = groupedItems;\n    }\n    ev ? ev.target.complete() : null;\n    this.listChanged.emit();\n  }\n\n  showItem(item) {\n    return (\n      <ion-item-sliding class=\"no-select\">\n        <ion-item\n          button\n          detail\n          onClick={() =>\n            this.itemClicked.emit(\n              this.returnField ? item[this.returnField] : item\n            )\n          }\n        >\n          {item.photoURL ? (\n            <ion-avatar slot=\"start\">\n              <img src={item.photoURL} />\n            </ion-avatar>\n          ) : this.icon ? (\n            <ion-icon slot=\"start\" name={this.icon}></ion-icon>\n          ) : undefined}\n          <ion-label>\n            <h2>\n              {this.showFields.map((field, index) => {\n                return item[field]\n                  ? item[field] +\n                      (index < this.showFields.length - 1\n                        ? this.showFieldsDivider\n                        : \"\")\n                  : \"\";\n              })}\n            </h2>\n            {this.showNotes.length > 0 ? (\n              <p>\n                {this.showNotes.map((field, index) => {\n                  return item[field]\n                    ? item[field] +\n                        (index < this.showNotes.length - 1\n                          ? index < this.showNotes.length - 1\n                            ? this.showFieldsDivider\n                            : \"\"\n                          : \"\")\n                    : \"\";\n                })}\n              </p>\n            ) : undefined}\n          </ion-label>\n        </ion-item>\n        {this.options ? (\n          <ion-item-options>\n            {this.options.map((option) => (\n              <ion-item-option\n                color={option.color}\n                onClick={() => this.executeOptionFc(option, item)}\n              >\n                {option.icon ? (\n                  <ion-icon name={option.icon}></ion-icon>\n                ) : undefined}\n                <my-transl tag={option.tag} text={option.text}></my-transl>\n              </ion-item-option>\n            ))}\n          </ion-item-options>\n        ) : undefined}\n      </ion-item-sliding>\n    );\n  }\n\n  executeOptionFc(option, item) {\n    this.listElement = this.el.querySelector(\"#infinite-scroll-list\");\n    this.listElement.closeSlidingItems();\n    option.func(item[this.returnField]);\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.list.length == 0 ? (\n          <div>\n            {this.loading ? (\n              <ion-item>\n                <ion-thumbnail slot=\"start\">\n                  <ion-skeleton-text></ion-skeleton-text>\n                </ion-thumbnail>\n                <ion-label>\n                  <h2>\n                    <ion-skeleton-text\n                      animated\n                      style={{width: \"80%\"}}\n                    ></ion-skeleton-text>\n                  </h2>\n                  <p>\n                    <ion-skeleton-text\n                      animated\n                      style={{width: \"60%\"}}\n                    ></ion-skeleton-text>\n                  </p>\n                </ion-label>\n              </ion-item>\n            ) : (\n              <ion-item>\n                <ion-label>\n                  <h2>No data available</h2>\n                </ion-label>\n              </ion-item>\n            )}\n          </div>\n        ) : (\n          [\n            <ion-list id=\"infinite-scroll-list\">\n              {this.groupBy.length > 0\n                ? Object.keys(this.groupedItems).map((key) => (\n                    <ion-item-group>\n                      <ion-item-divider>\n                        <ion-label>{key}</ion-label>\n                      </ion-item-divider>\n                      {this.groupedItems[key].map((item) =>\n                        this.showItem(item)\n                      )}\n                    </ion-item-group>\n                  ))\n                : this.setItems.map((item) => this.showItem(item))}\n            </ion-list>,\n            <ion-infinite-scroll\n              onIonInfinite={(ev) => {\n                this.generateItems(ev);\n              }}\n            >\n              <ion-infinite-scroll-content></ion-infinite-scroll-content>\n            </ion-infinite-scroll>,\n          ]\n        )}\n      </Host>\n    );\n  }\n}\n","app-search-toolbar {\n}\n","import {\n  Component,\n  h,\n  Prop,\n  Event,\n  Element,\n  EventEmitter,\n  Host,\n  Method,\n} from \"@stencil/core\";\nimport {Environment} from \"../../../../../global/env\";\nimport {DatabaseService} from \"../../../../../services/common/database\";\nimport {includes, orderBy, toLower, uniq} from \"lodash\";\n\nconst TITLE = \"app-search-toolbar-\";\n\n@Component({\n  tag: \"app-search-toolbar\",\n  styleUrl: \"app-search-toolbar.scss\",\n})\nexport class AppSearchToolbar {\n  @Element() el: HTMLElement;\n  @Prop({mutable: true}) list: any[] = [];\n  @Prop() searchTitle: string;\n  @Prop() orderFields: string[] = [];\n  @Prop() color: string = Environment.getAppColor();\n  @Prop() placeholder: string = \"Search\";\n  @Prop() filterBy: string[];\n  searchString: string = null;\n\n  @Event() filteredList: EventEmitter<any>;\n\n  @Method()\n  //used to force reset a value in case of changes of the \"value\" on the main DOM\n  async forceFilter(list) {\n    this.list = list;\n    this.filterList();\n  }\n\n  async setFocus() {\n    const searchbar = this.el.querySelector(\"ion-searchbar\");\n    if (searchbar) {\n      searchbar.componentOnReady().then(() => {\n        setTimeout(() => {\n          searchbar.setFocus();\n        }, 500);\n      });\n    }\n  }\n\n  async componentWillLoad() {\n    if (this.searchTitle) {\n      const search = await DatabaseService.getLocalDocument(\n        TITLE + this.searchTitle\n      );\n      if (search) {\n        this.searchString = search;\n        this.filterList();\n      }\n    } else {\n      this.filterList();\n    }\n  }\n\n  componentDidLoad() {\n    this.setFocus();\n  }\n\n  filterList() {\n    let filterList = [];\n    if (this.searchString) {\n      const search = toLower(this.searchString);\n      let filters = [];\n      this.filterBy.forEach((key) => {\n        filters = [\n          ...filters,\n          ...this.list.filter((x) => includes(toLower(x[key]), search)),\n        ];\n      });\n      //remove duplicates\n      filterList = uniq(filters);\n    } else {\n      filterList = this.list;\n    }\n    this.filteredList.emit(orderBy(filterList, this.orderFields));\n  }\n\n  handleSearch(ev) {\n    this.searchString = \"\";\n    const target = ev.target as HTMLIonSearchbarElement;\n    if (target) {\n      this.searchString = target.value!.toLowerCase();\n      if (this.searchTitle) {\n        DatabaseService.saveLocalDocument(\n          TITLE + this.searchTitle,\n          this.searchString\n        );\n      }\n    }\n    this.filterList();\n  }\n\n  render() {\n    return (\n      <Host>\n        <ion-toolbar color={this.color}>\n          <ion-searchbar\n            animated={true}\n            show-cancel-button=\"focus\"\n            debounce={250}\n            value={this.searchString}\n            placeholder={this.placeholder}\n            onIonInput={(ev) => this.handleSearch(ev)}\n          ></ion-searchbar>\n        </ion-toolbar>\n      </Host>\n    );\n  }\n}\n","ion-infinite-scroll {\n  display: none;\n  width: 100%;\n}\n\n.infinite-scroll-enabled {\n  display: block;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h, readTask, writeTask } from \"@stencil/core\";\nimport { findClosestIonContent, getScrollElement, printIonContentErrorMsg } from \"../../utils/content/index\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class InfiniteScroll {\n    constructor() {\n        this.thrPx = 0;\n        this.thrPc = 0;\n        /**\n         * didFire exists so that ionInfinite\n         * does not fire multiple times if\n         * users continue to scroll after\n         * scrolling into the infinite\n         * scroll threshold.\n         */\n        this.didFire = false;\n        this.isBusy = false;\n        this.onScroll = () => {\n            const scrollEl = this.scrollEl;\n            if (!scrollEl || !this.canStart()) {\n                return 1;\n            }\n            const infiniteHeight = this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            const scrollTop = scrollEl.scrollTop;\n            const scrollHeight = scrollEl.scrollHeight;\n            const height = scrollEl.offsetHeight;\n            const threshold = this.thrPc !== 0 ? height * this.thrPc : this.thrPx;\n            const distanceFromInfinite = this.position === 'bottom'\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!this.didFire) {\n                    this.isLoading = true;\n                    this.didFire = true;\n                    this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            return 4;\n        };\n        this.isLoading = false;\n        this.threshold = '15%';\n        this.disabled = false;\n        this.position = 'bottom';\n    }\n    thresholdChanged() {\n        const val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = parseFloat(val) / 100;\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    }\n    disabledChanged() {\n        const disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    }\n    async connectedCallback() {\n        const contentEl = findClosestIonContent(this.el);\n        if (!contentEl) {\n            printIonContentErrorMsg(this.el);\n            return;\n        }\n        this.scrollEl = await getScrollElement(contentEl);\n        this.thresholdChanged();\n        this.disabledChanged();\n        if (this.position === 'top') {\n            writeTask(() => {\n                if (this.scrollEl) {\n                    this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n                }\n            });\n        }\n    }\n    disconnectedCallback() {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    }\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    async complete() {\n        const scrollEl = this.scrollEl;\n        if (!this.isLoading || !scrollEl) {\n            return;\n        }\n        this.isLoading = false;\n        if (this.position === 'top') {\n            /**\n             * New content is being added at the top, but the scrollTop position stays the same,\n             * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n             * (Frame 1)\n             *    - complete() is called, but the UI hasn't had time to update yet.\n             *    - Save the current content dimensions.\n             *    - Wait for the next frame using _dom.read, so the UI will be updated.\n             * (Frame 2)\n             *    - Read the new content dimensions.\n             *    - Calculate the height difference and the new scroll position.\n             *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n             * (Still frame 2, if I'm correct)\n             *    - Change the scroll position (= visually maintain the scroll position).\n             *    - Change the state to re-enable the InfiniteScroll.\n             *    - This should be after changing the scroll position, or it could\n             *    cause the InfiniteScroll to be triggered again immediately.\n             * (Frame 3)\n             *    Done.\n             */\n            this.isBusy = true;\n            // ******** DOM READ ****************\n            // Save the current content dimensions before the UI updates\n            const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n            // ******** DOM READ ****************\n            requestAnimationFrame(() => {\n                readTask(() => {\n                    // UI has updated, save the new content dimensions\n                    const scrollHeight = scrollEl.scrollHeight;\n                    // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                    const newScrollTop = scrollHeight - prev;\n                    // ******** DOM WRITE ****************\n                    requestAnimationFrame(() => {\n                        writeTask(() => {\n                            scrollEl.scrollTop = newScrollTop;\n                            this.isBusy = false;\n                            this.didFire = false;\n                        });\n                    });\n                });\n            });\n        }\n        else {\n            this.didFire = false;\n        }\n    }\n    canStart() {\n        return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        const disabled = this.disabled;\n        return (h(Host, { key: '1444429a86950c449953cbf578436cc8cabf40ec', class: {\n                [mode]: true,\n                'infinite-scroll-loading': this.isLoading,\n                'infinite-scroll-enabled': !disabled,\n            } }));\n    }\n    static get is() { return \"ion-infinite-scroll\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"infinite-scroll.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"infinite-scroll.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"threshold\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The threshold distance from the bottom\\nof the content to call the `infinite` output event when scrolled.\\nThe threshold value can be either a percent, or\\nin pixels. For example, use the value of `10%` for the `infinite`\\noutput event to get called when the user has scrolled 10%\\nfrom the bottom of the page. Use the value `100px` when the\\nscroll is within 100 pixels from the bottom of the page.\"\n                },\n                \"attribute\": \"threshold\",\n                \"reflect\": false,\n                \"defaultValue\": \"'15%'\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the infinite scroll will be hidden and scroll event listeners\\nwill be removed.\\n\\nSet this to true to disable the infinite scroll from actively\\ntrying to receive new data while scrolling. This is useful\\nwhen it is known that there is no more data that can be added, and\\nthe infinite scroll is no longer needed.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"position\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'top' | 'bottom'\",\n                    \"resolved\": \"\\\"bottom\\\" | \\\"top\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The position of the infinite scroll element.\\nThe value can be either `top` or `bottom`.\"\n                },\n                \"attribute\": \"position\",\n                \"reflect\": false,\n                \"defaultValue\": \"'bottom'\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"isLoading\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionInfinite\",\n                \"name\": \"ionInfinite\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the scroll reaches\\nthe threshold distance. From within your infinite handler,\\nyou must call the infinite scroll's `complete()` method when\\nyour async operation has completed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"complete\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Call `complete()` within the `ionInfinite` output event handler when\\nyour async operation has completed. For example, the `loading`\\nstate is while the app is performing an asynchronous operation,\\nsuch as receiving more data from an AJAX request to add more items\\nto a data list. Once the data has been received and UI updated, you\\nthen call this method to signify that the loading has completed.\\nThis method will change the infinite scroll's state from `loading`\\nto `enabled`.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"threshold\",\n                \"methodName\": \"thresholdChanged\"\n            }, {\n                \"propName\": \"disabled\",\n                \"methodName\": \"disabledChanged\"\n            }];\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-infinite-scroll-content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-height: 84px;\n  text-align: center;\n  user-select: none;\n}\n\n.infinite-loading {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 32px;\n  display: none;\n  width: 100%;\n}\n\n.infinite-loading-text {\n  -webkit-margin-start: 32px;\n  margin-inline-start: 32px;\n  -webkit-margin-end: 32px;\n  margin-inline-end: 32px;\n  margin-top: 4px;\n  margin-bottom: 0;\n}\n\n.infinite-scroll-loading ion-infinite-scroll-content > .infinite-loading {\n  display: block;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n.infinite-scroll-content-ios .infinite-loading-text {\n  color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n}\n\n.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,\n.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,\n.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle {\n  stroke: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n}\n\n.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,\n.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,\n.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle {\n  fill: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-infinite-scroll-content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-height: 84px;\n  text-align: center;\n  user-select: none;\n}\n\n.infinite-loading {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 32px;\n  display: none;\n  width: 100%;\n}\n\n.infinite-loading-text {\n  -webkit-margin-start: 32px;\n  margin-inline-start: 32px;\n  -webkit-margin-end: 32px;\n  margin-inline-end: 32px;\n  margin-top: 4px;\n  margin-bottom: 0;\n}\n\n.infinite-scroll-loading ion-infinite-scroll-content > .infinite-loading {\n  display: block;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n.infinite-scroll-content-md .infinite-loading-text {\n  color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n}\n\n.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,\n.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,\n.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle {\n  stroke: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n}\n\n.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,\n.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,\n.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle {\n  fill: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { ENABLE_HTML_CONTENT_DEFAULT } from \"../../utils/config\";\nimport { sanitizeDOMString } from \"../../utils/sanitization/index\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class InfiniteScrollContent {\n    constructor() {\n        this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n        this.loadingSpinner = undefined;\n        this.loadingText = undefined;\n    }\n    componentDidLoad() {\n        if (this.loadingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    renderLoadingText() {\n        const { customHTMLEnabled, loadingText } = this;\n        if (customHTMLEnabled) {\n            return h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(loadingText) });\n        }\n        return h(\"div\", { class: \"infinite-loading-text\" }, this.loadingText);\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '060278bf9cb0321e182352f9613be4ebbb028259', class: {\n                [mode]: true,\n                // Used internally for styling\n                [`infinite-scroll-content-${mode}`]: true,\n            } }, h(\"div\", { key: '07d3cada920145f979ad315bd187fb878e0c3da3', class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { key: '6254f175d7543d09f3dd47cd0589a2809182cd8c', class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { key: 'a6a816d1c65b60b786333b209b63492aa716a283', name: this.loadingSpinner }))), this.loadingText !== undefined && this.renderLoadingText())));\n    }\n    static get is() { return \"ion-infinite-scroll-content\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"infinite-scroll-content.ios.scss\"],\n            \"md\": [\"infinite-scroll-content.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"infinite-scroll-content.ios.css\"],\n            \"md\": [\"infinite-scroll-content.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"loadingSpinner\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"SpinnerTypes | null\",\n                    \"resolved\": \"\\\"bubbles\\\" | \\\"circles\\\" | \\\"circular\\\" | \\\"crescent\\\" | \\\"dots\\\" | \\\"lines\\\" | \\\"lines-sharp\\\" | \\\"lines-sharp-small\\\" | \\\"lines-small\\\" | null | undefined\",\n                    \"references\": {\n                        \"SpinnerTypes\": {\n                            \"location\": \"import\",\n                            \"path\": \"../spinner/spinner-configs\",\n                            \"id\": \"src/components/spinner/spinner-configs.ts::SpinnerTypes\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"An animated SVG spinner that shows while loading.\"\n                },\n                \"attribute\": \"loading-spinner\",\n                \"reflect\": false\n            },\n            \"loadingText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | IonicSafeString\",\n                    \"resolved\": \"IonicSafeString | string | undefined\",\n                    \"references\": {\n                        \"IonicSafeString\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/sanitization\",\n                            \"id\": \"src/utils/sanitization/index.ts::IonicSafeString\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Optional text to display while loading.\\n`loadingText` can accept either plaintext or HTML as a string.\\nTo display characters normally reserved for HTML, they\\nmust be escaped. For example `<Ionic>` would become\\n`&lt;Ionic&gt;`\\n\\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\\n\\nThis property accepts custom HTML as a string.\\nContent is parsed as plaintext by default.\\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\\nbefore custom HTML can be used.\"\n                },\n                \"attribute\": \"loading-text\",\n                \"reflect\": false\n            }\n        };\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-item-group {\n  display: block;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-item-group {\n  display: block;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class ItemGroup {\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '24ff047b7c45f963f0dad072c65d38a230c2bc97', role: \"group\", class: {\n                [mode]: true,\n                // Used internally for styling\n                [`item-group-${mode}`]: true,\n                item: true,\n            } }));\n    }\n    static get is() { return \"ion-item-group\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"item-group.ios.scss\"],\n            \"md\": [\"item-group.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"item-group.ios.css\"],\n            \"md\": [\"item-group.md.css\"]\n        };\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the item option\n   * @prop --color: Color of the item option\n   */\n  --background: var(--ion-color-primary, #0054e9);\n  --color: var(--ion-color-primary-contrast, #fff);\n  background: var(--background);\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n}\n\n:host(.ion-color) {\n  background: var(--ion-color-base);\n  color: var(--ion-color-contrast);\n}\n\n.button-native {\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  -webkit-padding-start: 0.7em;\n  padding-inline-start: 0.7em;\n  -webkit-padding-end: 0.7em;\n  padding-inline-end: 0.7em;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: inline-block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  cursor: pointer;\n  appearance: none;\n  box-sizing: border-box;\n}\n\n.button-inner {\n  display: flex;\n  flex-flow: column nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n\n.horizontal-wrapper {\n  display: flex;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n}\n\n::slotted(*) {\n  flex-shrink: 0;\n}\n\n::slotted([slot=start]) {\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 5px;\n  margin-inline-end: 5px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n::slotted([slot=end]) {\n  -webkit-margin-start: 5px;\n  margin-inline-start: 5px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n::slotted([slot=icon-only]) {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  -webkit-margin-start: 10px;\n  margin-inline-start: 10px;\n  -webkit-margin-end: 10px;\n  margin-inline-end: 10px;\n  margin-top: 0;\n  margin-bottom: 0;\n  min-width: 0.9em;\n  font-size: 1.8em;\n}\n\n:host(.item-option-expandable) {\n  flex-shrink: 0;\n  transition-duration: 0;\n  transition-property: none;\n  transition-timing-function: cubic-bezier(0.65, 0.05, 0.36, 1);\n}\n\n:host(.item-option-disabled) {\n  pointer-events: none;\n}\n\n:host(.item-option-disabled) .button-native {\n  cursor: default;\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  font-size: clamp(16px, 1rem, 35.2px);\n}\n\n:host(.ion-activated) {\n  background: var(--ion-color-primary-shade, #004acd);\n}\n\n:host(.ion-color.ion-activated) {\n  background: var(--ion-color-shade);\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the item option\n   * @prop --color: Color of the item option\n   */\n  --background: var(--ion-color-primary, #0054e9);\n  --color: var(--ion-color-primary-contrast, #fff);\n  background: var(--background);\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n}\n\n:host(.ion-color) {\n  background: var(--ion-color-base);\n  color: var(--ion-color-contrast);\n}\n\n.button-native {\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  -webkit-padding-start: 0.7em;\n  padding-inline-start: 0.7em;\n  -webkit-padding-end: 0.7em;\n  padding-inline-end: 0.7em;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: inline-block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  cursor: pointer;\n  appearance: none;\n  box-sizing: border-box;\n}\n\n.button-inner {\n  display: flex;\n  flex-flow: column nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n\n.horizontal-wrapper {\n  display: flex;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n}\n\n::slotted(*) {\n  flex-shrink: 0;\n}\n\n::slotted([slot=start]) {\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 5px;\n  margin-inline-end: 5px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n::slotted([slot=end]) {\n  -webkit-margin-start: 5px;\n  margin-inline-start: 5px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n::slotted([slot=icon-only]) {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  -webkit-margin-start: 10px;\n  margin-inline-start: 10px;\n  -webkit-margin-end: 10px;\n  margin-inline-end: 10px;\n  margin-top: 0;\n  margin-bottom: 0;\n  min-width: 0.9em;\n  font-size: 1.8em;\n}\n\n:host(.item-option-expandable) {\n  flex-shrink: 0;\n  transition-duration: 0;\n  transition-property: none;\n  transition-timing-function: cubic-bezier(0.65, 0.05, 0.36, 1);\n}\n\n:host(.item-option-disabled) {\n  pointer-events: none;\n}\n\n:host(.item-option-disabled) .button-native {\n  cursor: default;\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  font-size: 0.875rem;\n  font-weight: 500;\n  text-transform: uppercase;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { createColorClasses } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot - Content is placed between the named slots if provided without a slot.\n * @slot start - Content is placed to the left of the option text in LTR, and to the right in RTL.\n * @slot top - Content is placed above the option text.\n * @slot icon-only - Should be used on an icon in an option that has no text.\n * @slot bottom - Content is placed below the option text.\n * @slot end - Content is placed to the right of the option text in LTR, and to the left in RTL.\n *\n * @part native - The native HTML button or anchor element that wraps all child elements.\n */\nexport class ItemOption {\n    constructor() {\n        this.onClick = (ev) => {\n            const el = ev.target.closest('ion-item-option');\n            if (el) {\n                ev.preventDefault();\n            }\n        };\n        this.color = undefined;\n        this.disabled = false;\n        this.download = undefined;\n        this.expandable = false;\n        this.href = undefined;\n        this.rel = undefined;\n        this.target = undefined;\n        this.type = 'button';\n    }\n    render() {\n        const { disabled, expandable, href } = this;\n        const TagType = href === undefined ? 'button' : 'a';\n        const mode = getIonMode(this);\n        const attrs = TagType === 'button'\n            ? { type: this.type }\n            : {\n                download: this.download,\n                href: this.href,\n                target: this.target,\n            };\n        return (h(Host, { key: '1900e015f593fefd710478a2088e052399c957eb', onClick: this.onClick, class: createColorClasses(this.color, {\n                [mode]: true,\n                'item-option-disabled': disabled,\n                'item-option-expandable': expandable,\n                'ion-activatable': true,\n            }) }, h(TagType, Object.assign({ key: '5db2bb9bc72b7b00c324e4189cd1b5f862680ebb' }, attrs, { class: \"button-native\", part: \"native\", disabled: disabled }), h(\"span\", { key: '6927e812ad001c5e7bd17f440d82c3830c58957b', class: \"button-inner\" }, h(\"slot\", { key: '0fde4333def94c55d1318868c2bc71e780d5876a', name: \"top\" }), h(\"div\", { key: '7ecc9ae8ddf66d7ed5d9f30becc9faf820e1c62e', class: \"horizontal-wrapper\" }, h(\"slot\", { key: 'a15567fd4bd91080e9fbb6bb0c9b0e67d8a67051', name: \"start\" }), h(\"slot\", { key: '7f86cdd28063e23f9d78997623333c5037c4f364', name: \"icon-only\" }), h(\"slot\", { key: '4abb69ce3ad6c4917dd87b7b1eb0fa1c69917d73' }), h(\"slot\", { key: '8b35a29f48722040465f182679ac17209937578d', name: \"end\" })), h(\"slot\", { key: 'fa15a00891b41d66a4ccb51575dec54b72d0059e', name: \"bottom\" })), mode === 'md' && h(\"ion-ripple-effect\", { key: '0c071910c90fafca8026f59d78f4d9d5224d150a' }))));\n    }\n    static get is() { return \"ion-item-option\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"item-option.ios.scss\"],\n            \"md\": [\"item-option.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"item-option.ios.css\"],\n            \"md\": [\"item-option.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the item option.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"download\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"This attribute instructs browsers to download a URL instead of navigating to\\nit, so the user will be prompted to save it as a local file. If the attribute\\nhas a value, it is used as the pre-filled file name in the Save prompt\\n(the user can still change the file name if they want).\"\n                },\n                \"attribute\": \"download\",\n                \"reflect\": false\n            },\n            \"expandable\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the option will expand to take up the available width and cover any other options.\"\n                },\n                \"attribute\": \"expandable\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"href\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Contains a URL or a URL fragment that the hyperlink points to.\\nIf this property is set, an anchor tag will be rendered.\"\n                },\n                \"attribute\": \"href\",\n                \"reflect\": false\n            },\n            \"rel\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the relationship of the target object to the link object.\\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).\"\n                },\n                \"attribute\": \"rel\",\n                \"reflect\": false\n            },\n            \"target\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies where to display the linked URL.\\nOnly applies when an `href` is provided.\\nSpecial keywords: `\\\"_blank\\\"`, `\\\"_self\\\"`, `\\\"_parent\\\"`, `\\\"_top\\\"`.\"\n                },\n                \"attribute\": \"target\",\n                \"reflect\": false\n            },\n            \"type\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'submit' | 'reset' | 'button'\",\n                    \"resolved\": \"\\\"button\\\" | \\\"reset\\\" | \\\"submit\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The type of the button.\"\n                },\n                \"attribute\": \"type\",\n                \"reflect\": false,\n                \"defaultValue\": \"'button'\"\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-item-options {\n  /* stylelint-disable property-disallowed-list */\n  top: 0;\n  right: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-end;\n  display: none;\n  position: absolute;\n  height: 100%;\n  user-select: none;\n  z-index: 1;\n}\n:host-context([dir=rtl]) ion-item-options {\n  justify-content: flex-start;\n}\n:host-context([dir=rtl]) ion-item-options:not(.item-options-end) {\n  /* stylelint-disable property-disallowed-list */\n  right: auto;\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-end;\n}\n\n[dir=rtl] ion-item-options {\n  justify-content: flex-start;\n}\n[dir=rtl] ion-item-options:not(.item-options-end) {\n  /* stylelint-disable property-disallowed-list */\n  right: auto;\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-end;\n}\n\n@supports selector(:dir(rtl)) {\n  ion-item-options:dir(rtl) {\n    justify-content: flex-start;\n  }\n  ion-item-options:dir(rtl):not(.item-options-end) {\n    /* stylelint-disable property-disallowed-list */\n    right: auto;\n    left: 0;\n    /* stylelint-enable property-disallowed-list */\n    justify-content: flex-end;\n  }\n}\n\n.item-options-start {\n  /* stylelint-disable property-disallowed-list */\n  right: auto;\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-start;\n}\n:host-context([dir=rtl]) .item-options-start {\n  justify-content: flex-end;\n}\n\n[dir=rtl] .item-options-start {\n  justify-content: flex-end;\n}\n\n@supports selector(:dir(rtl)) {\n  .item-options-start:dir(rtl) {\n    justify-content: flex-end;\n  }\n}\n\n/* stylelint-disable property-disallowed-list */\n[dir=ltr] .item-options-start ion-item-option:first-child,\n[dir=rtl] .item-options-start ion-item-option:last-child {\n  padding-left: var(--ion-safe-area-left);\n}\n\n[dir=ltr] .item-options-end ion-item-option:last-child,\n[dir=rtl] .item-options-end ion-item-option:first-child {\n  padding-right: var(--ion-safe-area-right);\n}\n\n/* stylelint-enable property-disallowed-list */\n:host-context([dir=rtl]) .item-sliding-active-slide.item-sliding-active-options-start ion-item-options:not(.item-options-end) {\n  width: 100%;\n  visibility: visible;\n}\n\n[dir=rtl] .item-sliding-active-slide.item-sliding-active-options-start ion-item-options:not(.item-options-end) {\n  width: 100%;\n  visibility: visible;\n}\n\n@supports selector(:dir(rtl)) {\n  .item-sliding-active-slide:dir(rtl).item-sliding-active-options-start ion-item-options:not(.item-options-end) {\n    width: 100%;\n    visibility: visible;\n  }\n}\n.item-sliding-active-slide ion-item-options {\n  display: flex;\n  visibility: hidden;\n}\n.item-sliding-active-slide.item-sliding-active-options-start .item-options-start, .item-sliding-active-slide.item-sliding-active-options-end ion-item-options:not(.item-options-start) {\n  width: 100%;\n  visibility: visible;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n.item-options-ios {\n  border-bottom-width: 0;\n  border-bottom-style: solid;\n  border-bottom-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));\n}\n.item-options-ios.item-options-end {\n  border-bottom-width: 0.55px;\n}\n\n.list-ios-lines-none .item-options-ios {\n  border-bottom-width: 0;\n}\n\n.list-ios-lines-full .item-options-ios,\n.list-ios-lines-inset .item-options-ios.item-options-end {\n  border-bottom-width: 0.55px;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-item-options {\n  /* stylelint-disable property-disallowed-list */\n  top: 0;\n  right: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-end;\n  display: none;\n  position: absolute;\n  height: 100%;\n  user-select: none;\n  z-index: 1;\n}\n:host-context([dir=rtl]) ion-item-options {\n  justify-content: flex-start;\n}\n:host-context([dir=rtl]) ion-item-options:not(.item-options-end) {\n  /* stylelint-disable property-disallowed-list */\n  right: auto;\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-end;\n}\n\n[dir=rtl] ion-item-options {\n  justify-content: flex-start;\n}\n[dir=rtl] ion-item-options:not(.item-options-end) {\n  /* stylelint-disable property-disallowed-list */\n  right: auto;\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-end;\n}\n\n@supports selector(:dir(rtl)) {\n  ion-item-options:dir(rtl) {\n    justify-content: flex-start;\n  }\n  ion-item-options:dir(rtl):not(.item-options-end) {\n    /* stylelint-disable property-disallowed-list */\n    right: auto;\n    left: 0;\n    /* stylelint-enable property-disallowed-list */\n    justify-content: flex-end;\n  }\n}\n\n.item-options-start {\n  /* stylelint-disable property-disallowed-list */\n  right: auto;\n  left: 0;\n  /* stylelint-enable property-disallowed-list */\n  justify-content: flex-start;\n}\n:host-context([dir=rtl]) .item-options-start {\n  justify-content: flex-end;\n}\n\n[dir=rtl] .item-options-start {\n  justify-content: flex-end;\n}\n\n@supports selector(:dir(rtl)) {\n  .item-options-start:dir(rtl) {\n    justify-content: flex-end;\n  }\n}\n\n/* stylelint-disable property-disallowed-list */\n[dir=ltr] .item-options-start ion-item-option:first-child,\n[dir=rtl] .item-options-start ion-item-option:last-child {\n  padding-left: var(--ion-safe-area-left);\n}\n\n[dir=ltr] .item-options-end ion-item-option:last-child,\n[dir=rtl] .item-options-end ion-item-option:first-child {\n  padding-right: var(--ion-safe-area-right);\n}\n\n/* stylelint-enable property-disallowed-list */\n:host-context([dir=rtl]) .item-sliding-active-slide.item-sliding-active-options-start ion-item-options:not(.item-options-end) {\n  width: 100%;\n  visibility: visible;\n}\n\n[dir=rtl] .item-sliding-active-slide.item-sliding-active-options-start ion-item-options:not(.item-options-end) {\n  width: 100%;\n  visibility: visible;\n}\n\n@supports selector(:dir(rtl)) {\n  .item-sliding-active-slide:dir(rtl).item-sliding-active-options-start ion-item-options:not(.item-options-end) {\n    width: 100%;\n    visibility: visible;\n  }\n}\n.item-sliding-active-slide ion-item-options {\n  display: flex;\n  visibility: hidden;\n}\n.item-sliding-active-slide.item-sliding-active-options-start .item-options-start, .item-sliding-active-slide.item-sliding-active-options-end ion-item-options:not(.item-options-start) {\n  width: 100%;\n  visibility: visible;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n.item-options-md {\n  border-bottom-width: 0;\n  border-bottom-style: solid;\n  border-bottom-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));\n}\n\n.list-md-lines-none .item-options-md {\n  border-bottom-width: 0;\n}\n\n.list-md-lines-full .item-options-md,\n.list-md-lines-inset .item-options-md.item-options-end {\n  border-bottom-width: 1px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { isEndSide } from \"../../utils/helpers\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class ItemOptions {\n    constructor() {\n        this.side = 'end';\n    }\n    /** @internal */\n    async fireSwipeEvent() {\n        this.ionSwipe.emit({\n            side: this.side,\n        });\n    }\n    render() {\n        const mode = getIonMode(this);\n        const isEnd = isEndSide(this.side);\n        return (h(Host, { key: 'e28cd6a236323b5cc203c9b96782aa81024da924', class: {\n                [mode]: true,\n                // Used internally for styling\n                [`item-options-${mode}`]: true,\n                /**\n                 * Note: The \"start\" and \"end\" terms refer to the\n                 * direction ion-item-option instances within ion-item-options flow.\n                 * They do not refer to how ion-item-options flows within ion-item-sliding.\n                 * As a result, \"item-options-start\" means the ion-item-options container\n                 * always appears on the left, and \"item-options-end\" means the ion-item-options\n                 * container always appears on the right.\n                 */\n                'item-options-start': !isEnd,\n                'item-options-end': isEnd,\n            } }));\n    }\n    static get is() { return \"ion-item-options\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"item-options.ios.scss\"],\n            \"md\": [\"item-options.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"item-options.ios.css\"],\n            \"md\": [\"item-options.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"side\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Side\",\n                    \"resolved\": \"\\\"end\\\" | \\\"start\\\"\",\n                    \"references\": {\n                        \"Side\": {\n                            \"location\": \"import\",\n                            \"path\": \"../menu/menu-interface\",\n                            \"id\": \"src/components/menu/menu-interface.ts::Side\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The side the option button should be on. Possible values: `\\\"start\\\"` and `\\\"end\\\"`. If you have multiple `ion-item-options`, a side must be provided for each.\"\n                },\n                \"attribute\": \"side\",\n                \"reflect\": false,\n                \"defaultValue\": \"'end'\"\n            }\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionSwipe\",\n                \"name\": \"ionSwipe\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the item has been fully swiped.\"\n                },\n                \"complexType\": {\n                    \"original\": \"any\",\n                    \"resolved\": \"any\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"fireSwipeEvent\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"\",\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }]\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-item-sliding {\n  display: block;\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  user-select: none;\n}\n\nion-item-sliding .item {\n  user-select: none;\n}\n\n.item-sliding-active-slide .item {\n  position: relative;\n  transition: transform 500ms cubic-bezier(0.36, 0.66, 0.04, 1);\n  opacity: 1;\n  z-index: 2;\n  pointer-events: none;\n  will-change: transform;\n}\n\n.item-sliding-closing ion-item-options {\n  pointer-events: none;\n}\n\n.item-sliding-active-swipe-end .item-options-end .item-option-expandable {\n  /* stylelint-disable-next-line property-disallowed-list */\n  padding-left: 100%;\n  order: 1;\n  transition-duration: 0.6s;\n  transition-property: padding-left;\n}\n:host-context([dir=rtl]) .item-sliding-active-swipe-end .item-options-end .item-option-expandable {\n  order: -1;\n}\n\n[dir=rtl] .item-sliding-active-swipe-end .item-options-end .item-option-expandable {\n  order: -1;\n}\n\n@supports selector(:dir(rtl)) {\n  .item-sliding-active-swipe-end .item-options-end .item-option-expandable:dir(rtl) {\n    order: -1;\n  }\n}\n\n.item-sliding-active-swipe-start .item-options-start .item-option-expandable {\n  /* stylelint-disable-next-line property-disallowed-list */\n  padding-right: 100%;\n  order: -1;\n  transition-duration: 0.6s;\n  transition-property: padding-right;\n}\n:host-context([dir=rtl]) .item-sliding-active-swipe-start .item-options-start .item-option-expandable {\n  order: 1;\n}\n\n[dir=rtl] .item-sliding-active-swipe-start .item-options-start .item-option-expandable {\n  order: 1;\n}\n\n@supports selector(:dir(rtl)) {\n  .item-sliding-active-swipe-start .item-options-start .item-option-expandable:dir(rtl) {\n    order: 1;\n  }\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { findClosestIonContent, disableContentScrollY, resetContentScrollY } from \"../../utils/content/index\";\nimport { isEndSide } from \"../../utils/helpers\";\nimport { watchForOptions } from \"../../utils/watch-options\";\nimport { getIonMode } from \"../../global/ionic-global\";\nconst SWIPE_MARGIN = 30;\nconst ELASTIC_FACTOR = 0.55;\nlet openSlidingItem;\nexport class ItemSliding {\n    constructor() {\n        this.item = null;\n        this.openAmount = 0;\n        this.initialOpenAmount = 0;\n        this.optsWidthRightSide = 0;\n        this.optsWidthLeftSide = 0;\n        this.sides = 0 /* ItemSide.None */;\n        this.optsDirty = true;\n        this.contentEl = null;\n        this.initialContentScrollY = true;\n        this.state = 2 /* SlidingState.Disabled */;\n        this.disabled = false;\n    }\n    disabledChanged() {\n        if (this.gesture) {\n            this.gesture.enable(!this.disabled);\n        }\n    }\n    async connectedCallback() {\n        const { el } = this;\n        this.item = el.querySelector('ion-item');\n        this.contentEl = findClosestIonContent(el);\n        /**\n         * The MutationObserver needs to be added before we\n         * call updateOptions below otherwise we may miss\n         * ion-item-option elements that are added to the DOM\n         * while updateOptions is running and before the MutationObserver\n         * has been initialized.\n         */\n        this.mutationObserver = watchForOptions(el, 'ion-item-option', async () => {\n            await this.updateOptions();\n        });\n        await this.updateOptions();\n        this.gesture = (await import('../../utils/gesture')).createGesture({\n            el,\n            gestureName: 'item-swipe',\n            gesturePriority: 100,\n            threshold: 5,\n            canStart: (ev) => this.canStart(ev),\n            onStart: () => this.onStart(),\n            onMove: (ev) => this.onMove(ev),\n            onEnd: (ev) => this.onEnd(ev),\n        });\n        this.disabledChanged();\n    }\n    disconnectedCallback() {\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        this.item = null;\n        this.leftOptions = this.rightOptions = undefined;\n        if (openSlidingItem === this.el) {\n            openSlidingItem = undefined;\n        }\n        if (this.mutationObserver) {\n            this.mutationObserver.disconnect();\n            this.mutationObserver = undefined;\n        }\n    }\n    /**\n     * Get the amount the item is open in pixels.\n     */\n    getOpenAmount() {\n        return Promise.resolve(this.openAmount);\n    }\n    /**\n     * Get the ratio of the open amount of the item compared to the width of the options.\n     * If the number returned is positive, then the options on the right side are open.\n     * If the number returned is negative, then the options on the left side are open.\n     * If the absolute value of the number is greater than 1, the item is open more than\n     * the width of the options.\n     */\n    getSlidingRatio() {\n        return Promise.resolve(this.getSlidingRatioSync());\n    }\n    /**\n     * Open the sliding item.\n     *\n     * @param side The side of the options to open. If a side is not provided, it will open the first set of options it finds within the item.\n     */\n    async open(side) {\n        var _a;\n        /**\n         * It is possible for the item to be added to the DOM\n         * after the item-sliding component was created. As a result,\n         * if this.item is null, then we should attempt to\n         * query for the ion-item again.\n         * However, if the item is already defined then\n         * we do not query for it again.\n         */\n        const item = (this.item = (_a = this.item) !== null && _a !== void 0 ? _a : this.el.querySelector('ion-item'));\n        if (item === null) {\n            return;\n        }\n        const optionsToOpen = this.getOptions(side);\n        if (!optionsToOpen) {\n            return;\n        }\n        /**\n         * If side is not set, we need to infer the side\n         * so we know which direction to move the options\n         */\n        if (side === undefined) {\n            side = optionsToOpen === this.leftOptions ? 'start' : 'end';\n        }\n        // In RTL we want to switch the sides\n        side = isEndSide(side) ? 'end' : 'start';\n        const isStartOpen = this.openAmount < 0;\n        const isEndOpen = this.openAmount > 0;\n        /**\n         * If a side is open and a user tries to\n         * re-open the same side, we should not do anything\n         */\n        if (isStartOpen && optionsToOpen === this.leftOptions) {\n            return;\n        }\n        if (isEndOpen && optionsToOpen === this.rightOptions) {\n            return;\n        }\n        this.closeOpened();\n        this.state = 4 /* SlidingState.Enabled */;\n        requestAnimationFrame(() => {\n            this.calculateOptsWidth();\n            const width = side === 'end' ? this.optsWidthRightSide : -this.optsWidthLeftSide;\n            openSlidingItem = this.el;\n            this.setOpenAmount(width, false);\n            this.state = side === 'end' ? 8 /* SlidingState.End */ : 16 /* SlidingState.Start */;\n        });\n    }\n    /**\n     * Close the sliding item. Items can also be closed from the [List](./list).\n     */\n    async close() {\n        this.setOpenAmount(0, true);\n    }\n    /**\n     * Close all of the sliding items in the list. Items can also be closed from the [List](./list).\n     */\n    async closeOpened() {\n        if (openSlidingItem !== undefined) {\n            openSlidingItem.close();\n            openSlidingItem = undefined;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Given an optional side, return the ion-item-options element.\n     *\n     * @param side This side of the options to get. If a side is not provided it will\n     * return the first one available.\n     */\n    getOptions(side) {\n        if (side === undefined) {\n            return this.leftOptions || this.rightOptions;\n        }\n        else if (side === 'start') {\n            return this.leftOptions;\n        }\n        else {\n            return this.rightOptions;\n        }\n    }\n    async updateOptions() {\n        const options = this.el.querySelectorAll('ion-item-options');\n        let sides = 0;\n        // Reset left and right options in case they were removed\n        this.leftOptions = this.rightOptions = undefined;\n        for (let i = 0; i < options.length; i++) {\n            const item = options.item(i);\n            /**\n             * We cannot use the componentOnReady helper\n             * util here since we need to wait for all of these items\n             * to be ready before we set `this.sides` and `this.optsDirty`.\n             */\n            // eslint-disable-next-line custom-rules/no-component-on-ready-method\n            const option = item.componentOnReady !== undefined ? await item.componentOnReady() : item;\n            const side = isEndSide(option.side) ? 'end' : 'start';\n            if (side === 'start') {\n                this.leftOptions = option;\n                sides |= 1 /* ItemSide.Start */;\n            }\n            else {\n                this.rightOptions = option;\n                sides |= 2 /* ItemSide.End */;\n            }\n        }\n        this.optsDirty = true;\n        this.sides = sides;\n    }\n    canStart(gesture) {\n        /**\n         * If very close to start of the screen\n         * do not open left side so swipe to go\n         * back will still work.\n         */\n        const rtl = document.dir === 'rtl';\n        const atEdge = rtl ? window.innerWidth - gesture.startX < 15 : gesture.startX < 15;\n        if (atEdge) {\n            return false;\n        }\n        const selected = openSlidingItem;\n        if (selected && selected !== this.el) {\n            this.closeOpened();\n        }\n        return !!(this.rightOptions || this.leftOptions);\n    }\n    onStart() {\n        /**\n         * We need to query for the ion-item\n         * every time the gesture starts. Developers\n         * may toggle ion-item elements via *ngIf.\n         */\n        this.item = this.el.querySelector('ion-item');\n        const { contentEl } = this;\n        if (contentEl) {\n            this.initialContentScrollY = disableContentScrollY(contentEl);\n        }\n        openSlidingItem = this.el;\n        if (this.tmr !== undefined) {\n            clearTimeout(this.tmr);\n            this.tmr = undefined;\n        }\n        if (this.openAmount === 0) {\n            this.optsDirty = true;\n            this.state = 4 /* SlidingState.Enabled */;\n        }\n        this.initialOpenAmount = this.openAmount;\n        if (this.item) {\n            this.item.style.transition = 'none';\n        }\n    }\n    onMove(gesture) {\n        if (this.optsDirty) {\n            this.calculateOptsWidth();\n        }\n        let openAmount = this.initialOpenAmount - gesture.deltaX;\n        switch (this.sides) {\n            case 2 /* ItemSide.End */:\n                openAmount = Math.max(0, openAmount);\n                break;\n            case 1 /* ItemSide.Start */:\n                openAmount = Math.min(0, openAmount);\n                break;\n            case 3 /* ItemSide.Both */:\n                break;\n            case 0 /* ItemSide.None */:\n                return;\n            default:\n                console.warn('invalid ItemSideFlags value', this.sides);\n                break;\n        }\n        let optsWidth;\n        if (openAmount > this.optsWidthRightSide) {\n            optsWidth = this.optsWidthRightSide;\n            openAmount = optsWidth + (openAmount - optsWidth) * ELASTIC_FACTOR;\n        }\n        else if (openAmount < -this.optsWidthLeftSide) {\n            optsWidth = -this.optsWidthLeftSide;\n            openAmount = optsWidth + (openAmount - optsWidth) * ELASTIC_FACTOR;\n        }\n        this.setOpenAmount(openAmount, false);\n    }\n    onEnd(gesture) {\n        const { contentEl, initialContentScrollY } = this;\n        if (contentEl) {\n            resetContentScrollY(contentEl, initialContentScrollY);\n        }\n        const velocity = gesture.velocityX;\n        let restingPoint = this.openAmount > 0 ? this.optsWidthRightSide : -this.optsWidthLeftSide;\n        // Check if the drag didn't clear the buttons mid-point\n        // and we aren't moving fast enough to swipe open\n        const isResetDirection = this.openAmount > 0 === !(velocity < 0);\n        const isMovingFast = Math.abs(velocity) > 0.3;\n        const isOnCloseZone = Math.abs(this.openAmount) < Math.abs(restingPoint / 2);\n        if (swipeShouldReset(isResetDirection, isMovingFast, isOnCloseZone)) {\n            restingPoint = 0;\n        }\n        const state = this.state;\n        this.setOpenAmount(restingPoint, true);\n        if ((state & 32 /* SlidingState.SwipeEnd */) !== 0 && this.rightOptions) {\n            this.rightOptions.fireSwipeEvent();\n        }\n        else if ((state & 64 /* SlidingState.SwipeStart */) !== 0 && this.leftOptions) {\n            this.leftOptions.fireSwipeEvent();\n        }\n    }\n    calculateOptsWidth() {\n        this.optsWidthRightSide = 0;\n        if (this.rightOptions) {\n            this.rightOptions.style.display = 'flex';\n            this.optsWidthRightSide = this.rightOptions.offsetWidth;\n            this.rightOptions.style.display = '';\n        }\n        this.optsWidthLeftSide = 0;\n        if (this.leftOptions) {\n            this.leftOptions.style.display = 'flex';\n            this.optsWidthLeftSide = this.leftOptions.offsetWidth;\n            this.leftOptions.style.display = '';\n        }\n        this.optsDirty = false;\n    }\n    setOpenAmount(openAmount, isFinal) {\n        if (this.tmr !== undefined) {\n            clearTimeout(this.tmr);\n            this.tmr = undefined;\n        }\n        if (!this.item) {\n            return;\n        }\n        const { el } = this;\n        const style = this.item.style;\n        this.openAmount = openAmount;\n        if (isFinal) {\n            style.transition = '';\n        }\n        if (openAmount > 0) {\n            this.state =\n                openAmount >= this.optsWidthRightSide + SWIPE_MARGIN\n                    ? 8 /* SlidingState.End */ | 32 /* SlidingState.SwipeEnd */\n                    : 8 /* SlidingState.End */;\n        }\n        else if (openAmount < 0) {\n            this.state =\n                openAmount <= -this.optsWidthLeftSide - SWIPE_MARGIN\n                    ? 16 /* SlidingState.Start */ | 64 /* SlidingState.SwipeStart */\n                    : 16 /* SlidingState.Start */;\n        }\n        else {\n            /**\n             * The sliding options should not be\n             * clickable while the item is closing.\n             */\n            el.classList.add('item-sliding-closing');\n            /**\n             * Item sliding cannot be interrupted\n             * while closing the item. If it did,\n             * it would allow the item to get into an\n             * inconsistent state where multiple\n             * items are then open at the same time.\n             */\n            if (this.gesture) {\n                this.gesture.enable(false);\n            }\n            this.tmr = setTimeout(() => {\n                this.state = 2 /* SlidingState.Disabled */;\n                this.tmr = undefined;\n                if (this.gesture) {\n                    this.gesture.enable(!this.disabled);\n                }\n                el.classList.remove('item-sliding-closing');\n            }, 600);\n            openSlidingItem = undefined;\n            style.transform = '';\n            return;\n        }\n        style.transform = `translate3d(${-openAmount}px,0,0)`;\n        this.ionDrag.emit({\n            amount: openAmount,\n            ratio: this.getSlidingRatioSync(),\n        });\n    }\n    getSlidingRatioSync() {\n        if (this.openAmount > 0) {\n            return this.openAmount / this.optsWidthRightSide;\n        }\n        else if (this.openAmount < 0) {\n            return this.openAmount / this.optsWidthLeftSide;\n        }\n        else {\n            return 0;\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '99f87c8bd794ae69830b407ba55013ac44793c26', class: {\n                [mode]: true,\n                'item-sliding-active-slide': this.state !== 2 /* SlidingState.Disabled */,\n                'item-sliding-active-options-end': (this.state & 8 /* SlidingState.End */) !== 0,\n                'item-sliding-active-options-start': (this.state & 16 /* SlidingState.Start */) !== 0,\n                'item-sliding-active-swipe-end': (this.state & 32 /* SlidingState.SwipeEnd */) !== 0,\n                'item-sliding-active-swipe-start': (this.state & 64 /* SlidingState.SwipeStart */) !== 0,\n            } }));\n    }\n    static get is() { return \"ion-item-sliding\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"item-sliding.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"item-sliding.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the sliding item.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"state\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionDrag\",\n                \"name\": \"ionDrag\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the sliding position changes.\"\n                },\n                \"complexType\": {\n                    \"original\": \"any\",\n                    \"resolved\": \"any\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"getOpenAmount\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<number>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<number>\"\n                },\n                \"docs\": {\n                    \"text\": \"Get the amount the item is open in pixels.\",\n                    \"tags\": []\n                }\n            },\n            \"getSlidingRatio\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<number>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<number>\"\n                },\n                \"docs\": {\n                    \"text\": \"Get the ratio of the open amount of the item compared to the width of the options.\\nIf the number returned is positive, then the options on the right side are open.\\nIf the number returned is negative, then the options on the left side are open.\\nIf the absolute value of the number is greater than 1, the item is open more than\\nthe width of the options.\",\n                    \"tags\": []\n                }\n            },\n            \"open\": {\n                \"complexType\": {\n                    \"signature\": \"(side: Side | undefined) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"side\",\n                            \"type\": \"Side | undefined\",\n                            \"docs\": \"The side of the options to open. If a side is not provided, it will open the first set of options it finds within the item.\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"Side\": {\n                            \"location\": \"import\",\n                            \"path\": \"../menu/menu-interface\",\n                            \"id\": \"src/components/menu/menu-interface.ts::Side\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Open the sliding item.\",\n                    \"tags\": [{\n                            \"name\": \"param\",\n                            \"text\": \"side The side of the options to open. If a side is not provided, it will open the first set of options it finds within the item.\"\n                        }]\n                }\n            },\n            \"close\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Close the sliding item. Items can also be closed from the [List](./list).\",\n                    \"tags\": []\n                }\n            },\n            \"closeOpened\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<boolean>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<boolean>\"\n                },\n                \"docs\": {\n                    \"text\": \"Close all of the sliding items in the list. Items can also be closed from the [List](./list).\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"disabled\",\n                \"methodName\": \"disabledChanged\"\n            }];\n    }\n}\nconst swipeShouldReset = (isResetDirection, isMovingFast, isOnResetZone) => {\n    // The logic required to know when the sliding item should close (openAmount=0)\n    // depends on three booleans (isResetDirection, isMovingFast, isOnResetZone)\n    // and it ended up being too complicated to be written manually without errors\n    // so the truth table is attached below: (0=false, 1=true)\n    // isResetDirection | isMovingFast | isOnResetZone || shouldClose\n    //         0        |       0      |       0       ||    0\n    //         0        |       0      |       1       ||    1\n    //         0        |       1      |       0       ||    0\n    //         0        |       1      |       1       ||    0\n    //         1        |       0      |       0       ||    0\n    //         1        |       0      |       1       ||    1\n    //         1        |       1      |       0       ||    1\n    //         1        |       1      |       1       ||    1\n    // The resulting expression was generated by resolving the K-map (Karnaugh map):\n    return (!isMovingFast && isOnResetZone) || (isResetDirection && isMovingFast);\n};\n"],"mappings":"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","ignoreList":[]}