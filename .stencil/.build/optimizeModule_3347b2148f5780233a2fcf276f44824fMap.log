{"version":3,"names":["pageDivePlannerCss","PageDivePlannerStyle0","PageDivePlanner","this","plans","stdDiveProfile","depth","DiveToolsService","isMetric","time","fO2","fHe","setpoint","isLoaded","stdConfigurations","componentWillLoad","userSettingsSub$","UserService","userSettings$","subscribe","userSettings","UserSettings","loadLocalData","componentDidLoad","initLocalUser","swiper","Swiper","speed","spaceBetween","allowTouchMove","settings","cloneDeep","userConfigurations","localPlans","orderPlans","DatabaseService","getLocalDocument","DiveStandardsService","getStdConfigurations","forEach","plan","model","DivePlanModel","push","getDivePlansFromConfigurations","saveLocalDocument","disconnectedCallback","unsubscribe","addDivePlan","maxLocalPlans","length","alert","alertController","create","header","TranslationService","getTransl","message","xxx","buttons","text","present","inputs","userProfile","type","label","value","checked","conf","key","stdName","handler","async","data","addDivePlanWithConf","openModal","checkLicence","newConfig","configuration","DiveConfiguration","bottom","maxDepth","maxTime","divePlan","DivePlan","setConfiguration","confModal","RouterService","diveDataToShare","showConfigurations","onDidDismiss","then","updatedConf","newConf","newArray","concat","updateUserConfigurations","role","cssClass","selectedConfiguration","index","user","dpModal","updatePlans","viewDive","i","addDive","divePlanModel","updateUserLocalPlans","orderBy","removeDive","event","stopPropagation","confirm","splice","render","h","tag","color","Environment","isDecoplanner","vertical","horizontal","slot","edge","onClick","name","class","map","lines","fill","ev","dives","getProfilePointsDetails","detail","undefined","tank","gas","toString","deco"],"sources":["src/components/udive/pages/dive-plan/page-dive-planner/page-dive-planner.scss?tag=page-dive-planner","src/components/udive/pages/dive-plan/page-dive-planner/page-dive-planner.tsx"],"sourcesContent":["page-dive-planner {\n  /* Component styles go here */\n  .card-margins {\n    margin: 10px 5px 5px 10px;\n  }\n}\n","import { Component, h, State } from \"@stencil/core\";\nimport { alertController } from \"@ionic/core\";\nimport { Subscription } from \"rxjs\";\n\nimport { cloneDeep, forEach, orderBy } from \"lodash\";\nimport { DiveConfiguration } from \"../../../../../interfaces/udive/planner/dive-configuration\";\nimport { TranslationService } from \"../../../../../services/common/translations\";\nimport { DivePlan } from \"../../../../../services/udive/planner/dive-plan\";\nimport { UserService } from \"../../../../../services/common/user\";\nimport { DivePlanModel } from \"../../../../../interfaces/udive/planner/dive-plan\";\nimport { DiveStandardsService } from \"../../../../../services/udive/planner/dive-standards\";\nimport { DatabaseService } from \"../../../../../services/common/database\";\nimport { UserSettings } from \"../../../../../interfaces/udive/user/user-settings\";\nimport { RouterService } from \"../../../../../services/common/router\";\nimport { DiveToolsService } from \"../../../../../services/udive/planner/dive-tools\";\nimport { Environment } from \"../../../../../global/env\";\n// core version + navigation, pagination modules:\nimport Swiper from \"swiper\";\n\n@Component({\n  tag: \"page-dive-planner\",\n  styleUrl: \"page-dive-planner.scss\",\n})\nexport class PageDivePlanner {\n  plans: Array<DivePlan> = [];\n  stdDiveProfile = {\n    depth: DiveToolsService.isMetric() ? 30 : 100,\n    time: 30,\n    fO2: 0.32,\n    fHe: 0,\n    setpoint: 1.4,\n  };\n  isLoaded = false;\n  stdConfigurations: DiveConfiguration[] = [];\n  @State() localPlans: DivePlanModel[] = [];\n  userSettings: UserSettings;\n  userSettingsSub$: Subscription;\n  swiper: Swiper;\n  @State() scrollTop = 0;\n\n  componentWillLoad() {\n    this.userSettingsSub$ = UserService.userSettings$.subscribe(\n      (userSettings: UserSettings) => {\n        this.userSettings = new UserSettings(userSettings);\n        this.loadLocalData();\n      }\n    );\n  }\n  componentDidLoad() {\n    //check if user is loaded or trigger local user\n    if (!this.userSettings) {\n      UserService.initLocalUser();\n    }\n    // init Swiper:\n    this.swiper = new Swiper(\".swiper\", {\n      speed: 400,\n      spaceBetween: 100,\n      allowTouchMove: true,\n    });\n  }\n\n  async loadLocalData() {\n    if (this.userSettings && this.userSettings.settings) {\n      //user loggedin\n      this.stdConfigurations = cloneDeep(this.userSettings.userConfigurations);\n      //order by name\n      this.localPlans = this.userSettings.localPlans;\n      this.orderPlans();\n    } else {\n      //no user loggedin\n      const localPlans = await DatabaseService.getLocalDocument(\"localplans\");\n      this.stdConfigurations = DiveStandardsService.getStdConfigurations();\n      if (localPlans) {\n        this.localPlans = [];\n        localPlans.forEach((plan) => {\n          const model = new DivePlanModel(plan);\n          this.localPlans.push(model);\n        });\n      } else {\n        this.localPlans = DiveStandardsService.getDivePlansFromConfigurations(\n          this.stdConfigurations\n        );\n        DatabaseService.saveLocalDocument(\"localplans\", this.localPlans);\n      }\n      this.orderPlans();\n    }\n  }\n\n  disconnectedCallback() {\n    this.userSettingsSub$.unsubscribe();\n  }\n\n  async addDivePlan() {\n    const maxLocalPlans = 15;\n    if (this.localPlans.length >= maxLocalPlans) {\n      const alert = await alertController.create({\n        header: TranslationService.getTransl(\"max-plans\", \"Maximum Plans\"),\n        message: TranslationService.getTransl(\n          \"max-plans-descr\",\n          \"You can store a maximum of xxx plans. Use the 'Logbook' for additional plans.\",\n          { xxx: maxLocalPlans }\n        ),\n        buttons: [\n          {\n            text: TranslationService.getTransl(\"ok\", \"OK\"),\n          },\n        ],\n      });\n      alert.present();\n    } else {\n      let inputs = [];\n      if (UserService.userProfile && UserService.userProfile) {\n        inputs.push({\n          type: \"radio\",\n          label: \"New Configuration\",\n          value: -1,\n          checked: false,\n        });\n      }\n      forEach(this.stdConfigurations, (conf, key) => {\n        inputs.push({\n          type: \"radio\",\n          label: conf.stdName,\n          value: key,\n          checked: key == 0 ? true : false,\n        });\n      });\n\n      const alert = await alertController.create({\n        header: TranslationService.getTransl(\n          \"select-standard-configuration\",\n          \"Select standard configuration\"\n        ),\n        buttons: [\n          {\n            text: TranslationService.getTransl(\"ok\", \"OK\"),\n            handler: async (data: any) => {\n              if (data > -1) {\n                this.addDivePlanWithConf(this.stdConfigurations[data]);\n              } else {\n                let openModal = await UserService.checkLicence(\"configs\", true);\n                if (openModal) {\n                  const newConfig =\n                    UserService.userSettings.userConfigurations[0];\n                  const configuration = new DiveConfiguration(newConfig);\n                  configuration.stdName = \"\";\n                  configuration.configuration.bottom = [];\n                  configuration.maxDepth = 0;\n                  configuration.maxTime = 0;\n                  const divePlan = new DivePlan();\n                  divePlan.setConfiguration(configuration);\n                  const confModal = await RouterService.openModal(\n                    \"modal-dive-configuration\",\n                    {\n                      diveDataToShare: {\n                        divePlan: divePlan,\n                        showConfigurations: true,\n                      },\n                    }\n                  );\n                  confModal.onDidDismiss().then((updatedConf) => {\n                    updatedConf = updatedConf.data;\n                    if (updatedConf) {\n                      //save new configuration and then open deco planner\n                      const newConf = new DiveConfiguration(updatedConf);\n                      //put new configuration on top\n                      const newArray = [newConf].concat(\n                        this.userSettings.userConfigurations\n                      );\n                      this.userSettings.userConfigurations = newArray;\n                      UserService.updateUserConfigurations(\n                        this.userSettings.userConfigurations\n                      );\n                      this.addDivePlanWithConf(newConf);\n                    }\n                  });\n                }\n              }\n            },\n          },\n          {\n            text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n            role: \"cancel\",\n            cssClass: \"secondary\",\n          },\n        ],\n        inputs: inputs,\n      });\n      alert.present();\n    }\n  }\n\n  async addDivePlanWithConf(selectedConfiguration: DiveConfiguration) {\n    const openModal = await RouterService.openModal(\"modal-dive-planner\", {\n      selectedConfiguration: selectedConfiguration,\n      stdConfigurations: this.stdConfigurations,\n      index: 0,\n      user: this.userSettings,\n    });\n    openModal.onDidDismiss().then((divePlan) => {\n      const dpModal = divePlan.data;\n      if (dpModal) {\n        this.localPlans.push(dpModal);\n        this.updatePlans();\n      }\n    });\n  }\n\n  async viewDive(i) {\n    const openModal = await RouterService.openModal(\"modal-dive-planner\", {\n      addDive: false,\n      divePlanModel: this.localPlans[i],\n      stdConfigurations: this.stdConfigurations,\n      index: 0,\n      user: this.userSettings,\n    });\n    openModal.onDidDismiss().then((divePlan) => {\n      const dpModal = divePlan.data;\n      if (dpModal) {\n        this.localPlans[i] = dpModal;\n        this.updatePlans();\n      }\n    });\n  }\n\n  updatePlans() {\n    if (this.userSettings && this.userSettings.localPlans) {\n      UserService.updateUserLocalPlans(this.localPlans);\n    } else {\n      DatabaseService.saveLocalDocument(\"localplans\", this.localPlans);\n      this.loadLocalData();\n    }\n  }\n\n  orderPlans() {\n    this.localPlans = orderBy(this.localPlans, \"configuration.stdName\");\n  }\n\n  async removeDive(event, i) {\n    event.stopPropagation();\n    const confirm = await alertController.create({\n      header: TranslationService.getTransl(\n        \"delete-dive-header\",\n        \"Delete dive?\"\n      ),\n      message: TranslationService.getTransl(\n        \"delete-dive-message\",\n        \"This dive plan will be deleted! Are you sure?\"\n      ),\n      buttons: [\n        {\n          text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n          role: \"cancel\",\n          handler: () => {},\n        },\n        {\n          text: TranslationService.getTransl(\"ok\", \"OK\"),\n          handler: () => {\n            this.localPlans.splice(i, 1);\n            this.updatePlans();\n          },\n        },\n      ],\n    });\n    confirm.present();\n  }\n\n  render() {\n    return [\n      <app-navbar\n        tag='deco-planner'\n        text='Deco Planner'\n        color={Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"}\n      ></app-navbar>,\n      <ion-content>\n        <ion-fab vertical='top' horizontal='end' slot='fixed' edge>\n          <ion-fab-button\n            onClick={() => this.addDivePlan()}\n            color={Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"}\n          >\n            <ion-icon name='add'></ion-icon>\n          </ion-fab-button>\n        </ion-fab>\n        {this.localPlans.length > 0 ? (\n          <ion-grid class='ion-no-padding'>\n            <ion-row class='ion-no-padding'>\n              {this.localPlans.map((plan, i) => (\n                <ion-col\n                  size-sm='12'\n                  size-md='6'\n                  size-lg='4'\n                  class='ion-no-padding'\n                >\n                  <ion-card\n                    onClick={() => this.viewDive(i)}\n                    class='card-margins'\n                  >\n                    <ion-card-header>\n                      <ion-card-subtitle>\n                        <ion-item lines='none' class='ion-no-padding'>\n                          <ion-button\n                            icon-only\n                            slot='end'\n                            color='danger'\n                            fill='clear'\n                            onClick={(ev) => this.removeDive(ev, i)}\n                          >\n                            <ion-icon name='trash-bin-outline'></ion-icon>\n                          </ion-button>\n                          <ion-label>\n                            <h1>{plan.configuration.stdName}</h1>\n                          </ion-label>\n                        </ion-item>\n                        {plan.dives[0]\n                          .getProfilePointsDetails()\n                          .map((detail) => (\n                            <p class='ion-text-start'>{detail}</p>\n                          ))}\n                      </ion-card-subtitle>\n                    </ion-card-header>\n\n                    <ion-card-content>\n                      {plan.configuration.configuration.bottom.length > 0 ? (\n                        <p>\n                          <my-transl tag='bottom-tanks' text='Bottom Tanks' />:\n                        </p>\n                      ) : undefined}\n                      {plan.configuration.configuration.bottom.map((tank) => (\n                        <p>{tank.name + \"->\" + tank.gas.toString()}</p>\n                      ))}\n                      {plan.configuration.configuration.deco.length > 0 ? (\n                        <p>\n                          <my-transl tag='deco-tanks' text='Deco Tanks' />:\n                        </p>\n                      ) : undefined}\n                      {plan.configuration.configuration.deco.map((tank) => (\n                        <p>{tank.name + \"->\" + tank.gas.toString()}</p>\n                      ))}\n                    </ion-card-content>\n                  </ion-card>\n                </ion-col>\n              ))}\n            </ion-row>\n          </ion-grid>\n        ) : undefined}\n      </ion-content>,\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]}