{"version":3,"names":["modalDiveCertificationUpdateCss","ModalDiveCertificationUpdateStyle0","ModalDiveCertificationUpdate","tag","componentWillLoad","this","newCert","diveCertification","id","certGroups","SystemService","systemPreferences","selectOptions","certificationGroups","activities","map","activity","divePlan","DivePlanModel","componentDidLoad","slider","Swiper","speed","spaceBetween","allowTouchMove","autoHeight","validateCert","handleCertChange","ev","detail","name","toNumber","value","updateCertGroup","group","uniqueIdValid","validCert","updateImageUrls","imageType","type","url","photoURL","coverURL","isString","numberOfStudents","maxDepth","save","modalController","dismiss","cancel","render","h","Host","key","item","collection","SYSTEMCOLLECTION","agencyId","onCoverUploaded","undefined","color","Environment","getAppColor","swiper","titles","class","disabled","onFormItemChanged","onIsValid","validator","options","toString","onIonChange","interface","text","schedule","showDiveLocation","onScheduleEmit","editable","disableSave","onCancelEmit","onSaveEmit"],"sources":["src/components/udive/modals/system/modal-dive-certification-update/modal-dive-certification-update.scss?tag=modal-dive-certification-update","src/components/udive/modals/system/modal-dive-certification-update/modal-dive-certification-update.tsx"],"sourcesContent":["modal-dive-certification-update {\n  ion-list {\n    width: 100%;\n  }\n}\n","import {Component, h, Host, Prop, State, Element} from \"@stencil/core\";\nimport {modalController} from \"@ionic/core\";\nimport {isString, toNumber, toString} from \"lodash\";\nimport {Certification} from \"../../../../../interfaces/udive/diving-class/divingClass\";\nimport {\n  SystemService,\n  SYSTEMCOLLECTION,\n} from \"../../../../../services/common/system\";\nimport {DivePlanModel} from \"../../../../../interfaces/udive/planner/dive-plan\";\nimport Swiper from \"swiper\";\nimport {Environment} from \"../../../../../global/env\";\n\n@Component({\n  tag: \"modal-dive-certification-update\",\n  styleUrl: \"modal-dive-certification-update.scss\",\n})\nexport class ModalDiveCertificationUpdate {\n  @Element() el: HTMLElement;\n  @Prop() agencyId: string;\n  @Prop() diveCertification: Certification;\n  @State() validCert = false;\n  @State() newCert: boolean = false;\n  @State() updateView = false;\n  certGroups: any;\n  @State() titles = [{tag: \"details\"}, {tag: \"schedule\"}];\n  @State() slider: Swiper;\n\n  async componentWillLoad() {\n    this.newCert = !this.diveCertification.id;\n    this.certGroups =\n      SystemService.systemPreferences.selectOptions.certificationGroups;\n\n    //convert diveplans to models\n    if (this.diveCertification.activities)\n      this.diveCertification.activities = this.diveCertification.activities.map(\n        (activity) => {\n          if (activity.divePlan)\n            activity.divePlan = new DivePlanModel(activity.divePlan);\n          return activity;\n        }\n      );\n  }\n\n  async componentDidLoad() {\n    this.slider = new Swiper(\".slider-dive-cert\", {\n      speed: 400,\n      spaceBetween: 100,\n      allowTouchMove: true,\n      autoHeight: true,\n    });\n    this.validateCert();\n  }\n\n  handleCertChange(ev) {\n    if (ev.detail.name == \"maxDepth\" || ev.detail.name == \"numberOfStudents\") {\n      this.diveCertification[ev.detail.name] = toNumber(ev.detail.value);\n    } else {\n      this.diveCertification[ev.detail.name] = ev.detail.value;\n    }\n    this.validateCert();\n  }\n\n  updateCertGroup(group) {\n    this.diveCertification.group = group;\n    this.validateCert();\n  }\n\n  uniqueIdValid(ev) {\n    this.validCert = this.validCert && ev.detail;\n  }\n\n  updateImageUrls(ev) {\n    const imageType = ev.detail.type;\n    const url = ev.detail.url;\n    if (imageType == \"photo\") {\n      this.diveCertification.photoURL = url;\n    } else {\n      this.diveCertification.coverURL = url;\n    }\n  }\n\n  validateCert() {\n    this.validCert =\n      isString(this.diveCertification.id) &&\n      isString(this.diveCertification.name) &&\n      this.diveCertification.numberOfStudents > 0 &&\n      this.diveCertification.maxDepth > 0;\n  }\n\n  async save() {\n    return modalController.dismiss(this.diveCertification);\n  }\n\n  async cancel() {\n    return modalController.dismiss();\n  }\n\n  render() {\n    return (\n      <Host>\n        <ion-header>\n          {this.diveCertification.id ? (\n            <app-upload-cover\n              item={{\n                collection: SYSTEMCOLLECTION,\n                id: this.agencyId + \"-\" + this.diveCertification.id,\n                photoURL: this.diveCertification.photoURL,\n                coverURL: this.diveCertification.coverURL,\n              }}\n              onCoverUploaded={(ev) => this.updateImageUrls(ev)}\n            ></app-upload-cover>\n          ) : undefined}\n        </ion-header>\n        <app-header-segment-toolbar\n          color={Environment.getAppColor()}\n          swiper={this.slider}\n          titles={this.titles}\n        ></app-header-segment-toolbar>\n        <ion-content class=\"slides\">\n          <swiper-container class=\"slider-dive-cert swiper\">\n            <swiper-wrapper class=\"swiper-wrapper\">\n              <swiper-slide class=\"swiper-slide\">\n                <ion-list>\n                  <app-form-item\n                    label-tag=\"unique-id\"\n                    label-text=\"Unique ID\"\n                    value={this.diveCertification.id}\n                    disabled={!this.newCert}\n                    name=\"id\"\n                    input-type=\"text\"\n                    onFormItemChanged={(ev) => this.handleCertChange(ev)}\n                    onIsValid={(ev) => this.uniqueIdValid(ev)}\n                    validator={[\n                      \"required\",\n                      {\n                        name: \"uniqueid\",\n                        options: {type: null},\n                      },\n                    ]}\n                  ></app-form-item>\n                  <app-form-item\n                    label-tag=\"name\"\n                    label-text=\"Name\"\n                    value={this.diveCertification.name}\n                    name=\"name\"\n                    input-type=\"text\"\n                    onFormItemChanged={(ev) => this.handleCertChange(ev)}\n                    validator={[\"required\"]}\n                  ></app-form-item>\n                  <app-form-item\n                    label-tag=\"max-depth\"\n                    label-text=\"Max. Depth\"\n                    value={toString(this.diveCertification.maxDepth)}\n                    name=\"maxDepth\"\n                    input-type=\"number\"\n                    onFormItemChanged={(ev) => this.handleCertChange(ev)}\n                    validator={[\"required\"]}\n                  ></app-form-item>\n                  <app-form-item\n                    label-tag=\"max-students\"\n                    label-text=\"Max. number of students\"\n                    value={toString(this.diveCertification.numberOfStudents)}\n                    name=\"numberOfStudents\"\n                    input-type=\"number\"\n                    onFormItemChanged={(ev) => this.handleCertChange(ev)}\n                    validator={[\"required\"]}\n                  ></app-form-item>\n                  <ion-item>\n                    <ion-label>Certification Group</ion-label>\n                    <ion-select\n                      value={this.diveCertification.group}\n                      onIonChange={(ev) =>\n                        this.updateCertGroup(ev.detail.value)\n                      }\n                      interface=\"popover\"\n                    >\n                      {this.certGroups.map((group) => (\n                        <ion-select-option value={group.tag}>\n                          {group.text}\n                        </ion-select-option>\n                      ))}\n                    </ion-select>\n                  </ion-item>\n                </ion-list>\n              </swiper-slide>\n              <swiper-slide class=\"swiper-slide\">\n                <app-dive-course-activities\n                  schedule={this.diveCertification.activities}\n                  showDiveLocation={false}\n                  onScheduleEmit={(ev) =>\n                    (this.diveCertification.activities = ev.detail)\n                  }\n                  editable={true}\n                />\n              </swiper-slide>\n            </swiper-wrapper>\n          </swiper-container>\n        </ion-content>\n        <app-modal-footer\n          disableSave={!this.validCert}\n          onCancelEmit={() => this.cancel()}\n          onSaveEmit={() => this.save()}\n        />\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}