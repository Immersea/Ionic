{"version":3,"names":["appDecoplannerArpcCss","AppDecoplannerArpcStyle0","CELLDATE","AppDecoplannerArpc","this","cellCheckResult","componentWillLoad","dive","diveDataToShare","divePlan","dives","index","localCellDate","DatabaseService","getLocalDocument","cellDate","arpc","ARPCModel","saveLocalCells","undefined","approveARPC","checkApproved","saveArpc","emit","updateView","inputHandler","event","name","detail","split","value","length","saveLocalDocument","updateParam","param","ev","checked","cellCheck","cellNumber","checkCellDate","checkO2CellmV","cellNum","difference","airmVRange","o2mVRange","showAlert","message","TranslationService","getTransl","confirm","alertController","create","header","buttons","text","handler","present","render","h","key","class","tag","size","onFormItemChanged","maxDate","Date","getFullYear","getMonth","appendText","validator","options","min","max","color","Environment","getAppColor","onIonChange","battHUD","labelPosition","battINT","battEXT","settingsDone","scrubberTime","lidCheck","loopCheck","negativePressCheck","o2LeakTest","positivePressCheck","diluentLeakTest","openO2Valve","loopInCC","hudOn","calController","calHUD","round","o2IP","dilIP","bailout","appDecoplannerPlanCss","AppDecoplannerPlanStyle0","AppDecoplannerPlan","stdConfigurations","allowSelectConfiguration","showArpc","sitesList","divingCentersList","DecoplannerDive","diveParamsUpdate","segmentTitles","location","date","surface","levels","deco","confSelectOptions","title","subTitle","mode","DiveSitesService","diveSitesList","DivingCentersService","params","stdGases","stdDecoGases","user","findConfig","findDiveSite","diveSiteId","diveSite","find","site","id","setSelectDivingCenters","openSearchSite","popover","popoverController","component","translucent","onDidDismiss","then","siteId","data","selectDCElement","el","querySelector","customDCPopoverOptions","interfaceOptions","selectDCOptions","Array","from","getElementsByTagName","map","option","removeChild","divingCenters","placeholder","dcId","selectOption","document","createElement","dc","textContent","displayName","appendChild","disabled","divingCenterId","findConf","configuration","stdName","updatedConf","cloneDeep","push","diveConfiguration","parameters","showDiveSite","showPositionTab","forEach","gas","O2","ppO2","oxygenppO2","decoppO2","updateParams","updateParamsEvent","updateDiveConfiguration","conf","setConfiguration","resetDecoTanksWithConfiguration","saveDoc","editDiveConfig","openModal","UserService","checkLicence","confModal","RouterService","setTimeout","SystemService","dismissLoading","showLoading","presentLoading","reorderItems","reorder","element","profilePoints","splice","to","point","complete","updateCalculations","orderBy","presentPopover","type","page","update","level","last","setValue","depth","decoGases","userRoles","licences","getUserLimitations","maxDecoGases","presentLicenceLimitation","decoGasDepths","i","fromDepth","minDecoGasDepth","decoGas","Gas","He","units","setUseAsDiluent","useAsDiluent","gasProp","levelProp","stdGasesList","trimixlicence","ccr","cssClass","isPlatform","backdropDismiss","componentProps","async","updatedData","updateDiveProfilePoint","time","o2","he","setpoint","addDiveProfilePoint","updateDiveDecoGas","addDiveDecoGas","addStdDecoGases","filter","getDecoStartDepth","removeProfilePoint","removeDiveProfilePoint","removeDecoGas","removeDiveDecoGas","segmentChanged","segment","isUdive","updateDate","updateSurfaceInterval","surfaceInterval","updateDates","updateDiveSite","updateDivingCenter","isDecoplanner","layout","approved","style","fontSize","toISOString","datePresentation","lines","slot","format","label","button","onClick","labelPlacement","width","fill","marginTop","onIonItemReorder","unlimited","planner","onSaveArpc"],"sources":["src/components/udive/app/decoplanner/app-decoplanner-arpc/app-decoplanner-arpc.scss?tag=app-decoplanner-arpc","src/components/udive/app/decoplanner/app-decoplanner-arpc/app-decoplanner-arpc.tsx","src/components/udive/app/decoplanner/app-decoplanner-plan/app-decoplanner-plan.scss?tag=app-decoplanner-plan","src/components/udive/app/decoplanner/app-decoplanner-plan/app-decoplanner-plan.tsx"],"sourcesContent":["app-decoplanner-arpc {\n  .cell-note {\n    display: flex;\n    justify-content: end;\n    padding: 0 20px 0 0;\n  }\n  .red-color {\n    color: red;\n    font-weight: bold;\n  }\n}\n","import {alertController} from \"@ionic/core\";\nimport {Component, Event, EventEmitter, h, Prop, State} from \"@stencil/core\";\nimport {Environment} from \"../../../../../global/env\";\nimport {ARPCModel} from \"../../../../../interfaces/udive/planner/arpc\";\nimport {DatabaseService} from \"../../../../../services/common/database\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {round} from \"lodash\";\n\nconst CELLDATE = \"CCR-cell-date\";\n@Component({\n  tag: \"app-decoplanner-arpc\",\n  styleUrl: \"app-decoplanner-arpc.scss\",\n})\nexport class AppDecoplannerArpc {\n  @Event() saveArpc: EventEmitter<ARPCModel>;\n\n  @Prop() diveDataToShare: any;\n  @Prop() planner? = false;\n  @State() updateView = true;\n  arpc: ARPCModel;\n  cellCheckResult: Array<boolean> = [false, false, false];\n\n  async componentWillLoad() {\n    const dive =\n      this.diveDataToShare.divePlan.dives[this.diveDataToShare.index];\n    const localCellDate = await DatabaseService.getLocalDocument(CELLDATE);\n    const cellDate = dive.arpc ? dive.arpc.cellDate : localCellDate;\n    this.arpc = dive.arpc ? dive.arpc : new ARPCModel();\n    if (!localCellDate) this.saveLocalCells();\n    cellDate ? (this.arpc.cellDate = cellDate) : undefined;\n  }\n\n  approveARPC() {\n    this.arpc.checkApproved();\n    this.saveArpc.emit(this.arpc);\n    this.updateView = !this.updateView;\n  }\n\n  inputHandler(event: any) {\n    const name = event.detail.name.split(\".\");\n    const value = event.detail.value;\n    if (name.length > 1) {\n      if (name[0] == \"cellDate\") {\n        this.arpc[name[0]][name[1]] = value;\n        this.saveLocalCells();\n      } else {\n        this.arpc[name[0]][name[1]] = value;\n      }\n    } else {\n      this.arpc[name[0]] = value;\n    }\n    this.approveARPC();\n  }\n\n  saveLocalCells() {\n    DatabaseService.saveLocalDocument(CELLDATE, this.arpc.cellDate);\n  }\n\n  updateParam(param, ev) {\n    this.arpc[param] = ev.detail.checked;\n    this.approveARPC();\n  }\n\n  cellCheck(cellNumber) {\n    this.cellCheckResult[cellNumber] = this.arpc.checkCellDate(cellNumber);\n    this.approveARPC();\n  }\n\n  async checkO2CellmV(cellNum) {\n    let difference =\n      this.arpc.airmVRange[cellNum] * 4.76 - this.arpc.o2mVRange[cellNum];\n    let showAlert = false,\n      message = \"\";\n    if (difference < -2) {\n      showAlert = true;\n      message = TranslationService.getTransl(\n        \"cell-mv-high\",\n        \"mV reading high! Please check if the loop is open!\"\n      );\n    } else if (difference > 2) {\n      showAlert = true;\n      message = TranslationService.getTransl(\n        \"cell-mv-low\",\n        \"mV reading low! Please check O2 supply (valve open, pressure, pinched hose, not analyzed)!\"\n      );\n    }\n\n    let confirm = await alertController.create({\n      header: TranslationService.getTransl(\"error\", \"Error\"),\n      message: message,\n      buttons: [\n        {\n          text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n          handler: () => {},\n        },\n        {\n          text: TranslationService.getTransl(\"ok\", \"OK\"),\n          handler: () => {},\n        },\n      ],\n    });\n    if (showAlert) confirm.present();\n    this.approveARPC();\n  }\n\n  render() {\n    return (\n      <div class=\"ion-no-padding\">\n        <ion-item-divider>\n          <ion-label>\n            <h2>\n              <my-transl\n                tag=\"arpc\"\n                text=\"ADVANCED REBREATHER PREPARATION CHECKS\"\n              />\n            </h2>\n          </ion-label>\n        </ion-item-divider>\n        <ion-row>\n          <ion-col>\n            <ion-item-divider>\n              <ion-label>\n                <my-transl\n                  tag=\"lid-preparation\"\n                  text=\"LID AND CONTROLLER PREPARATION\"\n                />\n              </ion-label>\n            </ion-item-divider>\n            <ion-item>\n              <ion-grid no-padding>\n                <ion-row>\n                  <ion-col>\n                    <my-transl tag=\"o2-cell-1year\" text=\"O2 Cells <1 year\" />\n                  </ion-col>\n                </ion-row>\n                <ion-row>\n                  <ion-col size=\"4\">\n                    <my-transl\n                      tag=\"cell\"\n                      text=\"Cell\"\n                      append-text=\" #1\"\n                    ></my-transl>\n                  </ion-col>\n                  <ion-col size=\"4\">\n                    <my-transl\n                      tag=\"cell\"\n                      text=\"Cell\"\n                      append-text=\" #2\"\n                    ></my-transl>\n                  </ion-col>\n                  <ion-col size=\"4\">\n                    <my-transl\n                      tag=\"cell\"\n                      text=\"Cell\"\n                      append-text=\" #3\"\n                    ></my-transl>\n                  </ion-col>\n                </ion-row>\n                <ion-row>\n                  <ion-col size=\"4\">\n                    <app-form-item\n                      value={this.arpc.cellDate[0]}\n                      name=\"cellDate.0\"\n                      input-type=\"date\"\n                      date-presentation=\"month-year\"\n                      onFormItemChanged={(ev) => this.inputHandler(ev)}\n                      maxDate={\n                        new Date().getFullYear() +\n                        \"-\" +\n                        (new Date().getMonth() + 1)\n                      }\n                    ></app-form-item>\n                  </ion-col>\n                  <ion-col size=\"4\">\n                    <app-form-item\n                      value={this.arpc.cellDate[1]}\n                      name=\"cellDate.1\"\n                      input-type=\"date\"\n                      date-presentation=\"month-year\"\n                      onFormItemChanged={(ev) => this.inputHandler(ev)}\n                      maxDate={\n                        new Date().getFullYear() +\n                        \"-\" +\n                        (new Date().getMonth() + 1)\n                      }\n                    ></app-form-item>\n                  </ion-col>\n                  <ion-col size=\"4\">\n                    <app-form-item\n                      value={this.arpc.cellDate[2]}\n                      name=\"cellDate.2\"\n                      input-type=\"date\"\n                      date-presentation=\"month-year\"\n                      onFormItemChanged={(ev) => this.inputHandler(ev)}\n                      maxDate={\n                        new Date().getFullYear() +\n                        \"-\" +\n                        (new Date().getMonth() + 1)\n                      }\n                    ></app-form-item>\n                  </ion-col>\n                </ion-row>\n              </ion-grid>\n            </ion-item>\n            <ion-item>\n              <ion-grid no-padding>\n                <ion-row>\n                  <ion-col>\n                    <my-transl\n                      tag=\"air-mv-range\"\n                      text=\"Air mV Range\"\n                    ></my-transl>\n                    {\" (9-13mV)\"}\n                  </ion-col>\n                </ion-row>\n                <ion-row>\n                  <ion-col size=\"4\">\n                    <app-form-item\n                      label-tag=\"cell\"\n                      label-text=\"Cell\"\n                      appendText=\" #1\"\n                      value={this.arpc.airmVRange[0]}\n                      name=\"airmVRange.0\"\n                      input-type=\"number\"\n                      onFormItemChanged={(ev) => this.inputHandler(ev)}\n                      validator={[\n                        {\n                          name: \"minmaxvalue\",\n                          options: {min: 9, max: 13},\n                        },\n                      ]}\n                    ></app-form-item>\n                  </ion-col>\n                  <ion-col size=\"4\">\n                    <app-form-item\n                      label-tag=\"cell\"\n                      label-text=\"Cell\"\n                      appendText=\" #2\"\n                      value={this.arpc.airmVRange[1]}\n                      name=\"airmVRange.1\"\n                      input-type=\"number\"\n                      onFormItemChanged={(ev) => this.inputHandler(ev)}\n                      validator={[\n                        {\n                          name: \"minmaxvalue\",\n                          options: {min: 9, max: 13},\n                        },\n                      ]}\n                    ></app-form-item>\n                  </ion-col>\n                  <ion-col size=\"4\">\n                    <app-form-item\n                      label-tag=\"cell\"\n                      label-text=\"Cell\"\n                      appendText=\" #3\"\n                      value={this.arpc.airmVRange[2]}\n                      name=\"airmVRange.2\"\n                      input-type=\"number\"\n                      onFormItemChanged={(ev) => this.inputHandler(ev)}\n                      validator={[\n                        {\n                          name: \"minmaxvalue\",\n                          options: {min: 9, max: 13},\n                        },\n                      ]}\n                    ></app-form-item>\n                  </ion-col>\n                </ion-row>\n              </ion-grid>\n            </ion-item>\n            <ion-item>\n              <ion-label>\n                <my-transl tag=\"hud-batt-ok\" text=\"HUD Batt (red 30sec=Low)\" />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"battHUD\", ev)}\n                checked={this.arpc.battHUD}\n              ></ion-toggle>\n            </ion-item>\n            <app-form-item\n              label-tag=\"int-batt-ok\"\n              label-text=\"INT. Batt (>3.28/1.3V)\"\n              labelPosition=\"fixed\"\n              value={this.arpc.battINT}\n              name=\"battINT\"\n              input-type=\"number\"\n              onFormItemChanged={(ev) => this.inputHandler(ev)}\n            ></app-form-item>\n            <app-form-item\n              label-tag=\"ext-batt-ok\"\n              label-text=\"EXT. Batt (>6.6/8.4V)\"\n              labelPosition=\"fixed\"\n              value={this.arpc.battEXT}\n              name=\"battEXT\"\n              input-type=\"number\"\n              onFormItemChanged={(ev) => this.inputHandler(ev)}\n            ></app-form-item>\n            <ion-item>\n              <ion-label>\n                <my-transl\n                  tag=\"ctrl-setpoints-ok\"\n                  text=\"Ctrl Setpoints, Settings, Gases\"\n                />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"settingsDone\", ev)}\n                checked={this.arpc.settingsDone}\n              ></ion-toggle>\n            </ion-item>\n            <ion-item-divider>\n              <my-transl\n                tag=\"scrubber-preparation\"\n                text=\"SCRUBBER PREPARATION\"\n              />\n            </ion-item-divider>\n            <app-form-item\n              label-tag=\"ace-180min\"\n              label-text=\"Absorbent Canister Endurance (ACE) (180min nominal)\"\n              labelPosition=\"fixed\"\n              value={this.arpc.scrubberTime}\n              name=\"scrubberTime\"\n              input-type=\"number\"\n              onFormItemChanged={(ev) => this.inputHandler(ev)}\n              validator={[\n                {\n                  name: \"minmaxvalue\",\n                  options: {min: 60, max: 300},\n                },\n              ]}\n            ></app-form-item>\n            <ion-item>\n              <ion-label>\n                <my-transl tag=\"lid-checks\" text=\"Lid and Lid O-Ring Checks\" />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"lidCheck\", ev)}\n                checked={this.arpc.lidCheck}\n              ></ion-toggle>\n            </ion-item>\n            <ion-item>\n              <ion-label>\n                <my-transl tag=\"loop-checks\" text=\"Loop Valves Checks\" />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"loopCheck\", ev)}\n                checked={this.arpc.loopCheck}\n              ></ion-toggle>\n            </ion-item>\n            <ion-item>\n              <ion-label>\n                <my-transl\n                  tag=\"negative-pressure-test\"\n                  text=\"Negative Pressure Test\"\n                />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"negativePressCheck\", ev)}\n                checked={this.arpc.negativePressCheck}\n              ></ion-toggle>\n            </ion-item>\n            <ion-item>\n              <ion-label>\n                <my-transl tag=\"o2-pressure-test\" text=\"O2 SPG Pressure Test\" />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"o2LeakTest\", ev)}\n                checked={this.arpc.o2LeakTest}\n              ></ion-toggle>\n            </ion-item>\n            <ion-item>\n              <ion-label>\n                <my-transl\n                  tag=\"positive-pressure-test\"\n                  text=\"Positive Pressure Test\"\n                />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"positivePressCheck\", ev)}\n                checked={this.arpc.positivePressCheck}\n              ></ion-toggle>\n            </ion-item>\n            <ion-item>\n              <ion-label>\n                <my-transl\n                  tag=\"diluent-pressure-test\"\n                  text=\"Diluent SPG Pressure Test\"\n                />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"diluentLeakTest\", ev)}\n                checked={this.arpc.diluentLeakTest}\n              ></ion-toggle>\n            </ion-item>\n            <ion-item-divider class=\"lightgrey\">\n              <my-transl tag=\"calibration\" text=\"CALIBRATION\" />\n            </ion-item-divider>\n            <ion-item>\n              <ion-label>\n                <my-transl tag=\"open-o2-valve\" text=\"Open O2 Valve\" />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"openO2Valve\", ev)}\n                checked={this.arpc.openO2Valve}\n              ></ion-toggle>\n            </ion-item>\n            <ion-item>\n              <ion-label>\n                <my-transl tag=\"loop-in-cc\" text=\"Loop in CC mode\" />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"loopInCC\", ev)}\n                checked={this.arpc.loopInCC}\n              ></ion-toggle>\n            </ion-item>\n            <ion-item>\n              <ion-label>\n                <my-transl tag=\"hud-on\" text=\"Turn HUD on\" />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"hudOn\", ev)}\n                checked={this.arpc.hudOn}\n              ></ion-toggle>\n            </ion-item>\n            <ion-item>\n              <ion-label>\n                <my-transl\n                  tag=\"calibrate-controller\"\n                  text=\"Calibrate Controller\"\n                />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"calController\", ev)}\n                checked={this.arpc.calController}\n              ></ion-toggle>\n            </ion-item>\n            <ion-item>\n              <ion-label>\n                <my-transl tag=\"calibrate-hud\" text=\"Calibrate HUD\" />\n              </ion-label>\n              <ion-toggle\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.updateParam(\"calHUD\", ev)}\n                checked={this.arpc.calHUD}\n              ></ion-toggle>\n            </ion-item>\n            <ion-item>\n              <ion-grid no-padding>\n                <ion-row>\n                  <ion-col>\n                    <my-transl tag=\"o2-cal-mv\" text=\"O2 Calibration mV\" />\n                  </ion-col>\n                </ion-row>\n                <ion-row>\n                  <ion-col size=\"4\">\n                    <app-form-item\n                      label-tag=\"cell\"\n                      label-text=\"Cell\"\n                      appendText=\" #1\"\n                      value={this.arpc.o2mVRange[0]}\n                      name=\"o2mVRange.0\"\n                      input-type=\"number\"\n                      onFormItemChanged={(ev) => this.inputHandler(ev)}\n                    ></app-form-item>\n                  </ion-col>\n                  <ion-col size=\"4\">\n                    <app-form-item\n                      label-tag=\"cell\"\n                      label-text=\"Cell\"\n                      appendText=\" #2\"\n                      value={this.arpc.o2mVRange[1]}\n                      name=\"o2mVRange.1\"\n                      input-type=\"number\"\n                      onFormItemChanged={(ev) => this.inputHandler(ev)}\n                    ></app-form-item>\n                  </ion-col>\n                  <ion-col size=\"4\">\n                    <app-form-item\n                      label-tag=\"cell\"\n                      label-text=\"Cell\"\n                      appendText=\" #3\"\n                      value={this.arpc.o2mVRange[2]}\n                      name=\"o2mVRange.2\"\n                      input-type=\"number\"\n                      onFormItemChanged={(ev) => this.inputHandler(ev)}\n                    ></app-form-item>\n                  </ion-col>\n                </ion-row>\n                <ion-row>\n                  <ion-col size=\"4\">\n                    <ion-note\n                      no-lines\n                      no-padding\n                      no-margin\n                      class={\n                        \"cell-note \" +\n                        (round(\n                          ((this.arpc.o2mVRange[0] -\n                            this.arpc.airmVRange[0] * 4.76) /\n                            (this.arpc.airmVRange[0] * 4.76)) *\n                            100,\n                          2\n                        ) < -10\n                          ? \"red-color\"\n                          : \"\")\n                      }\n                    >\n                      {round(this.arpc.airmVRange[0] * 4.76, 2)} (\n                      {round(\n                        ((this.arpc.o2mVRange[0] -\n                          this.arpc.airmVRange[0] * 4.76) /\n                          (this.arpc.airmVRange[0] * 4.76)) *\n                          100,\n                        2\n                      )}\n                      %)\n                    </ion-note>\n                  </ion-col>\n                  <ion-col size=\"4\">\n                    <ion-note\n                      no-lines\n                      no-padding\n                      no-margin\n                      class={\n                        \"cell-note \" +\n                        (round(\n                          ((this.arpc.o2mVRange[1] -\n                            this.arpc.airmVRange[1] * 4.76) /\n                            (this.arpc.airmVRange[1] * 4.76)) *\n                            100,\n                          2\n                        ) < -10\n                          ? \"red-color\"\n                          : \"\")\n                      }\n                    >\n                      {round(this.arpc.airmVRange[1] * 4.76, 2)} (\n                      {round(\n                        ((this.arpc.o2mVRange[1] -\n                          this.arpc.airmVRange[1] * 4.76) /\n                          (this.arpc.airmVRange[1] * 4.76)) *\n                          100,\n                        2\n                      )}\n                      %)\n                    </ion-note>\n                  </ion-col>\n                  <ion-col size=\"4\">\n                    <ion-note\n                      no-lines\n                      no-padding\n                      no-margin\n                      class={\n                        \"cell-note \" +\n                        (round(\n                          ((this.arpc.o2mVRange[2] -\n                            this.arpc.airmVRange[2] * 4.76) /\n                            (this.arpc.airmVRange[2] * 4.76)) *\n                            100,\n                          2\n                        ) < -10\n                          ? \"red-color\"\n                          : \"\")\n                      }\n                    >\n                      {round(this.arpc.airmVRange[2] * 4.76, 2)} (\n                      {round(\n                        ((this.arpc.o2mVRange[2] -\n                          this.arpc.airmVRange[2] * 4.76) /\n                          (this.arpc.airmVRange[2] * 4.76)) *\n                          100,\n                        2\n                      )}\n                      %)\n                    </ion-note>\n                  </ion-col>\n                </ion-row>\n              </ion-grid>\n            </ion-item>\n            <ion-item-divider color=\"white\" class=\"lightgrey\">\n              <my-transl tag=\"gas-pressure-status\" text=\"GAS PRESSURE STATUS\" />\n            </ion-item-divider>\n            <app-form-item\n              label-tag=\"o2-ip\"\n              label-text=\"O2 IP\"\n              appendText=\" (7-7.5bar)\"\n              labelPosition=\"fixed\"\n              value={this.arpc.o2IP}\n              name=\"o2IP\"\n              input-type=\"number\"\n              onFormItemChanged={(ev) => this.inputHandler(ev)}\n              validator={[\n                {\n                  name: \"minmaxvalue\",\n                  options: {min: 6.5, max: 8},\n                },\n              ]}\n            ></app-form-item>\n            <app-form-item\n              label-tag=\"diluent-ip\"\n              label-text=\"Diluent IP\"\n              appendText=\" (9-10bar)\"\n              labelPosition=\"fixed\"\n              value={this.arpc.dilIP}\n              name=\"dilIP\"\n              input-type=\"number\"\n              onFormItemChanged={(ev) => this.inputHandler(ev)}\n              validator={[\n                {\n                  name: \"minmaxvalue\",\n                  options: {min: 8.5, max: 10.5},\n                },\n              ]}\n            ></app-form-item>\n            <app-form-item\n              label-tag=\"bailout-reserve\"\n              label-text=\"Bailout-Reserve\"\n              labelPosition=\"fixed\"\n              value={this.arpc.bailout}\n              name=\"bailout\"\n              input-type=\"number\"\n              onFormItemChanged={(ev) => this.inputHandler(ev)}\n            ></app-form-item>\n          </ion-col>\n        </ion-row>\n\n        <ion-row>\n          <ion-col>\n            <div text-justify>\n              <h4>\n                CHAOS (Critical Control Checks conducted during the Pre-Breathe)\n              </h4>\n              <p>\n                During the CHAOS prebreathe, a number of Critical Control Checks\n                (CCC) are conducted.\n              </p>\n              <ul>\n                <li>\n                  CONTROLLER\n                  <ul>\n                    <li>Controller operation and display</li>\n                    <li>Oxygen sensor operation and pO2 readings</li>\n                    <li>Solenoid operation</li>\n                    <li>Oxygen supply regulator operation</li>\n                  </ul>\n                </li>\n                <li>\n                  HUD\n                  <ul>\n                    <li>HUD display, operation and calibration accuracy</li>\n                  </ul>\n                </li>\n                <li>\n                  ADV\n                  <ul>\n                    <li>Supply valve status</li>\n                    <li>ADV operation</li>\n                    <li>OPV operation</li>\n                    <li>Oxygen sensor operation and pO2 readings</li>\n                    <li>Solenoid operation</li>\n                    <li>Oxygen supply regulator operation</li>\n                    <li>Diluent supply pressure verification</li>\n                  </ul>\n                </li>\n                <li>\n                  OXYGEN\n                  <ul>\n                    <li>Supply valve status</li>\n                    <li>MAV operation</li>\n                    <li>Oxygen sensor operation and pO2 readings</li>\n                    <li>Oxygen supply pressure verification</li>\n                  </ul>\n                </li>\n                <li>\n                  SYSTEM\n                  <ul>\n                    <li>Controller operation and display</li>\n                    <li>Oxygen sensor operation and pO2 readings</li>\n                    <li>Solenoid operation</li>\n                    <li>Oxygen supply regulator operation</li>\n                    <li>Sofnolime warmup</li>\n                    <li>Scrubber operation (symptoms unlikely)</li>\n                    <li>Loop check valve operation</li>\n                  </ul>\n                </li>\n              </ul>\n              <h6>C – Controller</h6>\n              <ul>\n                <li>pO2 stable ± 0.7</li>\n                <li>Setpoint switch ⇨ 1.2</li>\n                <li>When pO2 increases, setpoint switch ⇨ 0.7</li>\n              </ul>\n              <h6>H – HUD</h6>\n              <ul>\n                <li>Corresponds with CONTROLLER pO2’s</li>\n              </ul>\n              <h6>A – ADV</h6>\n              <ul>\n                <li>Flow check right post</li>\n                <li>\n                  Locate and keep counter lung OPV in open position using right\n                  hand\n                </li>\n                <li>\n                  Purge the ADV for five seconds to flush using left hand. Stop\n                  purging.\n                </li>\n                <li>When pO2 back at setpoint, release counter lung OPV</li>\n                <li>Verify diluent pressure</li>\n              </ul>\n              <h6>O – OXYGEN</h6>\n              <ul>\n                <li>Flow check oxygen cylinder valve</li>\n                <li>Check oxygen pressure gauge</li>\n                <li>Exhale loop volume through nose</li>\n                <li>Add O2 using MAV to compensate for volume exhaled</li>\n                <li>Repeat three times</li>\n                <li>Note SPG pressure and pressure fluctuations</li>\n              </ul>\n              <h6>S – SYSTEM STABILITY</h6>\n              <ul>\n                <li>Prebreathe the unit for 4 minutes</li>\n                <li>Observe system functions and operations</li>\n                <li>Monitor for CO2 symptom onset (unlikely)</li>\n              </ul>\n            </div>\n          </ion-col>\n        </ion-row>\n      </div>\n    );\n  }\n}\n","app-decoplanner-plan {\n  width: 100%;\n}\n","import {\n  Component,\n  h,\n  Prop,\n  State,\n  Element,\n  Event,\n  EventEmitter,\n} from \"@stencil/core\";\nimport {isPlatform, popoverController} from \"@ionic/core\";\n\n//import { Config } from '../../../../providers/config';\nimport {cloneDeep, filter, find, last, min, orderBy} from \"lodash\";\n//import { LicenceCheckProvider } from '../../../../providers/licence-check';\n//import { ARPCModel } from '../../../../models/dive/arpc';\nimport {DecoplannerDive} from \"../../../../../interfaces/udive/planner/decoplanner-dive\";\nimport {DivePlan} from \"../../../../../services/udive/planner/dive-plan\";\nimport {Gas} from \"../../../../../interfaces/udive/planner/gas\";\nimport {GasModel} from \"../../../../../interfaces/udive/planner/gas-model\";\nimport {DecoplannerParameters} from \"../../../../../interfaces/udive/planner/decoplanner-parameters\";\nimport {DiveConfiguration} from \"../../../../../interfaces/udive/planner/dive-configuration\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {UserService} from \"../../../../../services/common/user\";\nimport {DiveSitesService} from \"../../../../../services/udive/diveSites\";\nimport {MapDataDivingCenter} from \"../../../../../interfaces/udive/diving-center/divingCenter\";\nimport {DivingCentersService} from \"../../../../../services/udive/divingCenters\";\nimport {SystemService} from \"../../../../../services/common/system\";\nimport {RouterService} from \"../../../../../services/common/router\";\nimport {MapDataDiveSite} from \"../../../../../interfaces/udive/dive-site/diveSite\";\nimport {Environment} from \"../../../../../global/env\";\nimport {format} from \"date-fns\";\n\n@Component({\n  tag: \"app-decoplanner-plan\",\n  styleUrl: \"app-decoplanner-plan.scss\",\n})\nexport class AppDecoplannerPlan {\n  @Element() el: HTMLElement;\n  @Event() updateParamsEvent: EventEmitter<DecoplannerParameters>;\n\n  @Prop() diveDataToShare: any;\n  @Prop() planner? = false;\n  @State() segment = \"levels\";\n  @State() dive: DecoplannerDive = new DecoplannerDive();\n  @State() updateView = true;\n\n  user: any;\n  dives: Array<DecoplannerDive>;\n  screenWidth: number;\n  screenHeight: number;\n  index: number;\n  divePlan: DivePlan;\n  stdGases: Array<GasModel>;\n  stdDecoGases: Array<GasModel>;\n  stdConfigurations: Array<DiveConfiguration> = [];\n  parameters: DecoplannerParameters;\n  loading: any;\n  confSelectOptions: any;\n  diveConfiguration: DiveConfiguration;\n  allowSelectConfiguration = false;\n  segmentTitles: {\n    location: string;\n    date: string;\n    surface: string;\n    levels: string;\n    deco: string;\n  };\n  showArpc = false;\n  sitesList: MapDataDiveSite[] = [];\n  divingCentersList: MapDataDivingCenter[] = [];\n  @State() diveSite: MapDataDiveSite;\n\n  async componentWillLoad() {\n    this.diveParamsUpdate();\n    this.segmentTitles = {\n      location: TranslationService.getTransl(\"location\", \"Location\"),\n      date: TranslationService.getTransl(\"date\", \"Date\"),\n      surface: TranslationService.getTransl(\"surface-time\", \"Surface Time\"),\n      levels: TranslationService.getTransl(\"levels\", \"Levels\"),\n      deco: TranslationService.getTransl(\"deco-gases\", \"Deco Gases\"),\n    };\n    this.confSelectOptions = {\n      title: TranslationService.getTransl(\n        \"dive-configurations\",\n        \"Dive Configurations\"\n      ),\n      subTitle: TranslationService.getTransl(\n        \"dive-configuration-select\",\n        \"Select your dive configuration\"\n      ),\n      mode: \"md\",\n    };\n    this.sitesList = DiveSitesService.diveSitesList;\n    this.divingCentersList = DivingCentersService.divingCentersList;\n  }\n\n  diveParamsUpdate() {\n    const params = this.diveDataToShare;\n    this.divePlan = params.divePlan;\n    this.index = params.index;\n    //this.licence = params.licence;\n    this.stdGases = params.stdGases;\n    this.stdDecoGases = params.stdDecoGases;\n    this.stdConfigurations = params.stdConfigurations;\n    this.user = params.user;\n    this.findConfig();\n  }\n\n  findDiveSite() {\n    if (this.dive.diveSiteId) {\n      this.diveSite = this.sitesList.find(\n        (site) => site.id === this.dive.diveSiteId\n      );\n      this.setSelectDivingCenters();\n    }\n  }\n\n  async openSearchSite() {\n    const popover = await popoverController.create({\n      component: \"popover-search-dive-site\",\n      translucent: true,\n    });\n    popover.onDidDismiss().then((ev) => {\n      const siteId = ev.data;\n      this.dive.diveSiteId = siteId;\n      this.findDiveSite();\n    });\n    popover.present();\n  }\n\n  setSelectDivingCenters() {\n    const selectDCElement: HTMLIonSelectElement = this.el.querySelector(\n      \"#selectDivingCenter\"\n    );\n    const customDCPopoverOptions = {\n      header: TranslationService.getTransl(\"diving-center\", \"Diving Center\"),\n    };\n\n    selectDCElement.interfaceOptions = customDCPopoverOptions;\n    //remove previously defined options\n    const selectDCOptions = Array.from(\n      selectDCElement.getElementsByTagName(\"ion-select-option\")\n    );\n    selectDCOptions.map((option) => {\n      selectDCElement.removeChild(option);\n    });\n    if (this.diveSite.divingCenters && this.diveSite.divingCenters.length > 0) {\n      selectDCElement.placeholder = TranslationService.getTransl(\n        \"select\",\n        \"Select\"\n      );\n      this.diveSite.divingCenters.map((dcId) => {\n        const selectOption = document.createElement(\"ion-select-option\");\n        const dc = this.divingCentersList.find((dc) => dc.id === dcId);\n        selectOption.value = dcId;\n        selectOption.textContent = dc.displayName;\n        selectDCElement.appendChild(selectOption);\n      });\n      selectDCElement.disabled = false;\n    } else {\n      selectDCElement.placeholder = TranslationService.getTransl(\n        \"no-divecenters\",\n        \"No Diving Centers available for this site\"\n      );\n      this.dive.divingCenterId = \"\";\n      selectDCElement.disabled = true;\n    }\n    this.updateView = !this.updateView;\n  }\n\n  findConfig() {\n    //find in std configs\n    let findConf = find(this.stdConfigurations, this.divePlan.configuration);\n    if (!findConf) {\n      //user changed the configuration - search by name\n      findConf = find(this.stdConfigurations, {\n        stdName: this.divePlan.configuration.stdName,\n      });\n      //add modified configuration in the list\n      let updatedConf = cloneDeep(this.divePlan.configuration);\n      updatedConf.stdName = updatedConf.stdName;\n      //check if already added in a previous call\n      findConf = find(this.stdConfigurations, {stdName: updatedConf.stdName});\n      if (!findConf) {\n        this.stdConfigurations.push(updatedConf);\n        findConf = updatedConf;\n      }\n    }\n    this.diveConfiguration = findConf;\n    this.showArpc =\n      this.diveConfiguration.parameters.configuration == \"CCR\" &&\n      ((this.dive.diveSiteId && this.diveDataToShare.showDiveSite) ||\n        this.diveDataToShare.showPositionTab); //show only in log book\n    this.parameters = this.divePlan.configuration.parameters;\n    if (this.stdDecoGases) {\n      this.stdDecoGases.forEach((gas) => {\n        //update setpoint according to parameters\n        if (gas.O2 == 100) {\n          gas.ppO2 = this.parameters.oxygenppO2;\n        } else {\n          gas.ppO2 = this.parameters.decoppO2;\n        }\n      });\n    }\n    this.dive = this.divePlan.dives[this.index];\n    this.updateView = !this.updateView;\n  }\n\n  updateParams() {\n    this.findConfig();\n    this.updateView = !this.updateView;\n    this.updateParamsEvent.emit(this.parameters);\n  }\n\n  updateDiveConfiguration(conf) {\n    let updatedConf = cloneDeep(conf);\n    this.divePlan.setConfiguration(updatedConf);\n    this.parameters = this.divePlan.configuration.parameters;\n    //reset deco tanks\n    this.divePlan.resetDecoTanksWithConfiguration(this.dive, updatedConf);\n    this.saveDoc();\n  }\n\n  async editDiveConfig() {\n    let openModal = await UserService.checkLicence(\"configs\", true);\n    if (openModal) {\n      const confModal = await RouterService.openModal(\n        \"modal-dive-configuration\",\n        {\n          diveDataToShare: this.diveDataToShare,\n        }\n      );\n      confModal.onDidDismiss().then((updatedConf) => {\n        updatedConf = updatedConf.data;\n        if (updatedConf) {\n          this.updateDiveConfiguration(updatedConf);\n        }\n      });\n    }\n  }\n\n  saveDoc() {\n    this.updateParams();\n    setTimeout(() => {\n      SystemService.dismissLoading();\n    }, 50);\n  }\n\n  async showLoading() {\n    await SystemService.presentLoading(\"updating\");\n  }\n  async reorderItems(reorder) {\n    await this.showLoading();\n    let element = this.dive.profilePoints[reorder.detail.from];\n    this.dive.profilePoints.splice(reorder.detail.from, 1);\n    this.dive.profilePoints.splice(reorder.detail.to, 0, element);\n    let index = 0;\n    this.dive.profilePoints.map((point) => {\n      point.index = index++;\n      return point;\n    });\n    reorder.detail.complete(this.dive.profilePoints);\n    this.divePlan.updateCalculations();\n    this.dive.profilePoints = orderBy(this.dive.profilePoints, \"index\");\n    this.saveDoc();\n  }\n\n  async presentPopover(event, type, index?) {\n    let page;\n    let update = index >= 0 ? true : false;\n    let level, gas;\n    if (type == \"level\") {\n      page = \"popover-level\";\n      if (update) {\n        level = this.dive.profilePoints[index];\n        level.index = index;\n      }\n      if (!update && this.dive.profilePoints.length > 0) {\n        //insert standard value\n        //get last value of profile points\n        level = last(this.dive.profilePoints);\n        level = cloneDeep(level);\n        level.setValue(\"depth\", level.depth - 10);\n        level.setValue(\"time\", 10);\n        level.setValue(\"updateGas\", false);\n      } else if (index > 0) {\n        level.setValue(\"updateGas\", false);\n      } else {\n        level.setValue(\"updateGas\", true);\n      }\n    } else if (type == \"gas\") {\n      //check deco gases limitation\n      if (\n        this.dive.decoGases.length >=\n        UserService.userRoles.licences.getUserLimitations().maxDecoGases\n      ) {\n        UserService.userRoles.licences.presentLicenceLimitation(\"decogases\");\n        return;\n      }\n\n      page = \"popover-gas\";\n      if (!update) {\n        //insert next standard gas\n        let decoGasDepths = [];\n        for (let i in this.dive.decoGases) {\n          decoGasDepths.push(this.dive.decoGases[i].fromDepth);\n        }\n        let minDecoGasDepth = min(decoGasDepths);\n        let decoGas = find(this.stdDecoGases, (gas) => {\n          return gas.fromDepth < minDecoGasDepth;\n        });\n        if (decoGas) {\n          gas = new Gas(\n            decoGas.O2 / 100,\n            decoGas.He / 100,\n            decoGas.fromDepth,\n            decoGas.ppO2,\n            decoGas.units\n          );\n          gas.setUseAsDiluent(decoGas.useAsDiluent);\n        }\n      } else {\n        gas = this.dive.decoGases[index];\n      }\n    }\n    const data = {\n      gasProp: gas,\n      levelProp: level,\n      stdGasesList: this.stdGases,\n      stdDecoGases: this.stdDecoGases,\n      trimixlicence: UserService.checkLicence(\"trimix\"),\n      ccr: this.parameters.configuration == \"CCR\",\n      parameters: this.parameters,\n    };\n    var cssClass = undefined;\n    //make custom popover for capacitor apps\n    if (isPlatform(\"capacitor\")) {\n      cssClass = \"custom-mobile-popover\";\n      event = null;\n    }\n    const popover = await popoverController.create({\n      component: page,\n      event: event,\n      translucent: true,\n      backdropDismiss: true,\n      cssClass: cssClass,\n      componentProps: data,\n    });\n    popover.present();\n    popover.onDidDismiss().then(async (updatedData: any) => {\n      updatedData = updatedData.data;\n      if (updatedData) {\n        await this.showLoading();\n        if (type == \"level\") {\n          if (update) {\n            //update level\n            this.divePlan.updateDiveProfilePoint(\n              this.dive,\n              updatedData.index,\n              updatedData.depth,\n              updatedData.time,\n              updatedData.o2 / 100,\n              updatedData.he / 100,\n              updatedData.setpoint\n            );\n          } else {\n            //add new\n            this.divePlan.addDiveProfilePoint(\n              this.dive,\n              updatedData.depth,\n              updatedData.time,\n              updatedData.o2 / 100,\n              updatedData.he / 100,\n              updatedData.setpoint\n            );\n          }\n        } else if (type == \"gas\") {\n          if (update) {\n            //update gas\n            this.divePlan.updateDiveDecoGas(\n              this.dive,\n              index,\n              updatedData.o2 / 100,\n              updatedData.he / 100,\n              updatedData.fromDepth,\n              updatedData.ppO2,\n              updatedData.useAsDiluent\n            );\n          } else {\n            //add new\n            this.divePlan.addDiveDecoGas(\n              this.dive,\n              updatedData.o2 / 100,\n              updatedData.he / 100,\n              updatedData.fromDepth,\n              updatedData.ppO2,\n              updatedData.useAsDiluent\n            );\n          }\n        }\n        this.saveDoc();\n      }\n    });\n  }\n\n  async addStdDecoGases() {\n    await this.showLoading();\n\n    let decoGases = filter(this.stdDecoGases, (gas) => {\n      return gas.fromDepth <= this.dive.getDecoStartDepth(); //return all gases below 74% of max depth\n    });\n    this.dive.decoGases = [];\n    decoGases.forEach((gas) => {\n      this.divePlan.addDiveDecoGas(\n        this.dive,\n        gas.O2 / 100,\n        gas.He / 100,\n        gas.fromDepth,\n        gas.ppO2,\n        gas.useAsDiluent\n      );\n    });\n    this.saveDoc();\n  }\n\n  async removeProfilePoint(dive, index) {\n    await this.showLoading();\n    this.divePlan.removeDiveProfilePoint(dive, index);\n    this.saveDoc();\n  }\n\n  async removeDecoGas(dive, index) {\n    await this.showLoading();\n    this.divePlan.removeDiveDecoGas(dive, index);\n    this.saveDoc();\n  }\n\n  segmentChanged(ev) {\n    const segment = ev.detail.value;\n    this.segment = segment;\n    if (segment == \"location\" && Environment.isUdive()) {\n      setTimeout(() => {\n        this.findDiveSite();\n      }, 100);\n    }\n  }\n\n  updateDate(ev) {\n    this.dive.date = new Date(ev.detail.value);\n  }\n\n  updateParam(param, value) {\n    this[param] = value;\n    this.updateParams();\n  }\n\n  updateSurfaceInterval(value) {\n    this.dive.surfaceInterval = value;\n    this.divePlan.updateDates();\n    this.updateParams();\n  }\n\n  updateDiveSite(ev) {\n    this.dive.diveSiteId = ev.detail.value;\n  }\n\n  updateDivingCenter(ev) {\n    this.dive.divingCenterId = ev.detail.value;\n  }\n\n  saveArpc(ev) {\n    this.dive.arpc = ev.detail;\n    this.updateView = !this.updateView;\n  }\n\n  render() {\n    return [\n      <ion-content class=\"slide-container\">\n        <div class=\"ion-no-padding\">\n          <ion-row>\n            <ion-col>\n              <ion-segment\n                mode=\"ios\"\n                color={Environment.getAppColor()}\n                onIonChange={(ev) => this.segmentChanged(ev)}\n                value={this.segment}\n              >\n                {(this.dive.diveSiteId && this.diveDataToShare.showDiveSite) ||\n                this.diveDataToShare.showPositionTab ? (\n                  <ion-segment-button value=\"location\">\n                    <ion-label>\n                      {this.index == 0\n                        ? Environment.isDecoplanner()\n                          ? this.segmentTitles.date\n                          : this.segmentTitles.location\n                        : this.segmentTitles.surface}\n                    </ion-label>\n                  </ion-segment-button>\n                ) : undefined}\n\n                <ion-segment-button value=\"levels\">\n                  <ion-label>{this.segmentTitles.levels}</ion-label>\n                </ion-segment-button>\n                <ion-segment-button value=\"gases\" layout=\"icon-start\">\n                  <ion-label>{this.segmentTitles.deco}</ion-label>\n                  {this.dive.decoGases.length > 0 ? (\n                    <ion-badge\n                      color={\n                        Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"\n                      }\n                    >\n                      {this.dive.decoGases.length}\n                    </ion-badge>\n                  ) : undefined}\n                </ion-segment-button>\n                {this.showArpc ? (\n                  <ion-segment-button value=\"arpc\" layout=\"icon-start\">\n                    <ion-label>ARPC</ion-label>\n                    <ion-badge\n                      color={\n                        this.dive.arpc && this.dive.arpc.approved\n                          ? \"success\"\n                          : \"danger\"\n                      }\n                    >\n                      <ion-icon\n                        style={{fontSize: \"10px\"}}\n                        name={\n                          this.dive.arpc && this.dive.arpc.approved\n                            ? \"checkmark\"\n                            : \"close\"\n                        }\n                      ></ion-icon>\n                    </ion-badge>\n                  </ion-segment-button>\n                ) : undefined}\n              </ion-segment>\n            </ion-col>\n          </ion-row>\n          {this.segment == \"location\"\n            ? [\n                <ion-row>\n                  <ion-col>\n                    {this.index == 0 ? (\n                      <app-form-item\n                        label-tag=\"dive-date\"\n                        label-text=\"Dive Date\"\n                        value={\n                          this.dive.date ? this.dive.date.toISOString() : null\n                        }\n                        name=\"tripDate\"\n                        input-type=\"date\"\n                        datePresentation=\"date-time\"\n                        lines=\"inset\"\n                        onFormItemChanged={(ev) => this.updateDate(ev)}\n                      ></app-form-item>\n                    ) : (\n                      [\n                        <ion-item>\n                          <my-transl tag=\"dive-date\" text=\"Dive Date\" />\n                          <ion-note slot=\"end\">\n                            {format(this.dive.date, \"dd MMM, yyyy HH:mm\")}\n                          </ion-note>\n                        </ion-item>,\n                        <ion-item>\n                          <ion-icon name=\"time\" slot=\"start\"></ion-icon>\n                          <ion-select\n                            label={TranslationService.getTransl(\n                              \"surface-interval\",\n                              \"Surface Interval\"\n                            )}\n                            onIonChange={(ev) =>\n                              this.updateSurfaceInterval(ev.detail.value)\n                            }\n                            value={this.dive.surfaceInterval}\n                          >\n                            <ion-select-option value={0.5}>\n                              0:30\n                            </ion-select-option>\n                            <ion-select-option value={1}>\n                              1:00\n                            </ion-select-option>\n                            <ion-select-option value={1.5}>\n                              1:30\n                            </ion-select-option>\n                            <ion-select-option value={2}>\n                              2:00\n                            </ion-select-option>\n                            <ion-select-option value={2.5}>\n                              2:30\n                            </ion-select-option>\n                            <ion-select-option value={3}>\n                              3:00\n                            </ion-select-option>\n                            <ion-select-option value={3.5}>\n                              3:30\n                            </ion-select-option>\n                            <ion-select-option value={4}>\n                              4:00\n                            </ion-select-option>\n                            <ion-select-option value={4.5}>\n                              4:30\n                            </ion-select-option>\n                            <ion-select-option value={5}>\n                              5:00\n                            </ion-select-option>\n                            <ion-select-option value={5.5}>\n                              5:30\n                            </ion-select-option>\n                            <ion-select-option value={6}>\n                              6:00\n                            </ion-select-option>\n                            <ion-select-option value={6.5}>\n                              6:30\n                            </ion-select-option>\n                            <ion-select-option value={7}>\n                              7:00\n                            </ion-select-option>\n                            <ion-select-option value={7.5}>\n                              7:30\n                            </ion-select-option>\n                            <ion-select-option value={8}>\n                              8:00\n                            </ion-select-option>\n                            <ion-select-option value={8.5}>\n                              8:30\n                            </ion-select-option>\n                            <ion-select-option value={9}>\n                              9:00\n                            </ion-select-option>\n                            <ion-select-option value={9.5}>\n                              9:30\n                            </ion-select-option>\n                            <ion-select-option value={10}>\n                              10:00\n                            </ion-select-option>\n                            <ion-select-option value={10.5}>\n                              10:30\n                            </ion-select-option>\n                            <ion-select-option value={11}>\n                              11:00\n                            </ion-select-option>\n                            <ion-select-option value={11.5}>\n                              11:30\n                            </ion-select-option>\n                            <ion-select-option value={12}>\n                              12:00\n                            </ion-select-option>\n                          </ion-select>\n                        </ion-item>,\n                      ]\n                    )}\n                  </ion-col>\n                </ion-row>,\n                Environment.isDecoplanner()\n                  ? undefined\n                  : [\n                      <ion-row>\n                        <ion-col>\n                          <ion-item\n                            button\n                            onClick={() => this.openSearchSite()}\n                          >\n                            <ion-input\n                              label={TranslationService.getTransl(\n                                \"dive-site\",\n                                \"Dive Site\"\n                              )}\n                              labelPlacement=\"floating\"\n                              placeholder={TranslationService.getTransl(\n                                \"select-dive-site\",\n                                \"Select Dive Site\"\n                              )}\n                              value={\n                                this.diveSite\n                                  ? this.diveSite.displayName\n                                  : undefined\n                              }\n                            ></ion-input>\n                            <ion-icon\n                              slot=\"end\"\n                              name=\"search-outline\"\n                            ></ion-icon>\n                          </ion-item>\n                        </ion-col>\n                      </ion-row>,\n                      <ion-row>\n                        <ion-col>\n                          <ion-item>\n                            <ion-select\n                              label={TranslationService.getTransl(\n                                \"diving-center\",\n                                \"Diving Center\"\n                              )}\n                              labelPlacement=\"floating\"\n                              id=\"selectDivingCenter\"\n                              onIonChange={(ev) => this.updateDivingCenter(ev)}\n                              disabled={true}\n                              value={this.dive.divingCenterId}\n                            ></ion-select>\n                          </ion-item>\n                        </ion-col>\n                      </ion-row>,\n                    ],\n              ]\n            : undefined}\n          {this.segment == \"levels\" ? (\n            <ion-row>\n              <ion-col>\n                <ion-list class=\"ion-text-wrap\">\n                  <ion-item>\n                    <div slot=\"end\" style={{width: \"1.9em\"}}>\n                      <ion-button\n                        icon-only\n                        color={\n                          Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"\n                        }\n                        fill=\"clear\"\n                        style={{\"--padding-start\": \"0.4em\"}}\n                        onClick={() => this.editDiveConfig()}\n                      >\n                        <ion-icon name=\"create-outline\"></ion-icon>\n                      </ion-button>\n                    </div>\n                    <ion-grid class=\"ion-text-center ion-no-padding\">\n                      <ion-row\n                        class=\"ion-justify-content-center  ion-no-padding\"\n                        onClick={() => this.editDiveConfig()}\n                      >\n                        <ion-col size=\"6\">\n                          <ion-item lines=\"none\">\n                            <my-transl\n                              tag=\"configuration\"\n                              text=\"Configuration\"\n                            />\n                          </ion-item>\n                        </ion-col>\n\n                        <ion-col>\n                          <ion-item lines=\"none\">\n                            {this.allowSelectConfiguration ? (\n                              <ion-select\n                                interfaceOptions={this.confSelectOptions}\n                                onIonChange={(ev) =>\n                                  this.updateDiveConfiguration(ev.detail.value)\n                                }\n                                class=\"select-class\"\n                                value={this.diveConfiguration.stdName}\n                              >\n                                {this.stdConfigurations.map((conf) => (\n                                  <ion-select-option value={conf}>\n                                    {conf.stdName}\n                                  </ion-select-option>\n                                ))}\n                              </ion-select>\n                            ) : (\n                              <ion-label class=\"ion-text-end\">\n                                {this.diveConfiguration.stdName}\n                              </ion-label>\n                            )}\n                          </ion-item>\n                        </ion-col>\n                      </ion-row>\n                    </ion-grid>\n                  </ion-item>\n\n                  <ion-item>\n                    <div slot=\"end\" style={{width: \"1.9em\"}}>\n                      <ion-button\n                        icon-only\n                        fill=\"clear\"\n                        color={\n                          Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"\n                        }\n                        style={{\n                          marginTop: \"10px\",\n                          \"--padding-start\": \"0.4em\",\n                        }}\n                        onClick={(ev) => this.presentPopover(ev, \"level\")}\n                      >\n                        <ion-icon name=\"add-circle\"></ion-icon>\n                      </ion-button>\n                    </div>\n                    <ion-grid class=\"ion-text-center\">\n                      <ion-row\n                        small-capitals\n                        class=\"ion-align-items-center ion-no-padding\"\n                      >\n                        <ion-col>\n                          <ion-text color=\"dark\">\n                            <h6>\n                              <my-transl tag=\"depth\" text=\"Depth\" />\n                            </h6>\n                          </ion-text>\n                        </ion-col>\n                        <ion-col>\n                          <ion-text color=\"dark\">\n                            <h6>\n                              <my-transl tag=\"time\" text=\"Time\" />\n                            </h6>\n                          </ion-text>\n                        </ion-col>\n                        <ion-col>\n                          <ion-text color=\"dark\">\n                            <h6>\n                              O<sub>2</sub>\n                            </h6>\n                          </ion-text>\n                        </ion-col>\n                        <ion-col>\n                          <ion-text color=\"dark\">\n                            <h6>He</h6>\n                          </ion-text>\n                        </ion-col>\n                        {this.parameters.configuration == \"CCR\" ? (\n                          <ion-col>\n                            <ion-text color=\"dark\">\n                              <h6>\n                                <my-transl tag=\"po2\" text=\"pO2\" />\n                              </h6>\n                            </ion-text>\n                          </ion-col>\n                        ) : undefined}\n\n                        <ion-col></ion-col>\n                      </ion-row>\n                    </ion-grid>\n                  </ion-item>\n                  <ion-reorder-group\n                    disabled={false}\n                    onIonItemReorder={(ev) => this.reorderItems(ev)}\n                  >\n                    {this.dive.profilePoints.map((level) => (\n                      <ion-item>\n                        <ion-reorder slot=\"end\"></ion-reorder>\n                        <ion-grid class=\"ion-text-center\">\n                          <ion-row class=\"ion-align-items-center ion-no-padding\">\n                            <ion-col\n                              onClick={(ev) =>\n                                this.presentPopover(ev, \"level\", level.index)\n                              }\n                            >\n                              {level.depth}\n                            </ion-col>\n                            <ion-col\n                              onClick={(ev) =>\n                                this.presentPopover(ev, \"level\", level.index)\n                              }\n                            >\n                              {level.time}\n                            </ion-col>\n                            <ion-col\n                              onClick={(ev) =>\n                                this.presentPopover(ev, \"level\", level.index)\n                              }\n                            >\n                              {level.gas.O2}\n                            </ion-col>\n                            <ion-col\n                              onClick={(ev) =>\n                                this.presentPopover(ev, \"level\", level.index)\n                              }\n                            >\n                              {level.gas.He}\n                            </ion-col>\n                            {this.parameters.configuration == \"CCR\" ? (\n                              <ion-col\n                                onClick={(ev) =>\n                                  this.presentPopover(ev, \"level\", level.index)\n                                }\n                              >\n                                {level.setpoint}\n                              </ion-col>\n                            ) : undefined}\n\n                            <ion-col>\n                              <ion-button\n                                icon-only\n                                fill=\"clear\"\n                                size=\"small\"\n                                color=\"danger\"\n                                disabled={\n                                  level.index == 0 &&\n                                  this.dive.profilePoints.length <= 1\n                                }\n                                onClick={() =>\n                                  this.removeProfilePoint(\n                                    this.dive,\n                                    level.index\n                                  )\n                                }\n                              >\n                                <ion-icon name=\"trash\"></ion-icon>\n                              </ion-button>\n                            </ion-col>\n                          </ion-row>\n                        </ion-grid>\n                      </ion-item>\n                    ))}\n                  </ion-reorder-group>\n                </ion-list>\n              </ion-col>\n            </ion-row>\n          ) : undefined}\n          {this.segment == \"gases\" ? (\n            <ion-row>\n              <ion-col>\n                <ion-list class=\"ion-text-wrap\">\n                  <ion-item>\n                    <ion-grid class=\"ion-text-center ion-no-padding\">\n                      <ion-row small-capitals class=\"ion-no-padding\">\n                        <ion-col>\n                          <ion-text color=\"dark\">\n                            <h6>\n                              <my-transl tag=\"from-depth\" text=\"from Depth\" />\n                            </h6>\n                          </ion-text>\n                        </ion-col>\n                        <ion-col>\n                          <ion-text color=\"dark\">\n                            <h6>\n                              O<sub>2</sub>\n                            </h6>\n                          </ion-text>\n                        </ion-col>\n                        <ion-col>\n                          <ion-text color=\"dark\">\n                            <h6>He</h6>\n                          </ion-text>\n                        </ion-col>\n                        {this.parameters.configuration == \"CCR\" ? (\n                          <ion-col>\n                            <ion-text color=\"dark\">\n                              <h6>\n                                <my-transl tag=\"po2\" text=\"pO2\" />\n                              </h6>\n                            </ion-text>\n                          </ion-col>\n                        ) : undefined}\n\n                        <ion-col class=\"ion-no-padding\">\n                          <ion-row class=\"ion-no-padding\">\n                            <ion-col\n                              class=\"ion-no-padding\"\n                              size={\n                                UserService.userRoles &&\n                                UserService.userRoles.licences.unlimited\n                                  ? \"6\"\n                                  : \"12\"\n                              }\n                            >\n                              <ion-button\n                                icon-only\n                                fill=\"clear\"\n                                color=\"primary\"\n                                onClick={(ev) => this.presentPopover(ev, \"gas\")}\n                                style={{marginTop: \"10px\"}}\n                              >\n                                <ion-icon name=\"add-circle\"></ion-icon>\n                              </ion-button>\n                            </ion-col>\n                            {UserService.userRoles &&\n                            UserService.userRoles.licences.unlimited ? (\n                              <ion-col size=\"6\" class=\"ion-no-padding\">\n                                <ion-button\n                                  icon-only\n                                  fill=\"clear\"\n                                  color=\"secondary\"\n                                  onClick={() => this.addStdDecoGases()}\n                                  style={{marginTop: \"10px\"}}\n                                >\n                                  <ion-icon name=\"color-wand\"></ion-icon>\n                                </ion-button>\n                              </ion-col>\n                            ) : undefined}\n                          </ion-row>\n                        </ion-col>\n                      </ion-row>\n                    </ion-grid>\n                  </ion-item>\n                  {this.dive.decoGases.map((gas, i) => (\n                    <ion-item class=\"ion-text-center\">\n                      <ion-grid class=\"ion-text-center\">\n                        <ion-row class=\"ion-no-padding\">\n                          <ion-col\n                            style={{marginTop: \"5px\"}}\n                            onClick={(ev) => this.presentPopover(ev, \"gas\", i)}\n                          >\n                            {gas.fromDepth}\n                          </ion-col>\n                          <ion-col\n                            style={{marginTop: \"5px\"}}\n                            onClick={(ev) => this.presentPopover(ev, \"gas\", i)}\n                          >\n                            {gas.O2}\n                          </ion-col>\n                          <ion-col\n                            style={{marginTop: \"5px\"}}\n                            onClick={(ev) => this.presentPopover(ev, \"gas\", i)}\n                          >\n                            {gas.He}\n                          </ion-col>\n                          {this.parameters.configuration == \"CCR\" ? (\n                            <ion-col\n                              style={{marginTop: \"5px\"}}\n                              onClick={(ev) =>\n                                this.presentPopover(ev, \"gas\", i)\n                              }\n                            >\n                              {gas.ppO2}{\" \"}\n                              {gas.useAsDiluent ? (\n                                <ion-note>(diluent gas)</ion-note>\n                              ) : undefined}\n                            </ion-col>\n                          ) : undefined}\n\n                          <ion-col>\n                            <ion-button\n                              icon-only\n                              fill=\"clear\"\n                              size=\"small\"\n                              color=\"danger\"\n                              onClick={() => this.removeDecoGas(this.dive, i)}\n                            >\n                              <ion-icon name=\"trash\"></ion-icon>\n                            </ion-button>\n                          </ion-col>\n                        </ion-row>\n                      </ion-grid>\n                    </ion-item>\n                  ))}\n                </ion-list>\n              </ion-col>\n            </ion-row>\n          ) : undefined}\n          {this.segment == \"arpc\" ? (\n            <app-decoplanner-arpc\n              diveDataToShare={this.diveDataToShare}\n              planner={this.planner}\n              onSaveArpc={(arpc) => this.saveArpc(arpc)}\n            ></app-decoplanner-arpc>\n          ) : undefined}\n        </div>\n      </ion-content>,\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]}