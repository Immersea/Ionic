{"version":3,"names":["pageCustomersCss","PageCustomersStyle0","PageCustomers","this","markers","tag","text","disabled","badge","mapLoadingCompletedHandler","mapElement","undefined","componentWillLoad","CustomersService","customersList$","subscribe","async","list","updateList","loading","updateMarkers","createPopoverVisibleCustomers","filterCustomers","ev","filteredCustomersList","detail","length","forEach","customer","locations","location","position","geopoint","marker","collection","CUSTOMERSCOLLECTION","id","displayName","fullName","latitude","longitude","icon","type","name","color","size","clickFn","presentCustomerDetails","push","titles","updateView","loadMap","componentDidLoad","slider","Swiper","speed","spaceBetween","allowTouchMove","autoHeight","on","slideChange","updateAutoHeight","searchToolbar","el","querySelector","customersList","forceFilter","updateSlider","customElements","whenDefined","updateMap","fit","mapContainer","setAttribute","mapHeight","setTimeout","triggerMapResize","fitToBounds","mapBoundsChanged","bounds","visibleCustomers","positions","getLngLat","map","contains","popoverVisibleCustomers","componentProps","popoverController","create","component","selectOptions","selectValueText","selectValueId","placeholder","trigger","triggerAction","translucent","showBackdrop","addEventListener","dismiss","onDidDismiss","then","data","addCustomer","presentCustomerUpdate","update","render","h","key","Environment","getAppColor","searchTitle","orderFields","filterBy","onFilteredList","swiper","updateBadge","noHeader","class","TrasteelService","isCustomerDBAdmin","vertical","horizontal","slot","edge","onClick","showFields","orderBy","returnField","TrasteelFilterService","getMapDocs","onItemClicked","onListChanged","pageId","markersAsFeature","onEmitMapBounds"],"sources":["src/components/trasteel/pages/crm/page-customers/page-customers.scss?tag=page-customers","src/components/trasteel/pages/crm/page-customers/page-customers.tsx"],"sourcesContent":["page-customers {\n  /* Component styles go here */\n}\n","import {Component, Element, Listen, State, h} from \"@stencil/core\";\nimport {\n  CUSTOMERSCOLLECTION,\n  CustomersService,\n} from \"../../../../../services/trasteel/crm/customers\";\nimport {MapDataCustomer} from \"../../../../../interfaces/trasteel/customer/customer\";\nimport {TrasteelFilterService} from \"../../../../../services/trasteel/common/trs-db-filter\";\nimport {TrasteelService} from \"../../../../../services/trasteel/common/services\";\nimport Swiper from \"swiper\";\nimport {Marker} from \"../../../../../components\";\nimport {mapHeight} from \"../../../../../helpers/utils\";\nimport {Environment} from \"../../../../../global/env\";\nimport {LngLatBounds} from \"mapbox-gl\";\nimport {popoverController} from \"@ionic/core\";\n\n@Component({\n  tag: \"page-customers\",\n  styleUrl: \"page-customers.scss\",\n})\nexport class PageCustomers {\n  @Element() el: HTMLElement;\n  @State() customersList: MapDataCustomer[] = [];\n  @State() filteredCustomersList: MapDataCustomer[] = [];\n  @State() visibleCustomers: MapDataCustomer[] = [];\n  @State() loading = true;\n  @State() titles = [\n    {tag: \"list\", text: \"List\", disabled: false, badge: 0},\n    {tag: \"map\", text: \"Map\", disabled: false, badge: 0},\n  ];\n  @State() slider: Swiper;\n  markers: Marker[] = [];\n  mapElement: HTMLAppMapElement;\n  searchToolbar: any;\n  popoverVisibleCustomers: HTMLIonPopoverElement;\n\n  @State() updateView = false;\n  @Listen(\"mapLoadingCompleted\")\n  mapLoadingCompletedHandler() {\n    //necessary to recenter map in the correct position\n    this.mapElement ? this.mapElement[\"triggerMapResize\"]() : undefined;\n  }\n\n  componentWillLoad() {\n    CustomersService.customersList$.subscribe(\n      async (list: MapDataCustomer[]) => {\n        this.updateList(list);\n        this.loading = false;\n        this.updateMarkers();\n      }\n    );\n    this.createPopoverVisibleCustomers();\n  }\n\n  filterCustomers(ev) {\n    this.filteredCustomersList = ev.detail;\n    this.updateMarkers();\n  }\n\n  updateMarkers() {\n    this.markers = [];\n    if (this.filteredCustomersList.length > 0) {\n      this.filteredCustomersList.forEach((customer) => {\n        if (customer.locations.length > 0) {\n          customer.locations.forEach((location) => {\n            if (location && location.position && location.position.geopoint) {\n              const marker = {\n                collection: CUSTOMERSCOLLECTION,\n                id: customer.id,\n                displayName: customer.fullName,\n                position: location.position,\n                latitude: location.position.geopoint.latitude,\n                longitude: location.position.geopoint.longitude,\n                icon: {\n                  type: \"ionicon\",\n                  name: \"location\", //CustomerService.locationsTypes(location.type)[0].locationName,\n                  color: \"secondary\",\n                  size: \"small\",\n                },\n                clickFn: () =>\n                  CustomersService.presentCustomerDetails(customer.id),\n              };\n\n              this.markers.push(marker);\n            }\n          });\n        }\n      });\n      this.titles[0].badge = this.markers.length;\n      this.updateView = !this.updateView;\n      if (this.markers.length > 0) this.loadMap();\n    }\n  }\n\n  componentDidLoad() {\n    this.slider = new Swiper(\".slider-customers-map\", {\n      speed: 400,\n      spaceBetween: 100,\n      allowTouchMove: false,\n      autoHeight: true,\n      on: {\n        slideChange: () => {\n          this.slider ? this.slider.updateAutoHeight() : null;\n        },\n      },\n    });\n    if (this.markers.length > 0) this.loadMap();\n    this.searchToolbar = this.el.querySelector(\n      \"#searchToolbar\"\n    ) as HTMLAppSearchToolbarElement;\n    this.updateList(this.customersList);\n  }\n\n  updateList(list) {\n    this.customersList = list;\n    this.searchToolbar ? this.searchToolbar.forceFilter(list) : undefined;\n    this.updateSlider();\n  }\n\n  async loadMap() {\n    //reset map height inside slide\n    await customElements.whenDefined(\"app-map\");\n    this.mapElement = this.el.querySelector(\"#map\");\n    this.updateMap(true);\n    this.updateSlider();\n  }\n\n  updateMap(fit = false) {\n    if (this.mapElement) {\n      const mapContainer = this.el.querySelector(\"#map-container\");\n      mapContainer.setAttribute(\n        \"style\",\n        \"height: \" + (mapHeight(null) - 40) + \"px\"\n      );\n      setTimeout(() => {\n        this.mapElement.triggerMapResize();\n        fit ? this.mapElement.fitToBounds(this.markers) : undefined;\n      });\n    }\n  }\n\n  mapBoundsChanged(ev) {\n    const bounds: LngLatBounds = ev.detail;\n    this.visibleCustomers = [];\n    this.filteredCustomersList.forEach((customer) => {\n      var positions = customer.getLngLat();\n      positions.map((position) => {\n        if (bounds.contains(position)) {\n          this.visibleCustomers.push(customer);\n        }\n      });\n    });\n    this.titles[1].badge = this.visibleCustomers.length;\n    this.popoverVisibleCustomers.componentProps[\"selectOptions\"] =\n      this.visibleCustomers;\n    this.updateView = !this.updateView;\n  }\n\n  async createPopoverVisibleCustomers() {\n    this.popoverVisibleCustomers = await popoverController.create({\n      component: \"popover-select-search\",\n      componentProps: {\n        selectOptions: this.visibleCustomers,\n        selectValueText: [\"fullName\"],\n        selectValueId: \"id\",\n        placeholder: \"customer\",\n      },\n      trigger: \"hover-trigger\",\n      triggerAction: \"hover\",\n      translucent: true,\n      showBackdrop: false,\n    });\n    this.popoverVisibleCustomers.addEventListener(\"mouseleave\", () => {\n      this.popoverVisibleCustomers.dismiss();\n    });\n    this.popoverVisibleCustomers.onDidDismiss().then((ev) => {\n      if (ev && ev.data) {\n        CustomersService.presentCustomerDetails(ev.data.id);\n      } else {\n        //render again new popover\n        this.createPopoverVisibleCustomers();\n      }\n    });\n  }\n\n  addCustomer() {\n    CustomersService.presentCustomerUpdate();\n  }\n\n  updateSlider() {\n    this.updateView = !this.updateView;\n    setTimeout(() => {\n      this.updateMap();\n      //reset slider height to show address\n      this.slider ? this.slider.update() : undefined;\n    }, 100);\n  }\n\n  render() {\n    return [\n      <ion-header>\n        <app-navbar\n          tag=\"customers\"\n          text=\"Customers\"\n          color={Environment.getAppColor()}\n        ></app-navbar>\n        <app-search-toolbar\n          id=\"searchToolbar\"\n          searchTitle=\"customers\"\n          list={this.customersList}\n          orderFields={[\"fullName\"]}\n          color={Environment.getAppColor()}\n          placeholder=\"Search by name\"\n          filterBy={[\"fullName\"]}\n          onFilteredList={(ev) => this.filterCustomers(ev)}\n        ></app-search-toolbar>\n        <app-header-segment-toolbar\n          color={Environment.getAppColor()}\n          swiper={this.slider}\n          titles={this.titles}\n          updateBadge={this.updateView}\n          noHeader\n        ></app-header-segment-toolbar>\n      </ion-header>,\n      <ion-content class=\"slides\">\n        {TrasteelService.isCustomerDBAdmin() ? (\n          <ion-fab vertical=\"top\" horizontal=\"end\" slot=\"fixed\" edge>\n            <ion-fab-button\n              size=\"small\"\n              onClick={() => this.addCustomer()}\n              color={Environment.getAppColor()}\n            >\n              <ion-icon name=\"add\"></ion-icon>\n            </ion-fab-button>\n          </ion-fab>\n        ) : undefined}\n        <swiper-container class=\"slider-customers-map swiper\">\n          <swiper-wrapper class=\"swiper-wrapper\">\n            {/** LIST */}\n            <swiper-slide class=\"swiper-slide\">\n              <app-infinite-scroll\n                list={this.filteredCustomersList}\n                loading={this.loading}\n                showFields={[\"fullName\"]}\n                orderBy={[\"fullName\"]}\n                returnField=\"id\"\n                icon={\n                  TrasteelFilterService.getMapDocs(CUSTOMERSCOLLECTION).icon\n                    .name\n                }\n                onItemClicked={(ev) =>\n                  CustomersService.presentCustomerDetails(ev.detail)\n                }\n                onListChanged={() => {\n                  this.updateSlider();\n                }}\n              ></app-infinite-scroll>\n            </swiper-slide>\n            {/** MAP */}\n            <swiper-slide class=\"swiper-slide\">\n              <div id=\"map-container\">\n                <app-map\n                  id=\"map\"\n                  pageId=\"customers-list\"\n                  markersAsFeature={true}\n                  markers={this.markers}\n                  onEmitMapBounds={(ev) => this.mapBoundsChanged(ev)}\n                ></app-map>\n              </div>\n              <ion-fab vertical=\"top\" horizontal=\"start\" slot=\"fixed\">\n                <ion-fab-button color=\"trasteel\" id=\"hover-trigger\">\n                  <ion-badge color=\"trasteel\">{this.titles[1].badge}</ion-badge>\n                </ion-fab-button>\n              </ion-fab>\n            </swiper-slide>\n          </swiper-wrapper>\n        </swiper-container>\n      </ion-content>,\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]}