{"version":3,"names":["REVIEWCOLLECTION","ReviewController","createReview","collectionId","reviewedid","itemCollectionId","itemId","item","popover","RouterService","openPopover","editable","reviewedId","onDidDismiss","then","res","data","this","saveReview","showReview","reviewId","allowAnswer","review","getReview","reviewdObj","user","updateReview","id","DatabaseService","getDocument","userId","UserService","getMapDataUserDetails","reviewed","reviewedObj","getOrganiser","getReviews","getReviewSummaryDoc","reviews","totReviews","forEach","async","push","_","orderBy","getDocumentCollection","queryReviews","console","log","USERPROFILECOLLECTION","ref","collection","firestore","queryRef","query","where","limitToLast","getDocs","results","empty","doc","docs","addDocument","reviewIds","undefined","uid","userProfile","updateDocument","reviewItem","getReviewSummary","stars","ReviewService"],"sources":["src/services/common/reviews.ts"],"sourcesContent":["import {DatabaseService} from \"./database\";\nimport {RouterService} from \"./router\";\nimport {UserService, USERPROFILECOLLECTION} from \"./user\";\nimport {\n  Review,\n  ReviewSummary,\n  ReviewSummaryDoc,\n} from \"../../interfaces/common/reviews/review\";\nimport _ from \"lodash\";\nimport {\n  collection,\n  getDocs,\n  limitToLast,\n  orderBy,\n  query,\n  where,\n} from \"firebase/firestore\";\nimport {firestore} from \"../../helpers/firebase\";\n\nexport const REVIEWCOLLECTION = \"reviews\";\n\nexport class ReviewController {\n  async createReview(\n    collectionId: string,\n    reviewedid: string,\n    itemCollectionId?: string,\n    itemId?: string,\n    item?: any\n  ) {\n    const popover = await RouterService.openPopover(\"popover-create-review\", {\n      editable: true,\n      collectionId: collectionId,\n      reviewedId: reviewedid,\n      itemCollectionId: itemCollectionId,\n      itemId: itemId,\n    });\n    popover.onDidDismiss().then((res) => {\n      if (res && res.data) {\n        this.saveReview(res.data, item);\n      }\n    });\n  }\n\n  async showReview(reviewId: string, allowAnswer = false) {\n    const review = await this.getReview(reviewId);\n    const popover = await RouterService.openPopover(\n      \"popover-create-review\",\n      {\n        editable: false,\n        review: review,\n        allowAnswer: allowAnswer,\n      },\n      true\n    );\n    popover.onDidDismiss().then((res) => {\n      if (res && res.data) {\n        const review = res.data;\n        delete review.reviewdObj;\n        delete review.user;\n        this.updateReview(reviewId, res.data);\n      }\n    });\n  }\n\n  async getReview(id): Promise<Review> {\n    const review = await DatabaseService.getDocument(REVIEWCOLLECTION, id);\n    if (review) {\n      if (review.userId) {\n        review.user = await UserService.getMapDataUserDetails(review.userId);\n      }\n      if (review.reviewed) {\n        review.reviewedObj = await UserService.getOrganiser(\"item\", {\n          collectionId: review.reviewed.collectionId,\n          id: review.reviewed.id,\n        });\n      }\n    }\n    return review;\n  }\n\n  async getReviews(collectionId, id): Promise<ReviewSummary[]> {\n    const res = await this.getReviewSummaryDoc(collectionId, id);\n    let reviews = [];\n    if (res && res.totReviews > 0) {\n      await res.reviews.forEach(async (review) => {\n        if (review.userId) {\n          review.user = await UserService.getMapDataUserDetails(review.userId);\n        }\n        if (review.reviewed) {\n          review.reviewedObj = await UserService.getOrganiser(\"item\", {\n            collectionId: review.reviewed.collectionId,\n            id: review.reviewed.id,\n          });\n        }\n        reviews.push(review);\n      });\n    }\n\n    return _.orderBy(reviews, \"date\", \"desc\");\n  }\n\n  async getReviewSummaryDoc(collectionId, id): Promise<ReviewSummaryDoc> {\n    return (await DatabaseService.getDocumentCollection(\n      collectionId,\n      id,\n      REVIEWCOLLECTION,\n      REVIEWCOLLECTION\n    )) as ReviewSummaryDoc;\n  }\n\n  //query reviews for user or reviewed\n  async queryReviews(collectionId, id): Promise<Review[]> {\n    console.log(\"queryReviews\", collectionId, id, USERPROFILECOLLECTION);\n    let ref = collection(firestore, REVIEWCOLLECTION);\n    let queryRef = null;\n    if (collectionId === USERPROFILECOLLECTION) {\n      queryRef = query(\n        ref,\n        where(\"userId\", \"==\", id),\n        orderBy(\"date\"),\n        limitToLast(10)\n      );\n    } else {\n      queryRef = query(\n        ref,\n        where(\"reviewed.collectionId\", \"==\", collectionId),\n        where(\"reviewed.id\", \"==\", id),\n        orderBy(\"date\"),\n        limitToLast(5)\n      );\n    }\n\n    const res = await getDocs(queryRef);\n    const results = [];\n    if (!res.empty) {\n      for (let doc of res.docs) {\n        const query = doc.data() as Review;\n        query.user = await UserService.getMapDataUserDetails(query.userId);\n        query.reviewedObj = await UserService.getOrganiser(\"item\", {\n          collectionId: query.reviewed.collectionId,\n          id: query.reviewed.id,\n        });\n        results.push(query);\n      }\n      return results;\n    }\n    return null;\n  }\n\n  async saveReview(review, item?) {\n    const res = await DatabaseService.addDocument(REVIEWCOLLECTION, review);\n    if (res && res.id && item) {\n      !item.reviewIds ? (item.reviewIds = []) : undefined;\n      //write review in the item\n      item.reviewIds.push({\n        uid: UserService.userProfile.uid,\n        reviewId: res.id,\n      });\n      //write review id and userId in the reviewed item\n      await DatabaseService.updateDocument(\n        review.reviewItem.collectionId,\n        review.reviewItem.id,\n        item\n      );\n    }\n  }\n\n  async updateReview(reviewId, review) {\n    await DatabaseService.updateDocument(REVIEWCOLLECTION, reviewId, review);\n  }\n\n  async getReviewSummary(\n    collectionId: string,\n    id: string\n  ): Promise<ReviewSummaryDoc> {\n    const reviews = (await DatabaseService.getDocumentCollection(\n      collectionId,\n      id,\n      REVIEWCOLLECTION,\n      REVIEWCOLLECTION\n    )) as ReviewSummaryDoc;\n    if (reviews && reviews.stars > 0) {\n      return reviews;\n    } else {\n      return {\n        stars: 0,\n        totReviews: 0,\n        reviews: [],\n        collectionId: collectionId,\n      };\n    }\n  }\n}\n\nexport const ReviewService = new ReviewController();\n"],"mappings":"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","ignoreList":[]}