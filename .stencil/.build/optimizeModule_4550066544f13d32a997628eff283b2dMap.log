{"version":3,"names":["appAdminChatsCss","AppAdminChatsStyle0","AppAdminChats","this","userPublicProfilesList","divingCentersList","divingSchoolsList","serviceCentersList","componentWillLoad","loadingChats$","ChatService","creatingNewChat$","subscribe","value","creatingNewChat","editingChat$","editingChatId$","editingChat","userRoles$","UserService","roles","userRoles","filterByOrganisierId","userChats$","servicesChatsList$","sub","loadChats","userChatsList$","filter","userPublicProfilesList$","collection","Environment","isUdive","divingCentersList$","DivingCentersService","divingSchoolsList$","DivingSchoolsService","serviceCentersList$","ServiceCentersService","disconnectedCallback","unsubscribe","userChats","resetSkeletons","loadingChats","adminChatsArray","Object","keys","forEach","key","chat","id","push","orderBy","length","map","async","organiser","item","getOrganiser","owner","userProfile","uid","selectedDivingSchoolId","selectedDivingCenterId","selectedServiceCenterId","participantNames","getOtherChatParticipants","photoURL","otherParticipants","participant","userLastRead","userSettings","chatsLastRead","unread","lastMessage","toNumber","created","filterByChats","chatsArray","includes","updateView","event","stopPropagation","deleteChat","render","h","skeleton","undefined","button","onClick","presentChat","detail","slot","src","name","style","fontWeight","format","fromUnixTime","color","fill","ev","delete"],"sources":["src/components/common/app/chat/app-admin-chats/app-admin-chats.scss?tag=app-admin-chats","src/components/common/app/chat/app-admin-chats/app-admin-chats.tsx"],"sourcesContent":["app-admin-chats {\n  /* Component styles go here */\n}\n","import {Component, h, State, Prop} from \"@stencil/core\";\nimport {Subscription} from \"rxjs\";\nimport {UserService} from \"../../../../../services/common/user\";\nimport {UserRoles} from \"../../../../../interfaces/common/user/user-roles\";\nimport {MapDataUserPubicProfile} from \"../../../../../interfaces/common/user/user-public-profile\";\nimport {DivingCentersService} from \"../../../../../services/udive/divingCenters\";\nimport {MapDataDivingCenter} from \"../../../../../interfaces/udive/diving-center/divingCenter\";\nimport {MapDataDivingSchool} from \"../../../../../interfaces/udive/diving-school/divingSchool\";\nimport {DivingSchoolsService} from \"../../../../../services/udive/divingSchools\";\nimport {ChatService} from \"../../../../../services/common/chat\";\nimport {MapDataServiceCenter} from \"../../../../../interfaces/udive/service-center/serviceCenter\";\nimport {ServiceCentersService} from \"../../../../../services/udive/serviceCenters\";\nimport {ChatsSummary} from \"../../../../../interfaces/common/chat/chat\";\nimport {Environment} from \"../../../../../global/env\";\nimport {format, fromUnixTime} from \"date-fns\";\nimport {orderBy, toNumber} from \"lodash\";\n\n@Component({\n  tag: \"app-admin-chats\",\n  styleUrl: \"app-admin-chats.scss\",\n})\nexport class AppAdminChats {\n  @Prop() filterByOrganisierId: string;\n  @Prop() filterByChats: any;\n  @State() adminChatsArray: any[] = [];\n  @State() updateView = false;\n  @State() creatingNewChat = false;\n  @State() loadingChats = true;\n  loadingChats$: Subscription;\n  @State() editingChat = \"\";\n  editingChat$: Subscription;\n\n  userRoles: UserRoles;\n  userRoles$: Subscription;\n  userChats: ChatsSummary;\n  userChats$: Subscription;\n  userPublicProfilesList: MapDataUserPubicProfile[] = [];\n  userPublicProfilesList$: Subscription;\n  //UDIVE\n  divingCentersList: MapDataDivingCenter[] = [];\n  divingCentersList$: Subscription;\n  divingSchoolsList: MapDataDivingSchool[] = [];\n  divingSchoolsList$: Subscription;\n  serviceCentersList: MapDataServiceCenter[] = [];\n  serviceCentersList$: Subscription;\n\n  async componentWillLoad() {\n    this.loadingChats$ = ChatService.creatingNewChat$.subscribe((value) => {\n      this.creatingNewChat = value;\n    });\n    this.editingChat$ = ChatService.editingChatId$.subscribe((value) => {\n      this.editingChat = value;\n    });\n\n    //wait for user to be load\n    this.userRoles$ = UserService.userRoles$.subscribe((roles) => {\n      this.userRoles = roles;\n      if (this.filterByOrganisierId && !this.userChats$) {\n        this.userChats$ = ChatService.servicesChatsList$.subscribe((sub) => {\n          this.loadChats(sub);\n        });\n      } else if (!this.userChats$) {\n        this.userChats$ = ChatService.userChatsList$.subscribe((sub) => {\n          this.loadChats(sub);\n        });\n      }\n      this.filter();\n    });\n\n    //load all users list\n    this.userPublicProfilesList$ =\n      UserService.userPublicProfilesList$.subscribe((collection) => {\n        //update dive sites\n        this.userPublicProfilesList = collection;\n        this.filter();\n      });\n\n    if (Environment.isUdive()) {\n      //load all diving centers list\n      this.divingCentersList$ =\n        DivingCentersService.divingCentersList$.subscribe((collection) => {\n          this.divingCentersList = collection;\n          this.filter();\n        });\n      //load all diving schools list\n      this.divingSchoolsList$ =\n        DivingSchoolsService.divingSchoolsList$.subscribe((collection) => {\n          this.divingSchoolsList = collection;\n          this.filter();\n        });\n\n      //load all service centers list\n      this.serviceCentersList$ =\n        ServiceCentersService.serviceCentersList$.subscribe((collection) => {\n          this.serviceCentersList = collection;\n          this.filter();\n        });\n    }\n  }\n\n  disconnectedCallback() {\n    this.userRoles$.unsubscribe();\n    this.userChats$.unsubscribe();\n    this.userPublicProfilesList$.unsubscribe();\n    this.editingChat$.unsubscribe();\n    this.loadingChats$.unsubscribe();\n\n    if (Environment.isUdive()) {\n      this.divingCentersList$.unsubscribe();\n      this.divingSchoolsList$.unsubscribe();\n      this.serviceCentersList$.unsubscribe();\n    }\n  }\n\n  loadChats(userChats: ChatsSummary) {\n    ChatService.resetSkeletons();\n    this.loadingChats = false;\n    if (userChats) {\n      let adminChatsArray = [];\n\n      Object.keys(userChats).forEach((key) => {\n        let chat = userChats[key] as any;\n        chat.id = key;\n        adminChatsArray.push(chat);\n      });\n      adminChatsArray = orderBy(adminChatsArray, \"lastMessage.created\", \"desc\");\n      this.adminChatsArray = adminChatsArray;\n      this.filter();\n    }\n  }\n\n  async filter() {\n    if (this.adminChatsArray.length > 0) {\n      //load organiser data\n      this.adminChatsArray.map(async (chat) => {\n        const organiser = chat.organiser;\n        organiser.item = await UserService.getOrganiser(\"item\", organiser);\n        if (Environment.isUdive()) {\n          chat.owner =\n            chat.organiser.id === UserService.userProfile.uid ||\n            chat.organiser.id === DivingSchoolsService.selectedDivingSchoolId ||\n            chat.organiser.id === DivingCentersService.selectedDivingCenterId ||\n            chat.organiser.id ===\n              ServiceCentersService.selectedServiceCenterId ||\n            chat.organiser.id === ServiceCentersService.selectedServiceCenterId;\n        }\n\n        chat.participantNames = ChatService.getOtherChatParticipants(\n          \"names\",\n          chat\n        );\n        chat.photoURL =\n          chat.organiser && chat.organiser.item && chat.organiser.item.photoURL\n            ? chat.organiser.item.photoURL\n            : null;\n        //change photo url if there are two users\n        const otherParticipants = ChatService.getOtherChatParticipants(\n          \"list\",\n          chat\n        );\n        if (otherParticipants.length == 1) {\n          const participant = otherParticipants[0];\n          let item = await UserService.getOrganiser(\"item\", participant);\n          if (item && item.photoURL) chat.photoURL = item.photoURL;\n        }\n\n        //set chat unread\n        const userLastRead =\n          UserService.userSettings.chatsLastRead &&\n          UserService.userSettings.chatsLastRead[chat.id]\n            ? UserService.userSettings.chatsLastRead[chat.id]\n            : false;\n        chat.unread =\n          userLastRead && chat.lastMessage\n            ? toNumber(chat.lastMessage.created) >\n              toNumber(UserService.userSettings.chatsLastRead[chat.id])\n            : true;\n      });\n      //filter by chats id for clients visualisation\n      if (this.filterByChats) {\n        const chatsArray = Object.keys(this.filterByChats);\n        this.adminChatsArray = this.adminChatsArray.filter((chat) =>\n          chatsArray.includes(chat.id)\n        );\n      }\n      this.updateView = !this.updateView;\n    }\n  }\n\n  delete(event, id) {\n    event.stopPropagation();\n    ChatService.deleteChat(id);\n  }\n\n  render() {\n    return (\n      <ion-list>\n        {this.loadingChats\n          ? [\n              <app-skeletons skeleton=\"chat\" />,\n              <app-skeletons skeleton=\"chat\" />,\n              <app-skeletons skeleton=\"chat\" />,\n              <app-skeletons skeleton=\"chat\" />,\n              <app-skeletons skeleton=\"chat\" />,\n            ]\n          : undefined}\n        {this.creatingNewChat ? <app-skeletons skeleton=\"chat\" /> : undefined}\n        {this.adminChatsArray.map((chat) =>\n          this.editingChat == chat.id ? (\n            <app-skeletons skeleton=\"chat\" />\n          ) : (\n            <ion-item\n              button\n              onClick={() => ChatService.presentChat(chat.id)}\n              detail\n            >\n              {chat.photoURL ? (\n                <ion-avatar slot=\"start\">\n                  <ion-img src={chat.photoURL} />\n                </ion-avatar>\n              ) : (\n                <ion-icon slot=\"start\" name=\"chatbubbles-outline\"></ion-icon>\n              )}\n              <ion-label>\n                <h2 style={chat.unread ? {fontWeight: \"bold\"} : undefined}>\n                  {chat.name\n                    ? chat.name\n                    : chat.participantNames\n                      ? chat.participantNames\n                      : \"\"}\n                </h2>\n                {chat.name ? <p>{chat.participantNames}</p> : undefined}\n                {chat.lastMessage ? (\n                  <p>\n                    {format(\n                      fromUnixTime(toNumber(chat.lastMessage.created)),\n                      \"PPP\"\n                    )}\n                  </p>\n                ) : undefined}\n              </ion-label>\n              {chat.unread ? (\n                <ion-icon\n                  slot=\"start\"\n                  color=\"danger\"\n                  name=\"radio-button-on\"\n                ></ion-icon>\n              ) : undefined}\n\n              {chat.owner ? (\n                <ion-button\n                  fill=\"clear\"\n                  color=\"danger\"\n                  icon-only\n                  slot=\"end\"\n                  onClick={(ev) => this.delete(ev, chat.id)}\n                >\n                  <ion-icon name=\"trash\" slot=\"end\"></ion-icon>\n                </ion-button>\n              ) : undefined}\n            </ion-item>\n          )\n        )}\n      </ion-list>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}