{"version":3,"names":["defaultValidator","validate","_x","combineValidators","v1","v2","combined","x","res1","res2","errorMessage","FruitValidator","value","fruits","find","a","tag","text","getLengthValidator","min","max","isString","toString","length","isNumber","getErrorMessage","error","replace","xxx","yyy","undefined","getUniqueIdValidator","type","index","list","uniqueid","id","valid","DIVECOMMUNITIESCOLLECTION","DiveCommunitiesService","diveCommunitiesList","findIndex","DIVECENTERSSCOLLECTION","DivingCentersService","divingCentersList","SERVICECENTERSCOLLECTION","ServiceCentersService","serviceCentersList","DIVESCHOOLSSCOLLECTION","DivingSchoolsService","divingSchoolsList","test","getMinMaxValueValidator","string","parseFloat","getMinValueValidator","ValidatorsName","getValidator","map","v","validatorFactory","name","options","reduce","fruit","required","email","getEmailValidator","minmaxvalue","minvalue","KeyboardStyle","KeyboardResize","Keyboard","registerPlugin","appFormItemCss","AppFormItemStyle0","AppFormItem","this","isAddess","availableLanguages","showError","inputField","_validator","forceResetValue","previousValue","componentWillLoad","validator","includes","inputType","multiLanguage","en","inputFormMode","selectedLanguage","UserService","userSettings","getLanguage","textLanguages","Object","keys","sort","SystemService","getLanguages","push","forEach","language","componentWillUpdate","handleChange","ev","detail","checked","_valid","isValid","emit","item","emitFormItem","formItemChanged","cloneDeep","target","handleBlur","gotFocus","formItemBlur","handleFocus","addEventListener","event","key","preventDefault","hide","selectOnFocus","setTimeout","inputElement","closest","querySelector","select","selectLocation","location","display_name","formLocationSelected","multiLanguageSelector","lang","h","slot","selectedLangCode","picker","iconOnly","onLanguageChanged","changeSelectedLanguage","switchMultilangueAccordion","openAccordion","updateSlider","makeTranslation","presentAlertError","TranslationService","getTransl","alert","alertController","create","header","message","buttons","handler","async","translated","updateView","present","openDatePopover","popover","popoverController","component","componentProps","labelTag","labelText","labelReplace","appendText","datePresentation","preferWheel","showDateTitle","maxDate","translucent","onDidDismiss","then","data","render","readonly","showItem","lines","detailText","showDate","button","onClick","color","Environment","getAppColor","disabled","labelPosition","onIonChange","onIonBlur","onIonFocus","textRows","class","rows","label","onIonInput","inputmode","debounce","placeholder","fill","shortItem","forceInvalid","step","inputStep","address","onLocationSelected","onLocationsFound","formLocationsFound","appGeocodeCss","AppGeocodeStyle0","AppGeocode","resultFound","showNoResults","startTimer","timer","countdown","fetchGeocode","clearTimeout","req","LOCATIONIQ_GEOCODE","fetch","response","ok","results","json","locationsFound","loc","locationSelected","Host","animated","style","width","appModalFooterCss","AppModalFooterStyle0","AppModalFooter","showSave","cancelTag","expand","size","disableSave","saveEmit","saveTag","cancelEmit","inputIosCss","IonInputIosStyle0","inputMdCss","IonInputMdStyle0","Input","constructor","hostRef","inputId","inputIds","inheritedAttributes","isComposing","didInputClearOnEdit","onInput","input","emitInputChange","onChange","emitValueChange","onBlur","hasFocus","focusedValue","ionBlur","onFocus","ionFocus","onKeydown","checkClearOnEdit","onCompositionStart","onCompositionEnd","clearTextInput","clearInput","stopPropagation","setFocus","autocapitalize","autocomplete","autocorrect","autofocus","clearInputIcon","clearOnEdit","counter","counterFormatter","enterkeyhint","errorText","helperText","labelPlacement","maxlength","minlength","multiple","pattern","shape","spellcheck","debounceChanged","ionInput","originalIonInput","debounceEvent","onTypeChange","passwordToggle","el","valueChanged","nativeInput","getValue","assign","inheritAriaAttributes","inheritAttributes","connectedCallback","slotMutationController","createSlotMutationController","forceUpdate","notchController","createNotchController","notchSpacerEl","labelSlot","document","dispatchEvent","CustomEvent","componentDidLoad","componentDidRender","_a","calculateNotchWidth","disconnectedCallback","destroy","focus","getInputElement","Promise","resolve","componentOnReady","newValue","ionChange","shouldClearOnEdit","IGNORED_KEYS","pressedIgnoredKey","hasValue","renderHintText","renderCounter","getCounterText","renderBottomContent","hasHintText","hasCounter","renderLabel","hasLabel","renderLabelContainer","mode","getIonMode","hasOutlineFill","ref","inItem","hostContext","shouldRenderHighlight","defaultClearIcon","closeCircle","closeSharp","clearIconData","hasStartEndSlots","labelShouldFloat","createColorClasses","htmlFor","autoCapitalize","autoComplete","autoCorrect","autoFocus","enterKeyHint","inputMode","minLength","maxLength","readOnly","onKeyDown","onCompositionstart","onCompositionend","onPointerDown","onFocusin","icon"],"sources":["src/validators/validator.ts","src/validators/fruit-validator.ts","src/validators/length-validator.ts","src/validators/uniqueid-validator.ts","src/validators/minmaxvalue-validator.ts","src/validators/minvalue-validator.ts","src/validators/validator.factory.ts","node_modules/@capacitor/keyboard/dist/esm/definitions.js","node_modules/@capacitor/keyboard/dist/esm/index.js","src/components/common/app/common/app-form-item/app-form-item.scss?tag=app-form-item&encapsulation=shadow","src/components/common/app/common/app-form-item/app-form-item.tsx","src/components/common/app/map/app-geocode/app-geocode.scss?tag=app-geocode","src/components/common/app/map/app-geocode/app-geocode.tsx","src/components/common/app/common/app-modal-footer/app-modal-footer.css?tag=app-modal-footer","src/components/common/app/common/app-modal-footer/app-modal-footer.tsx","node_modules/@ionic/core/dist/collection/components/input/input.ios.css?tag=ion-input&mode=ios&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/input/input.md.css?tag=ion-input&mode=md&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/input/input.js"],"sourcesContent":["//export type Validator<A> = (x: A) => boolean;\n\nimport { TranslateText } from \"../interfaces/common/translations/translations\";\n\nexport interface Validator<A> {\n  validate: (x: A) => boolean;\n  errorMessage?: TranslateText;\n}\n\nexport interface AsyncValidator<A> {\n  validate: (x: A) => Promise<boolean>;\n  errorMessage?: TranslateText;\n}\n\nexport interface ValidatorEntry {\n  name: string;\n  options?: any;\n}\n\nexport const defaultValidator: Validator<any> = {\n  validate: (_x: any) => true,\n};\n\nexport function combineValidators<A>(\n  v1: Validator<A>,\n  v2: Validator<A>\n): Validator<A> {\n  let combined: Validator<A>;\n  combined = {\n    validate: (x: A) => {\n      const res1: boolean = v1.validate(x);\n      const res2: boolean = v2.validate(x);\n      if (!res1) {\n        combined.errorMessage = v1.errorMessage;\n      } else if (!res2) {\n        combined.errorMessage = v2.errorMessage;\n      }\n      return res1 && res2;\n    },\n  };\n  return combined;\n}\n","import { Validator } from \"./validator\";\n\nexport const FruitValidator: Validator<string> = {\n  validate: (value: string) => {\n    let fruits = [\"banana\", \"apple\", \"cherry\"];\n    return fruits.find(a => a === value) ? true : false;\n  },\n  errorMessage: { tag: \"test\", text: \"You must enter a valid fruit name\" }\n};\n","import {Validator} from \"./validator\";\nimport {TranslateText} from \"../interfaces/common/translations/translations\";\nimport {isNumber, isString} from \"lodash\";\n\nexport function getLengthValidator(\n  min: number,\n  max: number\n): Validator<string> {\n  return {\n    validate: (value: string | number) => {\n      if (isString(value)) {\n        value = value.toString() || \"\";\n        if (min && max) {\n          //\"length\" validator\n          return min <= value.length && value.length <= max;\n        }\n        if (min == -1) {\n          //\"required\" validator\n          return value.length > 0;\n        }\n        if (min) {\n          //\"length\" validator\n          return min <= value.length;\n        }\n        if (max) {\n          //\"length\" validator\n          return value.length <= max;\n        }\n        return true;\n      } else if (isNumber(value)) {\n        value = value || 0;\n        if (min && max) {\n          //\"length\" validator\n          return min <= value && value <= max;\n        }\n        if (min == -1) {\n          //\"required\" validator\n          return isNumber(value);\n        }\n        if (min) {\n          //\"length\" validator\n          return min <= value;\n        }\n        if (max) {\n          //\"length\" validator\n          return value <= max;\n        }\n        return true;\n      } else {\n        return false;\n      }\n    },\n    errorMessage: getErrorMessage(min, max),\n  };\n}\n\nfunction getErrorMessage(min: number, max: number): TranslateText {\n  const error =\n    min && max\n      ? {\n          tag: \"validators-minmax\",\n          text: \"You must enter between xxx and yyy characters\",\n          replace: {\n            xxx: min,\n            yyy: max,\n          },\n        }\n      : min == -1\n        ? {\n            tag: \"validators-required\",\n            text: \"This field is required\",\n          }\n        : min\n          ? {\n              tag: \"validators-min\",\n              text: \"You must enter at least xxx characters\",\n              replace: {\n                xxx: min,\n              },\n            }\n          : max\n            ? {\n                tag: \"validators-max\",\n                text: \"You must enter less than yyy characters\",\n                replace: {\n                  yyy: max,\n                },\n              }\n            : undefined;\n  return error;\n}\n","import {Validator} from \"./validator\";\nimport {\n  DIVECENTERSSCOLLECTION,\n  DivingCentersService,\n} from \"../services/udive/divingCenters\";\nimport {\n  SERVICECENTERSCOLLECTION,\n  ServiceCentersService,\n} from \"../services/udive/serviceCenters\";\nimport {\n  DIVESCHOOLSSCOLLECTION,\n  DivingSchoolsService,\n} from \"../services/udive/divingSchools\";\nimport {\n  DIVECOMMUNITIESCOLLECTION,\n  DiveCommunitiesService,\n} from \"../services/udive/diveCommunities\";\n\nexport function getUniqueIdValidator(type, index?, list?): Validator<string> {\n  let uniqueid = true;\n  if (type == \"list\") {\n    uniqueid = false;\n  }\n  return {\n    validate: (id: string) => {\n      let valid = false;\n      if (type === DIVECOMMUNITIESCOLLECTION) {\n        valid =\n          DiveCommunitiesService.diveCommunitiesList.findIndex(\n            (x) => x.id === id\n          ) == -1;\n      } else if (type === DIVECENTERSSCOLLECTION) {\n        valid =\n          DivingCentersService.divingCentersList.findIndex(\n            (x) => x.id === id\n          ) == -1;\n      } else if (type === SERVICECENTERSCOLLECTION) {\n        valid =\n          ServiceCentersService.serviceCentersList.findIndex(\n            (x) => x.id === id\n          ) == -1;\n      } else if (type === DIVESCHOOLSSCOLLECTION) {\n        valid =\n          DivingSchoolsService.divingSchoolsList.findIndex(\n            (x) => x.id === id\n          ) == -1;\n      } else if (type === \"list\") {\n        valid = list.findIndex((x) => x[index] === id) == -1;\n      } else {\n        valid = true;\n      }\n      if (uniqueid) {\n        valid = valid && /[a-z0-9-]+/.test(id);\n        valid = valid && id.length >= 5 && id.length <= 16;\n      }\n\n      return valid;\n    },\n    errorMessage: {\n      tag: \"validators-uniqueid\",\n      text:\n        \"This Unique ID is not valid or already taken.\" +\n        (uniqueid\n          ? \"It must be between 5 and 16 characters length and include only letters, numbers or dashes.\"\n          : \"\"),\n    },\n  };\n}\n","import {Validator} from \"./validator\";\nimport {TranslateText} from \"../interfaces/common/translations/translations\";\n\nexport function getMinMaxValueValidator(\n  min: number,\n  max: number\n): Validator<string> {\n  return {\n    validate: (string: string) => {\n      let value = parseFloat(string) || 0;\n      return value >= min && value <= max;\n    },\n    errorMessage: getErrorMessage(min, max),\n  };\n}\n\nfunction getErrorMessage(min: number, max: number): TranslateText {\n  const error = {\n    tag: \"validators-minmaxvalue\",\n    text: \"You must enter a value between xxx and yyy\",\n    replace: {\n      xxx: min,\n      yyy: max,\n    },\n  };\n  return error;\n}\n","import {Validator} from \"./validator\";\nimport {TranslateText} from \"../interfaces/common/translations/translations\";\nimport {isString} from \"lodash\";\n\nexport function getMinValueValidator(min: number): Validator<string> {\n  return {\n    validate: (value: string | number) => {\n      if (isString(value)) value = parseFloat(value);\n      return value >= min;\n    },\n    errorMessage: getErrorMessage(min),\n  };\n}\n\nfunction getErrorMessage(min: number): TranslateText {\n  const error = {\n    tag: \"validators-minvalue\",\n    text: \"You must enter a value higher than xxx\",\n    replace: {\n      xxx: min,\n    },\n  };\n  return error;\n}\n","import {\n  Validator,\n  ValidatorEntry,\n  defaultValidator,\n  combineValidators,\n} from \"./validator\";\nimport {FruitValidator} from \"./fruit-validator\";\nimport {getLengthValidator} from \"./length-validator\";\nimport {getEmailValidator} from \"./email-validator\";\nimport {getUniqueIdValidator} from \"./uniqueid-validator\";\nimport {getMinMaxValueValidator} from \"./minmaxvalue-validator\";\nimport {getMinValueValidator} from \"./minvalue-validator\";\n\nexport enum ValidatorsName {\n  fruit = \"fruit\",\n  email = \"email\",\n  length = \"length\",\n  uniqueid = \"uniqueid\",\n  required = \"required\",\n  minmaxvalue = \"minmaxvalue\",\n  minvalue = \"minvalue\",\n}\n\nexport function getValidator<A>(\n  list: Array<string | ValidatorEntry | Validator<A>>\n): Validator<A> {\n  return (list || [])\n    .map((v) => {\n      if (typeof v === \"string\") {\n        return validatorFactory(v, null);\n      } else if (v && (v as any).name) {\n        v = v as ValidatorEntry;\n        return validatorFactory(v.name, v.options);\n      } else {\n        return v as Validator<A>;\n      }\n    })\n    .reduce(combineValidators, defaultValidator);\n}\n\nexport function validatorFactory(name: string, options: any): Validator<any> {\n  options = options || {};\n  switch (name) {\n    case ValidatorsName.fruit:\n      return FruitValidator;\n    case ValidatorsName.required:\n      return getLengthValidator(-1, null);\n    case ValidatorsName.length:\n      return getLengthValidator(options.min, options.max);\n    case ValidatorsName.email:\n      return getEmailValidator();\n    case ValidatorsName.uniqueid:\n      return getUniqueIdValidator(options.type, options.index, options.list);\n    case ValidatorsName.minmaxvalue:\n      return getMinMaxValueValidator(options.min, options.max);\n    case ValidatorsName.minvalue:\n      return getMinValueValidator(options.min);\n    default:\n      return defaultValidator;\n  }\n}\n","/// <reference types=\"@capacitor/cli\" />\nexport var KeyboardStyle;\n(function (KeyboardStyle) {\n    /**\n     * Dark keyboard.\n     *\n     * @since 1.0.0\n     */\n    KeyboardStyle[\"Dark\"] = \"DARK\";\n    /**\n     * Light keyboard.\n     *\n     * @since 1.0.0\n     */\n    KeyboardStyle[\"Light\"] = \"LIGHT\";\n    /**\n     * On iOS 13 and newer the keyboard style is based on the device appearance.\n     * If the device is using Dark mode, the keyboard will be dark.\n     * If the device is using Light mode, the keyboard will be light.\n     * On iOS 12 the keyboard will be light.\n     *\n     * @since 1.0.0\n     */\n    KeyboardStyle[\"Default\"] = \"DEFAULT\";\n})(KeyboardStyle || (KeyboardStyle = {}));\nexport var KeyboardResize;\n(function (KeyboardResize) {\n    /**\n     * Only the `body` HTML element will be resized.\n     * Relative units are not affected, because the viewport does not change.\n     *\n     * @since 1.0.0\n     */\n    KeyboardResize[\"Body\"] = \"body\";\n    /**\n     * Only the `ion-app` HTML element will be resized.\n     * Use it only for Ionic Framework apps.\n     *\n     * @since 1.0.0\n     */\n    KeyboardResize[\"Ionic\"] = \"ionic\";\n    /**\n     * The whole native Web View will be resized when the keyboard shows/hides.\n     * This affects the `vh` relative unit.\n     *\n     * @since 1.0.0\n     */\n    KeyboardResize[\"Native\"] = \"native\";\n    /**\n     * Neither the app nor the Web View are resized.\n     *\n     * @since 1.0.0\n     */\n    KeyboardResize[\"None\"] = \"none\";\n})(KeyboardResize || (KeyboardResize = {}));\n//# sourceMappingURL=definitions.js.map","import { registerPlugin } from '@capacitor/core';\nconst Keyboard = registerPlugin('Keyboard');\nexport * from './definitions';\nexport { Keyboard };\n//# sourceMappingURL=index.js.map",":host {\n  ion-note {\n    font-size: 1rem;\n  }\n\n  .item_short_height {\n    --min-height: inherit;\n    min-height: var(--min-height);\n    .sc-ion-input-md-h {\n      min-height: calc(var(--min-height) - 8px);\n    }\n  }\n  width: 100%;\n  .valid {\n    border-bottom: 1px solid blue;\n  }\n  .invalid {\n    color: red;\n    font-weight: bold;\n    border-bottom: 1px solid red;\n  }\n\n  .validation-error {\n    font-size: 0.7rem;\n    color: red;\n    display: flex;\n    justify-content: end;\n    padding: 0 20px 0 0;\n  }\n\n  .fixedLabel {\n    min-width: 50% !important;\n    max-width: 50% !important;\n  }\n\n  .alignEnd {\n    text-align: end;\n  }\n  .alignStart {\n    text-align: start;\n  }\n}\n","import {\n  Component,\n  Prop,\n  Event,\n  EventEmitter,\n  h,\n  State,\n  Method,\n} from \"@stencil/core\";\nimport {\n  Validator,\n  getValidator,\n  defaultValidator,\n  ValidatorEntry,\n} from \"../../../../../validators\";\nimport {\n  InputValidator,\n  TextMultilanguage,\n} from \"../../../../../interfaces/interfaces\";\nimport {\n  TextFieldTypes,\n  alertController,\n  popoverController,\n} from \"@ionic/core\";\nimport { Keyboard } from \"@capacitor/keyboard\";\nimport { UserService } from \"../../../../../services/common/user\";\nimport { SystemService } from \"../../../../../services/common/system\";\nimport { TranslationService } from \"../../../../../services/common/translations\";\nimport { LocationIQ } from \"../../../../../services/common/map\";\nimport { cloneDeep } from \"lodash\";\nimport { Environment } from \"../../../../../global/env\";\nimport { showDate } from \"../../../../../helpers/utils\";\n\n@Component({\n  tag: \"app-form-item\",\n  styleUrl: \"app-form-item.scss\",\n  shadow: true,\n})\nexport class AppFormItem {\n  @Prop({ mutable: true }) value: string | TextMultilanguage | number | boolean;\n  @Prop() labelTag?: string;\n  @Prop() labelText?: string;\n  @Prop() labelReplace?: any;\n  @Prop() appendText?: any;\n  @Prop() disabled?: boolean = false;\n  @Prop() readonly?: boolean = false;\n  @Prop() name: string;\n  @Prop() textRows?: number;\n  @Prop() inputType: TextFieldTypes | \"boolean\";\n  @Prop({ mutable: true }) inputFormMode:\n    | \"decimal\"\n    | \"email\"\n    | \"none\"\n    | \"numeric\"\n    | \"search\"\n    | \"tel\"\n    | \"text\"\n    | \"url\"\n    | undefined;\n  @Prop() placeholder?: string;\n  @Prop() color?: string;\n  @Prop() forceInvalid?: boolean = false;\n  @Prop() multiLanguage?: boolean = false;\n  @Prop() datePresentation?:\n    | \"date\"\n    | \"date-time\"\n    | \"month\"\n    | \"month-year\"\n    | \"time\"\n    | \"year\" = \"date\";\n  @Prop() preferWheel?: boolean = false; //prefer wheel type for dates\n  @Prop() showDateTitle?: boolean = true; //show date title for dates\n  @Prop() maxDate?: string;\n  @Prop() labelPosition?: \"fixed\" | \"stacked\" | \"floating\" = \"floating\";\n  @Prop() lines?: \"none\" | \"full\" | \"inset\" = \"none\";\n  @Prop() inputStep: string = \"0.1\";\n  @Prop() showItem?: boolean = true;\n  @Prop() shortItem?: boolean = false;\n  @Prop() debounce?: number = 300;\n  @Prop() selectOnFocus?: boolean = false;\n\n  isAddess = false;\n\n  @Prop() validator?: Array<string | ValidatorEntry | Validator<string>>;\n\n  @Event() formItemChanged: EventEmitter<InputValidator>;\n  @Event() formItemBlur: EventEmitter<InputValidator>;\n  @Event() formLocationsFound: EventEmitter<any>;\n  @Event() formLocationSelected: EventEmitter<LocationIQ>;\n  @Event() isValid: EventEmitter<boolean>;\n  @Event() updateSlider: EventEmitter<boolean>;\n\n  @State() selectedLanguage = \"en\";\n  availableLanguages: string[] = [];\n  @State() openAccordion = false;\n  @State() updateView = false;\n\n  showError = false;\n  @State() gotFocus = false;\n\n  previousValue: any;\n  inputField = null;\n\n  @Method()\n  //used to force reset a value in case of changes of the \"value\" on the main DOM\n  async forceResetValue(value) {\n    this.value = value;\n    this.previousValue = value;\n  }\n\n  _validator: Validator<string> = defaultValidator;\n\n  _valid: boolean;\n\n  componentWillLoad() {\n    if (this.validator) this._validator = getValidator<string>(this.validator);\n    if (this.validator && this.validator.includes(\"address\")) {\n      this.isAddess = true;\n    }\n\n    if (this.inputType !== \"boolean\" && !this.value) {\n      if (this.multiLanguage) {\n        this.value = { en: \"\" };\n      }\n      if (!this.inputFormMode) {\n        if (this.inputType == \"number\") {\n          this.inputFormMode = \"decimal\";\n        } else if (this.inputType == \"email\") {\n          this.inputFormMode = \"email\";\n        } else {\n          this.inputFormMode = \"text\";\n        }\n      }\n    }\n    if (this.multiLanguage) {\n      this.selectedLanguage = UserService.userSettings.getLanguage();\n      //check if language is available in the text\n      const textLanguages = Object.keys(this.value).sort();\n      if (\n        textLanguages &&\n        textLanguages.length > 0 &&\n        !textLanguages.includes(this.selectedLanguage)\n      ) {\n        this.selectedLanguage = textLanguages[0];\n      }\n      const availableLanguages = SystemService.getLanguages();\n      this.availableLanguages.push(this.selectedLanguage);\n      availableLanguages.forEach((language) => {\n        if (language.value != this.selectedLanguage) {\n          this.availableLanguages.push(language.value);\n        }\n      });\n    }\n  }\n\n  componentWillUpdate() {\n    if (this.validator) this._validator = getValidator<string>(this.validator);\n  }\n\n  handleChange(ev) {\n    if (this.inputType == \"boolean\") {\n      if (\n        ev.detail &&\n        (ev.detail.checked === true || ev.detail.checked === false)\n      ) {\n        this.showError = false;\n        this._valid = true;\n        this.isValid.emit(this._valid);\n        this.value = ev.detail.checked;\n        if (this.value !== this.previousValue) {\n          const item = this.emitFormItem();\n          this.formItemChanged.emit(item);\n          this.previousValue = cloneDeep(this.value);\n        }\n      }\n    } else {\n      this.showError = true;\n      const text =\n        ev.target && ev.target.value\n          ? ev.target.value.length > 0\n            ? ev.target.value\n            : null\n          : null;\n      this._valid = this.validator ? this._validator.validate(text) : true;\n      this.isValid.emit(this._valid);\n      this.multiLanguage\n        ? (this.value[this.selectedLanguage] = text)\n        : this.inputType == \"number\"\n          ? (this.value = parseFloat(text))\n          : (this.value = text);\n      if (this.value !== this.previousValue) {\n        const item = this.emitFormItem();\n        this.formItemChanged.emit(item);\n        this.previousValue = cloneDeep(this.value);\n      }\n    }\n  }\n\n  handleBlur() {\n    this.gotFocus = false;\n    //this.inputField ? this.inputField.removeAllListeners() : undefined;\n    this.formItemBlur.emit(this.emitFormItem());\n  }\n\n  emitFormItem() {\n    return {\n      name: this.name,\n      value: this.value,\n      valid: this._valid,\n    };\n  }\n\n  handleFocus(ev) {\n    // Get the input field\n    this.inputField = ev.target as HTMLElement;\n\n    // Execute a function when the user releases a key on the keyboard\n    this.inputField.addEventListener(\"keyup\", (event) => {\n      // Number 13 is the \"Enter\" key on the keyboard\n      if (event.key === \"Enter\") {\n        // Cancel the default action, if needed\n        event.preventDefault();\n        //close keyboard\n        Keyboard.hide();\n      }\n    });\n    this.gotFocus = true;\n\n    //select on focus\n    if (this.selectOnFocus) {\n      setTimeout(() => {\n        const inputElement = this.inputField\n          .closest(\"ion-input\")\n          .querySelector(\"input\");\n        if (inputElement) {\n          inputElement.select();\n        }\n      });\n    }\n  }\n\n  selectLocation(location: LocationIQ) {\n    this.handleBlur();\n    this.value = location.display_name;\n    this.formLocationSelected.emit(location);\n  }\n\n  multiLanguageSelector(lang) {\n    return (\n      <app-language-picker\n        slot='end'\n        selectedLangCode={lang}\n        picker={false}\n        iconOnly={true}\n        onLanguageChanged={(ev) => this.changeSelectedLanguage(ev)}\n      ></app-language-picker>\n    );\n  }\n\n  switchMultilangueAccordion() {\n    this.openAccordion = !this.openAccordion;\n    this.updateSlider.emit(true);\n  }\n\n  async makeTranslation() {\n    if (!this.value[\"en\"]) {\n      SystemService.presentAlertError(\n        TranslationService.getTransl(\n          \"translation-error\",\n          \"Translation require English field to be filled\"\n        )\n      );\n    } else {\n      const alert = await alertController.create({\n        header: TranslationService.getTransl(\"translate\", \"Translate\"),\n        message: TranslationService.getTransl(\n          \"translate-message\",\n          \"All fields will be replaced with automatic translation.\"\n        ),\n        buttons: [\n          {\n            text: TranslationService.getTransl(\"ok\", \"OK\"),\n            handler: async () => {\n              try {\n                const translated = await TranslationService.makeTranslation(\n                  this.value[\"en\"]\n                );\n                this.availableLanguages.forEach((language) => {\n                  if (language != \"en\") {\n                    this.value[language] = translated[language];\n                  }\n                });\n                this.emitFormItem();\n                this.updateView = !this.updateView;\n                this.updateSlider.emit();\n              } catch (error) {\n                SystemService.presentAlertError(error);\n              }\n            },\n          },\n          {\n            text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n            handler: async () => {},\n          },\n        ],\n      });\n      alert.present();\n    }\n  }\n\n  changeSelectedLanguage(ev) {\n    if (ev.detail) {\n      this.selectedLanguage = ev.detail;\n      if (!this.value[this.selectedLanguage]) {\n        this.value[this.selectedLanguage] = \"\";\n      }\n    }\n  }\n\n  async openDatePopover() {\n    const popover = await popoverController.create({\n      component: \"popover-select-date\",\n      componentProps: {\n        value: this.value,\n        labelTag: this.labelTag,\n        labelText: this.labelText,\n        labelReplace: this.labelReplace,\n        appendText: this.appendText,\n        datePresentation: this.datePresentation,\n        preferWheel: this.preferWheel,\n        showDateTitle: this.showDateTitle,\n        maxDate: this.maxDate,\n      },\n      translucent: false,\n    });\n    popover.onDidDismiss().then((ev) => {\n      if (ev.data) this.handleChange({ target: { value: ev.data } });\n    });\n    popover.present();\n  }\n\n  render() {\n    return [\n      this.readonly ? (\n        <app-item-detail\n          showItem={this.showItem}\n          lines={this.lines}\n          labelTag={this.labelTag}\n          labelText={this.labelText}\n          detailText={\n            this.inputType == \"date\"\n              ? showDate(this.value, this.datePresentation)\n              : this.value\n          }\n        ></app-item-detail>\n      ) : (\n        [\n          this.inputType == \"date\" ? (\n            [\n              <ion-item\n                button\n                lines={this.lines}\n                onClick={() => this.openDatePopover()}\n              >\n                <ion-label>\n                  {this.labelTag ? (\n                    <my-transl\n                      tag={this.labelTag}\n                      text={this.labelText}\n                      replace={this.labelReplace}\n                    ></my-transl>\n                  ) : this.labelText ? (\n                    this.labelText\n                  ) : undefined}\n                  {this.appendText ? this.appendText : undefined}\n                  {this.validator && this.validator.includes(\"required\") ? (\n                    <sup>*</sup>\n                  ) : undefined}\n                </ion-label>\n                <ion-note slot='end'>\n                  {showDate(this.value, this.datePresentation)}\n                </ion-note>\n              </ion-item>,\n            ]\n          ) : this.inputType == \"boolean\" ? (\n            <ion-item lines={this.lines} color={this.color ? this.color : null}>\n              <ion-toggle\n                enable-on-off-labels='true'\n                color={Environment.getAppColor()}\n                checked={this.value ? true : false}\n                disabled={this.disabled}\n                label-placement={this.labelPosition}\n                onIonChange={(ev) => this.handleChange(ev)}\n                onIonBlur={() => this.handleBlur()}\n                onIonFocus={(ev) => this.handleFocus(ev)}\n              >\n                {(this.labelTag\n                  ? TranslationService.getTransl(\n                      this.labelTag,\n                      this.labelText,\n                      this.labelReplace\n                    )\n                  : this.labelText\n                    ? this.labelText\n                    : \"\") +\n                  (this.appendText ? this.appendText : \"\") +\n                  (this.validator && this.validator.includes(\"required\")\n                    ? \"*\"\n                    : \"\")}\n              </ion-toggle>\n            </ion-item>\n          ) : this.multiLanguage ? (\n            this.availableLanguages.map((language, index) =>\n              index == 0 || (index > 0 && this.openAccordion) ? (\n                <ion-item\n                  lines={this.lines}\n                  color={this.color ? this.color : null}\n                >\n                  {this.textRows ? (\n                    [\n                      <ion-textarea\n                        class={\"valid\"}\n                        rows={this.textRows}\n                        disabled={this.disabled}\n                        readonly={this.readonly}\n                        label={\n                          index == 0\n                            ? (this.labelTag\n                                ? TranslationService.getTransl(\n                                    this.labelTag,\n                                    this.labelText,\n                                    this.labelReplace\n                                  )\n                                : this.labelText\n                                  ? this.labelText\n                                  : \"\") +\n                              (this.appendText ? this.appendText : \"\") +\n                              (this.validator &&\n                              this.validator.includes(\"required\")\n                                ? \"*\"\n                                : \"\")\n                            : null\n                        }\n                        label-placement={this.labelPosition}\n                        onIonInput={(ev) => this.handleChange(ev)}\n                        onIonBlur={() => this.handleBlur()}\n                        onIonFocus={(ev) => this.handleFocus(ev)}\n                        value={this.value[language]}\n                      />,\n                    ]\n                  ) : (\n                    <ion-input\n                      class={\"valid alignStart\"}\n                      inputmode={this.inputFormMode}\n                      disabled={this.disabled}\n                      readonly={this.readonly}\n                      debounce={this.debounce}\n                      label={\n                        index == 0\n                          ? (this.labelTag\n                              ? TranslationService.getTransl(\n                                  this.labelTag,\n                                  this.labelText,\n                                  this.labelReplace\n                                )\n                              : this.labelText\n                                ? this.labelText\n                                : \"\") +\n                            (this.appendText ? this.appendText : \"\") +\n                            (this.validator &&\n                            this.validator.includes(\"required\")\n                              ? \"*\"\n                              : \"\")\n                          : null\n                      }\n                      label-placement={\n                        this.labelTag ? this.labelPosition : null\n                      }\n                      placeholder={this.placeholder}\n                      onIonInput={(ev) => this.handleChange(ev)}\n                      onIonFocus={(ev) => this.handleFocus(ev)}\n                      value={this.value[language]}\n                    />\n                  )}\n                  {this.multiLanguageSelector(language)}\n                  {index == 0\n                    ? [\n                        <ion-button\n                          slot='end'\n                          fill='clear'\n                          color='light'\n                          onClick={() => this.makeTranslation()}\n                        >\n                          <ion-icon name='language-outline'></ion-icon>\n                        </ion-button>,\n                        <ion-button\n                          slot='end'\n                          fill='clear'\n                          color='light'\n                          onClick={() => this.switchMultilangueAccordion()}\n                        >\n                          <ion-icon\n                            name={\n                              this.openAccordion\n                                ? \"chevron-up-outline\"\n                                : \"chevron-down-outline\"\n                            }\n                          ></ion-icon>\n                        </ion-button>,\n                      ]\n                    : undefined}\n                </ion-item>\n              ) : undefined\n            )\n          ) : (\n            <ion-item\n              class={this.shortItem ? \"item_short_height\" : \"\"}\n              lines={this.lines}\n              color={this.color ? this.color : null}\n            >\n              {this.textRows ? (\n                [\n                  <ion-textarea\n                    class={\n                      (this.showError &&\n                        this.validator &&\n                        !this._validator.validate(this.value.toString())) ||\n                      this.forceInvalid\n                        ? \"invalid\"\n                        : \"valid\"\n                    }\n                    rows={this.textRows}\n                    disabled={this.disabled}\n                    readonly={this.readonly}\n                    label={\n                      (this.labelTag\n                        ? TranslationService.getTransl(\n                            this.labelTag,\n                            this.labelText,\n                            this.labelReplace\n                          )\n                        : this.labelText\n                          ? this.labelText\n                          : \"\") +\n                      (this.appendText ? this.appendText : \"\") +\n                      (this.validator && this.validator.includes(\"required\")\n                        ? \"*\"\n                        : \"\")\n                    }\n                    label-placement={this.labelPosition}\n                    onIonInput={(ev) => this.handleChange(ev)}\n                    onIonBlur={() => this.handleBlur()}\n                    onIonFocus={(ev) => this.handleFocus(ev)}\n                    value={this.value ? this.value.toString() : null}\n                  />,\n                ]\n              ) : (\n                <ion-input\n                  class={\n                    ((this.showError &&\n                      this.validator &&\n                      !this._validator.validate(this.value.toString())) ||\n                    this.forceInvalid\n                      ? \"invalid\"\n                      : \"valid\") +\n                    (this.inputType == \"number\" ? \" alignEnd\" : \"alignStart\")\n                  }\n                  type={this.inputType}\n                  inputmode={this.inputFormMode}\n                  step={this.inputStep}\n                  disabled={this.disabled}\n                  readonly={this.readonly}\n                  debounce={this.debounce}\n                  label={\n                    (this.labelTag\n                      ? TranslationService.getTransl(\n                          this.labelTag,\n                          this.labelText,\n                          this.labelReplace\n                        )\n                      : this.labelText\n                        ? this.labelText\n                        : \"\") +\n                    (this.appendText ? this.appendText : \"\") +\n                    (this.validator && this.validator.includes(\"required\")\n                      ? \"*\"\n                      : \"\")\n                  }\n                  label-placement={\n                    this.labelTag || this.labelText ? this.labelPosition : null\n                  }\n                  placeholder={this.placeholder}\n                  onIonInput={(ev) => this.handleChange(ev)}\n                  onIonBlur={() =>\n                    !this.isAddess ? this.handleBlur() : undefined\n                  }\n                  onIonFocus={(ev) => this.handleFocus(ev)}\n                  value={\n                    this.multiLanguage\n                      ? this.value[this.selectedLanguage]\n                      : this.value\n                  }\n                />\n              )}\n            </ion-item>\n          ),\n          this.showError &&\n          this.validator &&\n          !this._validator.validate(\n            this.multiLanguage ? this.value[this.selectedLanguage] : this.value\n          ) ? (\n            <div>\n              <my-transl\n                class='validation-error'\n                tag={this._validator.errorMessage.tag}\n                text={this._validator.errorMessage.text}\n                replace={this._validator.errorMessage.replace}\n              ></my-transl>\n            </div>\n          ) : null,\n          this.isAddess ? (\n            <div>\n              <app-geocode\n                address={this.value ? this.value.toString() : null}\n                onLocationSelected={(ev) => this.selectLocation(ev.detail)}\n                onLocationsFound={(ev) => this.formLocationsFound.emit(ev)}\n                gotFocus={this.gotFocus}\n              ></app-geocode>\n            </div>\n          ) : undefined,\n        ]\n      ),\n    ];\n  }\n}\n","app-geocode {\n    /* Component styles go here */\n}\n","import {\n  Component,\n  h,\n  Prop,\n  Watch,\n  State,\n  Event,\n  EventEmitter,\n  Host,\n} from \"@stencil/core\";\nimport {LOCATIONIQ_GEOCODE} from \"../../../../../global/env\";\nimport {LocationIQ} from \"../../../../../services/common/map\";\n\n@Component({\n  tag: \"app-geocode\",\n  styleUrl: \"app-geocode.scss\",\n})\nexport class AppGeocode {\n  @Event() locationsFound: EventEmitter;\n  @Event() locationSelected: EventEmitter;\n  geocoder: any;\n  @Prop({mutable: true}) address: string = \"\";\n  @Prop({mutable: true}) gotFocus: boolean = false;\n  timer: number;\n  resultFound = false;\n  showNoResults = false;\n\n  @State() results: Array<LocationIQ> = [];\n\n  @Watch(\"address\")\n  startTimer() {\n    this.resultFound = false;\n    //wait for user to finish typing\n    this.timer = 1500;\n    this.countdown();\n  }\n\n  countdown() {\n    const timer = setTimeout(() => {\n      this.timer -= 1;\n      if (this.timer == 0) {\n        this.fetchGeocode();\n      } else {\n        clearTimeout(timer);\n        this.countdown();\n      }\n    }, 1);\n  }\n\n  async fetchGeocode() {\n    if (this.address && this.address.length > 10) {\n      const req =\n        \"https://eu1.locationiq.com/v1/search.php?limit=10&addressdetails=1&key=\" +\n        LOCATIONIQ_GEOCODE +\n        \"&q=\" +\n        this.address.replace(\" \", \"+\") +\n        \"&format=json&accept-language=en\";\n      fetch(req).then(\n        async (response) => {\n          if (response.ok) {\n            this.results = await response.json();\n            this.showNoResults = false;\n            this.locationsFound.emit(this.results);\n          } else {\n            this.results = [];\n            this.showNoResults = true;\n            this.locationsFound.emit(false);\n          }\n        },\n        () => {\n          this.results = [];\n          this.showNoResults = true;\n          this.locationsFound.emit(false);\n        }\n      );\n    }\n  }\n\n  selectLocation(loc: LocationIQ) {\n    this.results = [];\n    this.address = loc.display_name;\n    this.locationSelected.emit(loc);\n    this.resultFound = true;\n  }\n\n  render() {\n    return (\n      <Host>\n        {!this.resultFound && this.gotFocus ? (\n          <ion-list>\n            {this.address &&\n            this.address.length > 0 &&\n            this.results.length == 0 &&\n            !this.showNoResults ? (\n              <ion-item color=\"light\">\n                <ion-icon\n                  name=\"navigate-circle-outline\"\n                  slot=\"start\"\n                ></ion-icon>\n                <ion-label>\n                  <ion-skeleton-text\n                    animated\n                    style={{width: \"60%\"}}\n                  ></ion-skeleton-text>\n                </ion-label>\n              </ion-item>\n            ) : undefined}\n            {this.showNoResults ? (\n              <ion-item color=\"danger\">\n                <ion-icon name=\"alert\" slot=\"start\"></ion-icon>\n                <ion-label>\n                  <my-transl\n                    tag=\"no-locations\"\n                    text=\"No locations found!\"\n                  ></my-transl>\n                </ion-label>\n              </ion-item>\n            ) : (\n              this.results.map((loc) => (\n                <ion-item\n                  button\n                  color=\"dark\"\n                  onClick={() => this.selectLocation(loc)}\n                >\n                  <ion-icon\n                    name=\"navigate-circle-outline\"\n                    slot=\"start\"\n                  ></ion-icon>\n                  <ion-label>{loc.display_name}</ion-label>\n                </ion-item>\n              ))\n            )}\n          </ion-list>\n        ) : undefined}\n      </Host>\n    );\n  }\n}\n","app-modal-footer {\n    /* Component styles go here */\n}\n","import {Component, h, Event, EventEmitter, Prop} from \"@stencil/core\";\n\n@Component({\n  tag: \"app-modal-footer\",\n  styleUrl: \"app-modal-footer.css\",\n})\nexport class AppModalFooter {\n  @Event() cancelEmit: EventEmitter;\n  @Event() saveEmit: EventEmitter;\n  @Prop() showSave = true;\n  @Prop({mutable: true}) disableSave = false;\n  @Prop() color = null;\n  @Prop() saveTag = {\n    tag: \"save\",\n    text: \"Save\",\n  };\n  @Prop() cancelTag = {\n    tag: \"cancel\",\n    text: \"Cancel\",\n  };\n  componentWillLoad() {\n    !this.showSave\n      ? (this.cancelTag = {tag: \"close\", text: \"Close\"})\n      : undefined;\n  }\n  render() {\n    return (\n      <ion-footer class=\"ion-no-border\">\n        <ion-toolbar color={this.color}>\n          <ion-grid>\n            <ion-row>\n              {this.showSave ? (\n                <ion-col>\n                  <ion-button\n                    expand=\"block\"\n                    fill={this.color ? \"solid\" : \"outline\"}\n                    size=\"small\"\n                    color=\"success\"\n                    disabled={this.disableSave}\n                    onClick={() => this.saveEmit.emit()}\n                  >\n                    <my-transl\n                      tag={this.saveTag.tag}\n                      text={this.saveTag.text}\n                    />\n                  </ion-button>\n                </ion-col>\n              ) : undefined}\n              <ion-col>\n                <ion-button\n                  expand=\"block\"\n                  fill={this.color ? \"solid\" : \"outline\"}\n                  size=\"small\"\n                  color=\"danger\"\n                  onClick={() => this.cancelEmit.emit()}\n                >\n                  <my-transl\n                    tag={this.cancelTag.tag}\n                    text={this.cancelTag.text}\n                  />\n                </ion-button>\n              </ion-col>\n            </ion-row>\n          </ion-grid>\n        </ion-toolbar>\n      </ion-footer>\n    );\n  }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the input\n   *\n   * @prop --color: Color of the input text\n   *\n   * @prop --padding-top: Top padding of the input\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the input\n   * @prop --padding-bottom: Bottom padding of the input\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the input\n   *\n   * @prop --placeholder-color: Color of the input placeholder text\n   * @prop --placeholder-font-style: Font style of the input placeholder text\n   * @prop --placeholder-font-weight: Font weight of the input placeholder text\n   * @prop --placeholder-opacity: Opacity of the input placeholder text\n   *\n   * @prop --highlight-height: The height of the highlight on the input. Only applies to md mode.\n   * @prop --highlight-color-focused: The color of the highlight on the input when focused\n   * @prop --highlight-color-valid: The color of the highlight on the input when valid\n   * @prop --highlight-color-invalid: The color of the highlight on the input when invalid\n   *\n   * @prop --border-color: Color of the border below the input when using helper text, error text, or counter\n   * @prop --border-radius: Radius of the input. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.\n   * @prop --border-style: Style of the border below the input when using helper text, error text, or counter\n   * @prop --border-width: Width of the border below the input when using helper text, error text, or counter\n   */\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: var(--ion-placeholder-opacity, 0.6);\n  --padding-top: 0px;\n  --padding-end: 0px;\n  --padding-bottom: 0px;\n  --padding-start: 0px;\n  --background: transparent;\n  --color: initial;\n  --border-style: solid;\n  --highlight-color-focused: var(--ion-color-primary, #0054e9);\n  --highlight-color-valid: var(--ion-color-success, #2dd55b);\n  --highlight-color-invalid: var(--ion-color-danger, #c5000f);\n  /**\n   * This is a private API that is used to switch\n   * out the highlight color based on the state\n   * of the component without having to write\n   * different selectors for different fill variants.\n   */\n  --highlight-color: var(--highlight-color-focused);\n  display: block;\n  position: relative;\n  width: 100%;\n  min-height: 44px;\n  /* stylelint-disable-next-line all */\n  padding: 0 !important;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  z-index: 2;\n}\n\n:host-context(ion-item)[slot=start],\n:host-context(ion-item)[slot=end] {\n  width: auto;\n}\n\n:host(.ion-color) {\n  --highlight-color-focused: var(--ion-color-base);\n}\n\n/**\n * Since the label sits on top of the element,\n * the component needs to be taller otherwise the\n * label will appear too close to the input text.\n */\n:host(.input-label-placement-floating),\n:host(.input-label-placement-stacked) {\n  min-height: 56px;\n}\n\n.native-input {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  display: inline-block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  box-sizing: border-box;\n  appearance: none;\n  /**\n   * This ensures the input\n   * remains on top of any decoration\n   * that we render (particularly the\n   * outline border when fill=\"outline\").\n   * If we did not do this then Axe would\n   * be unable to determine the color\n   * contrast of the input.\n   */\n  z-index: 1;\n}\n.native-input::placeholder {\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n.native-input:-webkit-autofill {\n  background-color: transparent;\n}\n.native-input:invalid {\n  box-shadow: none;\n}\n.native-input::-ms-clear {\n  display: none;\n}\n\n.cloned-input {\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  pointer-events: none;\n}\n.cloned-input {\n  inset-inline-start: 0;\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n.input-clear-icon {\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: auto;\n  margin-bottom: auto;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  background-position: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  border: 0;\n  outline: none;\n  background-color: transparent;\n  background-repeat: no-repeat;\n  color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n  visibility: hidden;\n  appearance: none;\n}\n\n:host(.in-item-color) .input-clear-icon {\n  color: inherit;\n}\n\n/**\n * Normally, we would not want to use :focus\n * here because that would mean tapping the button\n * on mobile would focus it (and keep it focused).\n * However, the clear button always disappears after\n * being activated, so we never get to that state.\n */\n.input-clear-icon:focus {\n  opacity: 0.5;\n}\n\n:host(.has-value) .input-clear-icon {\n  visibility: visible;\n}\n\n.input-wrapper {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: stretch;\n  height: inherit;\n  min-height: inherit;\n  transition: background-color 15ms linear;\n  background: var(--background);\n  line-height: normal;\n}\n\n.native-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: center;\n  width: 100%;\n}\n\n:host(.ion-touched.ion-invalid) {\n  --highlight-color: var(--highlight-color-invalid);\n}\n\n/**\n * The component highlight is only shown\n * on focus, so we can safely set the valid\n * color state when valid. If we\n * set it when .has-focus is present then\n * the highlight color would change\n * from the valid color to the component's\n * color during the transition after the\n * component loses focus.\n */\n:host(.ion-valid) {\n  --highlight-color: var(--highlight-color-valid);\n}\n\n.input-bottom {\n  /**\n   * The bottom content should take on the start and end\n   * padding so it is always aligned with either the label\n   * or the start of the text input.\n   */\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 5px;\n  padding-bottom: 0;\n  display: flex;\n  justify-content: space-between;\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  font-size: 0.75rem;\n}\n\n/**\n * If the input has a validity state, the\n * border and label should reflect that as a color.\n * The invalid state should show if the input is\n * invalid and has already been touched.\n * The valid state should show if the input\n * is valid, has already been touched, and\n * is currently focused. Do not show the valid\n * highlight when the input is blurred.\n */\n:host(.has-focus.ion-valid),\n:host(.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Error text should only be shown when .ion-invalid is\n * present on the input. Otherwise the helper text should\n * be shown.\n */\n.input-bottom .error-text {\n  display: none;\n  color: var(--highlight-color-invalid);\n}\n\n.input-bottom .helper-text {\n  display: block;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n}\n\n:host(.ion-touched.ion-invalid) .input-bottom .error-text {\n  display: block;\n}\n\n:host(.ion-touched.ion-invalid) .input-bottom .helper-text {\n  display: none;\n}\n\n.input-bottom .counter {\n  /**\n   * Counter should always be at\n   * the end of the container even\n   * when no helper/error texts are used.\n   */\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n  white-space: nowrap;\n  padding-inline-start: 16px;\n}\n\n:host(.has-focus) input {\n  caret-color: var(--highlight-color);\n}\n\n.label-text-wrapper {\n  /**\n   * This causes the label to take up\n   * the entire height of its container\n   * while still keeping the text centered.\n   */\n  display: flex;\n  align-items: center;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   * However, we do not set the max\n   * width to 100% because then\n   * only the label would show and users\n   * would not be able to see what they are typing.\n   */\n  max-width: 200px;\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the input\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n}\n\n/**\n * We need to use two elements instead of\n * one. The .label-text-wrapper is responsible\n * for centering the label text vertically regardless\n * of the input height using flexbox.\n *\n * The .label-text element is responsible for controlling\n * overflow when label-placement=\"fixed\".\n * We want the ellipses to show up when the\n * fixed label overflows, but text-overflow: ellipsis only\n * works on block-level elements. A flex item is\n * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).\n */\n.label-text,\n::slotted([slot=label]) {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden,\n.input-outline-notch-hidden {\n  display: none;\n}\n\n.input-wrapper input {\n  /**\n   * When the floating label appears on top of the\n   * input, we need to fade the input out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL.\n */\n:host(.input-label-placement-start) .input-wrapper {\n  flex-direction: row;\n}\n\n:host(.input-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the input in LTR and\n * on the left in RTL.\n */\n:host(.input-label-placement-end) .input-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the input should be on the start\n * when the label sits at the end.\n */\n:host(.input-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.input-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.input-label-placement-fixed) .label-text {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Stacked: Label sits above the input and is scaled down.\n * Floating: Label sits over the input when the input has no\n * value and is blurred. Label sits above the input and is scaled\n * down when the input is focused or has a value.\n *\n */\n:host(.input-label-placement-stacked) .input-wrapper,\n:host(.input-label-placement-floating) .input-wrapper {\n  flex-direction: column;\n  align-items: start;\n}\n\n/**\n * Ensures that the label animates\n * up and to the left in LTR or\n * up and to the right in RTL.\n */\n:host(.input-label-placement-stacked) .label-text-wrapper,\n:host(.input-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  max-width: 100%;\n  /**\n   * The 2 ensures the label\n   * remains on top of any browser\n   * autofill background too.\n   */\n  z-index: 2;\n}\n:host-context([dir=rtl]):host(.input-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).input-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.input-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).input-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.input-label-placement-stacked:dir(rtl)) .label-text-wrapper, :host(.input-label-placement-floating:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n/**\n * Ensures the input does not\n * overlap the label.\n */\n:host(.input-label-placement-stacked) input,\n:host(.input-label-placement-floating) input {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 1px;\n  margin-bottom: 0;\n}\n\n/**\n * This makes the label sit over the input\n * when the input is blurred and has no value.\n */\n:host(.input-label-placement-floating) .label-text-wrapper {\n  transform: translateY(100%) scale(1);\n}\n\n/**\n * The input should be hidden when the label\n * is on top of the input. This prevents the label\n * from overlapping any placeholder value.\n */\n:host(.input-label-placement-floating) input {\n  opacity: 0;\n}\n\n:host(.has-focus.input-label-placement-floating) input,\n:host(.has-value.input-label-placement-floating) input {\n  opacity: 1;\n}\n\n/**\n * This makes the label sit above the input.\n */\n:host(.label-floating) .label-text-wrapper {\n  transform: translateY(50%) scale(0.75);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n::slotted([slot=start]:last-of-type) {\n  margin-inline-end: 16px;\n  margin-inline-start: 0;\n}\n\n::slotted([slot=end]:first-of-type) {\n  margin-inline-start: 16px;\n  margin-inline-end: 0;\n}\n\n/**\n * The input password toggle component should be hidden when the input is readonly/disabled\n * because it is not possible to edit a password.\n */\n:host([disabled]) ::slotted(ion-input-password-toggle),\n:host([readonly]) ::slotted(ion-input-password-toggle) {\n  display: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border-width: 0.55px;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));\n  --highlight-height: 0px;\n  font-size: inherit;\n}\n\n.input-clear-icon ion-icon {\n  width: 18px;\n  height: 18px;\n}\n\n:host(.input-disabled) {\n  opacity: 0.3;\n}\n\n/**\n * Slotted buttons have a lot of default padding that can\n * cause them to look misaligned from other pieces such\n * as the control's label, especially when using a clear\n * fill. We also make them circular to ensure that non-\n * clear buttons and the focus/hover state on clear ones\n * don't look too crowded.\n */\n::slotted(ion-button[slot=start].button-has-icon-only),\n::slotted(ion-button[slot=end].button-has-icon-only) {\n  --border-radius: 50%;\n  --padding-start: 0;\n  --padding-end: 0;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  aspect-ratio: 1;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the input\n   *\n   * @prop --color: Color of the input text\n   *\n   * @prop --padding-top: Top padding of the input\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the input\n   * @prop --padding-bottom: Bottom padding of the input\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the input\n   *\n   * @prop --placeholder-color: Color of the input placeholder text\n   * @prop --placeholder-font-style: Font style of the input placeholder text\n   * @prop --placeholder-font-weight: Font weight of the input placeholder text\n   * @prop --placeholder-opacity: Opacity of the input placeholder text\n   *\n   * @prop --highlight-height: The height of the highlight on the input. Only applies to md mode.\n   * @prop --highlight-color-focused: The color of the highlight on the input when focused\n   * @prop --highlight-color-valid: The color of the highlight on the input when valid\n   * @prop --highlight-color-invalid: The color of the highlight on the input when invalid\n   *\n   * @prop --border-color: Color of the border below the input when using helper text, error text, or counter\n   * @prop --border-radius: Radius of the input. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.\n   * @prop --border-style: Style of the border below the input when using helper text, error text, or counter\n   * @prop --border-width: Width of the border below the input when using helper text, error text, or counter\n   */\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: var(--ion-placeholder-opacity, 0.6);\n  --padding-top: 0px;\n  --padding-end: 0px;\n  --padding-bottom: 0px;\n  --padding-start: 0px;\n  --background: transparent;\n  --color: initial;\n  --border-style: solid;\n  --highlight-color-focused: var(--ion-color-primary, #0054e9);\n  --highlight-color-valid: var(--ion-color-success, #2dd55b);\n  --highlight-color-invalid: var(--ion-color-danger, #c5000f);\n  /**\n   * This is a private API that is used to switch\n   * out the highlight color based on the state\n   * of the component without having to write\n   * different selectors for different fill variants.\n   */\n  --highlight-color: var(--highlight-color-focused);\n  display: block;\n  position: relative;\n  width: 100%;\n  min-height: 44px;\n  /* stylelint-disable-next-line all */\n  padding: 0 !important;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  z-index: 2;\n}\n\n:host-context(ion-item)[slot=start],\n:host-context(ion-item)[slot=end] {\n  width: auto;\n}\n\n:host(.ion-color) {\n  --highlight-color-focused: var(--ion-color-base);\n}\n\n/**\n * Since the label sits on top of the element,\n * the component needs to be taller otherwise the\n * label will appear too close to the input text.\n */\n:host(.input-label-placement-floating),\n:host(.input-label-placement-stacked) {\n  min-height: 56px;\n}\n\n.native-input {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  display: inline-block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  box-sizing: border-box;\n  appearance: none;\n  /**\n   * This ensures the input\n   * remains on top of any decoration\n   * that we render (particularly the\n   * outline border when fill=\"outline\").\n   * If we did not do this then Axe would\n   * be unable to determine the color\n   * contrast of the input.\n   */\n  z-index: 1;\n}\n.native-input::placeholder {\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n.native-input:-webkit-autofill {\n  background-color: transparent;\n}\n.native-input:invalid {\n  box-shadow: none;\n}\n.native-input::-ms-clear {\n  display: none;\n}\n\n.cloned-input {\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  pointer-events: none;\n}\n.cloned-input {\n  inset-inline-start: 0;\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n.input-clear-icon {\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: auto;\n  margin-bottom: auto;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  background-position: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  border: 0;\n  outline: none;\n  background-color: transparent;\n  background-repeat: no-repeat;\n  color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n  visibility: hidden;\n  appearance: none;\n}\n\n:host(.in-item-color) .input-clear-icon {\n  color: inherit;\n}\n\n/**\n * Normally, we would not want to use :focus\n * here because that would mean tapping the button\n * on mobile would focus it (and keep it focused).\n * However, the clear button always disappears after\n * being activated, so we never get to that state.\n */\n.input-clear-icon:focus {\n  opacity: 0.5;\n}\n\n:host(.has-value) .input-clear-icon {\n  visibility: visible;\n}\n\n.input-wrapper {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: stretch;\n  height: inherit;\n  min-height: inherit;\n  transition: background-color 15ms linear;\n  background: var(--background);\n  line-height: normal;\n}\n\n.native-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: center;\n  width: 100%;\n}\n\n:host(.ion-touched.ion-invalid) {\n  --highlight-color: var(--highlight-color-invalid);\n}\n\n/**\n * The component highlight is only shown\n * on focus, so we can safely set the valid\n * color state when valid. If we\n * set it when .has-focus is present then\n * the highlight color would change\n * from the valid color to the component's\n * color during the transition after the\n * component loses focus.\n */\n:host(.ion-valid) {\n  --highlight-color: var(--highlight-color-valid);\n}\n\n.input-bottom {\n  /**\n   * The bottom content should take on the start and end\n   * padding so it is always aligned with either the label\n   * or the start of the text input.\n   */\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 5px;\n  padding-bottom: 0;\n  display: flex;\n  justify-content: space-between;\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  font-size: 0.75rem;\n}\n\n/**\n * If the input has a validity state, the\n * border and label should reflect that as a color.\n * The invalid state should show if the input is\n * invalid and has already been touched.\n * The valid state should show if the input\n * is valid, has already been touched, and\n * is currently focused. Do not show the valid\n * highlight when the input is blurred.\n */\n:host(.has-focus.ion-valid),\n:host(.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Error text should only be shown when .ion-invalid is\n * present on the input. Otherwise the helper text should\n * be shown.\n */\n.input-bottom .error-text {\n  display: none;\n  color: var(--highlight-color-invalid);\n}\n\n.input-bottom .helper-text {\n  display: block;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n}\n\n:host(.ion-touched.ion-invalid) .input-bottom .error-text {\n  display: block;\n}\n\n:host(.ion-touched.ion-invalid) .input-bottom .helper-text {\n  display: none;\n}\n\n.input-bottom .counter {\n  /**\n   * Counter should always be at\n   * the end of the container even\n   * when no helper/error texts are used.\n   */\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n  white-space: nowrap;\n  padding-inline-start: 16px;\n}\n\n:host(.has-focus) input {\n  caret-color: var(--highlight-color);\n}\n\n.label-text-wrapper {\n  /**\n   * This causes the label to take up\n   * the entire height of its container\n   * while still keeping the text centered.\n   */\n  display: flex;\n  align-items: center;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   * However, we do not set the max\n   * width to 100% because then\n   * only the label would show and users\n   * would not be able to see what they are typing.\n   */\n  max-width: 200px;\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the input\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n}\n\n/**\n * We need to use two elements instead of\n * one. The .label-text-wrapper is responsible\n * for centering the label text vertically regardless\n * of the input height using flexbox.\n *\n * The .label-text element is responsible for controlling\n * overflow when label-placement=\"fixed\".\n * We want the ellipses to show up when the\n * fixed label overflows, but text-overflow: ellipsis only\n * works on block-level elements. A flex item is\n * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).\n */\n.label-text,\n::slotted([slot=label]) {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden,\n.input-outline-notch-hidden {\n  display: none;\n}\n\n.input-wrapper input {\n  /**\n   * When the floating label appears on top of the\n   * input, we need to fade the input out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL.\n */\n:host(.input-label-placement-start) .input-wrapper {\n  flex-direction: row;\n}\n\n:host(.input-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the input in LTR and\n * on the left in RTL.\n */\n:host(.input-label-placement-end) .input-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the input should be on the start\n * when the label sits at the end.\n */\n:host(.input-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.input-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.input-label-placement-fixed) .label-text {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Stacked: Label sits above the input and is scaled down.\n * Floating: Label sits over the input when the input has no\n * value and is blurred. Label sits above the input and is scaled\n * down when the input is focused or has a value.\n *\n */\n:host(.input-label-placement-stacked) .input-wrapper,\n:host(.input-label-placement-floating) .input-wrapper {\n  flex-direction: column;\n  align-items: start;\n}\n\n/**\n * Ensures that the label animates\n * up and to the left in LTR or\n * up and to the right in RTL.\n */\n:host(.input-label-placement-stacked) .label-text-wrapper,\n:host(.input-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  max-width: 100%;\n  /**\n   * The 2 ensures the label\n   * remains on top of any browser\n   * autofill background too.\n   */\n  z-index: 2;\n}\n:host-context([dir=rtl]):host(.input-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).input-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.input-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).input-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.input-label-placement-stacked:dir(rtl)) .label-text-wrapper, :host(.input-label-placement-floating:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n/**\n * Ensures the input does not\n * overlap the label.\n */\n:host(.input-label-placement-stacked) input,\n:host(.input-label-placement-floating) input {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 1px;\n  margin-bottom: 0;\n}\n\n/**\n * This makes the label sit over the input\n * when the input is blurred and has no value.\n */\n:host(.input-label-placement-floating) .label-text-wrapper {\n  transform: translateY(100%) scale(1);\n}\n\n/**\n * The input should be hidden when the label\n * is on top of the input. This prevents the label\n * from overlapping any placeholder value.\n */\n:host(.input-label-placement-floating) input {\n  opacity: 0;\n}\n\n:host(.has-focus.input-label-placement-floating) input,\n:host(.has-value.input-label-placement-floating) input {\n  opacity: 1;\n}\n\n/**\n * This makes the label sit above the input.\n */\n:host(.label-floating) .label-text-wrapper {\n  transform: translateY(50%) scale(0.75);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n::slotted([slot=start]:last-of-type) {\n  margin-inline-end: 16px;\n  margin-inline-start: 0;\n}\n\n::slotted([slot=end]:first-of-type) {\n  margin-inline-start: 16px;\n  margin-inline-end: 0;\n}\n\n/**\n * The input password toggle component should be hidden when the input is readonly/disabled\n * because it is not possible to edit a password.\n */\n:host([disabled]) ::slotted(ion-input-password-toggle),\n:host([readonly]) ::slotted(ion-input-password-toggle) {\n  display: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.input-fill-solid) {\n  --background: var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));\n  --border-color: var(--ion-color-step-500, var(--ion-background-color-step-500, gray));\n  --border-radius: 4px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n  min-height: 56px;\n}\n\n/**\n * The solid fill style has a border\n * at the bottom of the input wrapper.\n * As a result, the border on the \"bottom\n * content\" is not needed.\n */\n:host(.input-fill-solid) .input-wrapper {\n  border-bottom: var(--border-width) var(--border-style) var(--border-color);\n}\n\n/**\n * If the input has a validity state, the\n * border should reflect that as a color.\n */\n:host(.has-focus.input-fill-solid.ion-valid),\n:host(.input-fill-solid.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n:host(.input-fill-solid) .input-bottom {\n  border-top: none;\n}\n\n/**\n * Background and border should be\n * slightly darker on hover.\n */\n@media (any-hover: hover) {\n  :host(.input-fill-solid:hover) {\n    --background: var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6));\n    --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n  }\n}\n/**\n * Background and border should be\n * much darker on focus.\n */\n:host(.input-fill-solid.has-focus) {\n  --background: var(--ion-color-step-150, var(--ion-background-color-step-150, #d9d9d9));\n  --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n}\n\n:host(.input-fill-solid) .input-wrapper {\n  /**\n   * Only the top left and top right borders should.\n   * have a radius when using a solid fill.\n   */\n  border-start-start-radius: var(--border-radius);\n  border-start-end-radius: var(--border-radius);\n  border-end-end-radius: 0px;\n  border-end-start-radius: 0px;\n}\n\n:host(.label-floating.input-fill-solid.input-label-placement-floating) .label-text-wrapper {\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.input-fill-outline) {\n  --border-color: var(--ion-color-step-300, var(--ion-background-color-step-300, #b3b3b3));\n  --border-radius: 4px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n  min-height: 56px;\n}\n\n:host(.input-fill-outline.input-shape-round) {\n  --border-radius: 28px;\n  --padding-start: 32px;\n  --padding-end: 32px;\n}\n\n/**\n * If the input has a validity state, the\n * border should reflect that as a color.\n */\n:host(.has-focus.input-fill-outline.ion-valid),\n:host(.input-fill-outline.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Border should be\n * slightly darker on hover.\n */\n@media (any-hover: hover) {\n  :host(.input-fill-outline:hover) {\n    --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n  }\n}\n/**\n * The border should get thicker\n * and take on component color when\n * the input is focused.\n */\n:host(.input-fill-outline.has-focus) {\n  --border-width: var(--highlight-height);\n  --border-color: var(--highlight-color);\n}\n\n/**\n * The bottom content should never have\n * a border with the outline style.\n */\n:host(.input-fill-outline) .input-bottom {\n  border-top: none;\n}\n\n/**\n * Outline inputs do not have a bottom border.\n * Instead, they have a border that wraps the\n * input + label.\n */\n:host(.input-fill-outline) .input-wrapper {\n  border-bottom: none;\n}\n\n:host(.input-fill-outline.input-label-placement-stacked) .label-text-wrapper,\n:host(.input-fill-outline.input-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  position: absolute;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   */\n  max-width: calc(100% - var(--padding-start) - var(--padding-end));\n}\n:host-context([dir=rtl]):host(.input-fill-outline.input-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).input-fill-outline.input-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.input-fill-outline.input-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).input-fill-outline.input-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.input-fill-outline.input-label-placement-stacked:dir(rtl)) .label-text-wrapper, :host(.input-fill-outline.input-label-placement-floating:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n/**\n * The label should appear on top of an outline\n * container that overlaps it so it is always clickable.\n */\n:host(.input-fill-outline) .label-text-wrapper,\n:host(.input-fill-outline) .label-text-wrapper {\n  position: relative;\n}\n\n/**\n * This makes the label sit above the input.\n */\n:host(.label-floating.input-fill-outline) .label-text-wrapper {\n  transform: translateY(-32%) scale(0.75);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   */\n  max-width: calc((100% - var(--padding-start) - var(--padding-end) - 8px) / 0.75);\n}\n\n/**\n * This ensures that the input does not\n * overlap the floating label while still\n * remaining visually centered.\n */\n:host(.input-fill-outline.input-label-placement-stacked) input,\n:host(.input-fill-outline.input-label-placement-floating) input {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 6px;\n  margin-bottom: 6px;\n}\n\n:host(.input-fill-outline) .input-outline-container {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.input-fill-outline) .input-outline-start,\n:host(.input-fill-outline) .input-outline-end {\n  pointer-events: none;\n}\n\n/**\n * By default, each piece of the container should have\n * a top and bottom border. This gives the appearance\n * of a unified container with a border.\n */\n:host(.input-fill-outline) .input-outline-start,\n:host(.input-fill-outline) .input-outline-notch,\n:host(.input-fill-outline) .input-outline-end {\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  border-bottom: var(--border-width) var(--border-style) var(--border-color);\n}\n\n/**\n * Ensures long labels do not cause the notch to flow\n * out of bounds.\n */\n:host(.input-fill-outline) .input-outline-notch {\n  max-width: calc(100% - var(--padding-start) - var(--padding-end));\n}\n\n/**\n * This element ensures that the notch used\n * the size of the scaled text so that the\n * border cut out is the correct width.\n * The text in this element should not\n * be interactive.\n */\n:host(.input-fill-outline) .notch-spacer {\n  /**\n   * We need $input-md-floating-label-padding of padding on the right.\n   * However, we also subtracted $input-md-floating-label-padding from\n   * the width of .input-outline-start\n   * to create space, so we need to take\n   * that into consideration here.\n   */\n  -webkit-padding-end: 8px;\n  padding-inline-end: 8px;\n  font-size: calc(1em * 0.75);\n  opacity: 0;\n  pointer-events: none;\n  /**\n   * The spacer currently inherits\n   * border-box sizing from the Ionic reset styles.\n   * However, we do not want to include padding in\n   * the calculation of the element dimensions.\n   * This code can be removed if input is updated\n   * to use the Shadow DOM.\n   */\n  box-sizing: content-box;\n}\n\n:host(.input-fill-outline) .input-outline-start {\n  border-start-start-radius: var(--border-radius);\n  border-start-end-radius: 0px;\n  border-end-end-radius: 0px;\n  border-end-start-radius: var(--border-radius);\n  -webkit-border-start: var(--border-width) var(--border-style) var(--border-color);\n  border-inline-start: var(--border-width) var(--border-style) var(--border-color);\n  /**\n   * There should be spacing between the translated text\n   * and .input-outline-start. However, we can't add this\n   * spacing onto the notch because it would cause the\n   * label to look like it is not aligned with the\n   * text input. Instead, we subtract a few pixels from\n   * this element.\n   */\n  width: calc(var(--padding-start) - 4px);\n}\n\n:host(.input-fill-outline) .input-outline-end {\n  -webkit-border-end: var(--border-width) var(--border-style) var(--border-color);\n  border-inline-end: var(--border-width) var(--border-style) var(--border-color);\n  border-start-start-radius: 0px;\n  border-start-end-radius: var(--border-radius);\n  border-end-end-radius: var(--border-radius);\n  border-end-start-radius: 0px;\n  /**\n   * The ending outline fragment\n   * should take up the remaining free space.\n   */\n  flex-grow: 1;\n}\n\n/**\n * When the input either has focus or a value,\n * there should be a \"cut out\" at the top for\n * the floating/stacked label. We simulate this \"cut out\"\n * by removing the top border from the notch fragment.\n */\n:host(.label-floating.input-fill-outline) .input-outline-notch {\n  border-top: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border-width: 1px;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));\n  --highlight-height: 2px;\n  font-size: inherit;\n}\n\n.input-clear-icon ion-icon {\n  width: 22px;\n  height: 22px;\n}\n\n:host(.input-disabled) {\n  opacity: 0.38;\n}\n\n/**\n * If the input has a validity state, the\n * border and label should reflect that as a color.\n */\n:host(.has-focus.ion-valid),\n:host(.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n.input-bottom .counter {\n  letter-spacing: 0.0333333333em;\n}\n\n/**\n * When the input is focused the label should\n * take on the highlight color. This should\n * only apply to floating or stacked labels.\n */\n:host(.input-label-placement-floating.has-focus) .label-text-wrapper,\n:host(.input-label-placement-stacked.has-focus) .label-text-wrapper {\n  color: var(--highlight-color);\n}\n\n:host(.has-focus.input-label-placement-floating.ion-valid) .label-text-wrapper,\n:host(.input-label-placement-floating.ion-touched.ion-invalid) .label-text-wrapper,\n:host(.has-focus.input-label-placement-stacked.ion-valid) .label-text-wrapper,\n:host(.input-label-placement-stacked.ion-touched.ion-invalid) .label-text-wrapper {\n  color: var(--highlight-color);\n}\n\n.input-highlight {\n  bottom: -1px;\n  position: absolute;\n  width: 100%;\n  height: var(--highlight-height);\n  transform: scale(0);\n  transition: transform 200ms;\n  background: var(--highlight-color);\n}\n.input-highlight {\n  inset-inline-start: 0;\n}\n\n:host(.has-focus) .input-highlight {\n  transform: scale(1);\n}\n\n/**\n * Adjust the highlight up by 1px\n * so it is not cut off by the\n * the item's line (if one is present).\n */\n:host(.in-item) .input-highlight {\n  bottom: 0;\n}\n:host(.in-item) .input-highlight {\n  inset-inline-start: 0;\n}\n\n:host(.input-shape-round) {\n  --border-radius: 16px;\n}\n\n/**\n * Slotted buttons have a lot of default padding that can\n * cause them to look misaligned from other pieces such\n * as the control's label, especially when using a clear\n * fill. We also make them circular to ensure that non-\n * clear buttons and the focus/hover state on clear ones\n * don't look too crowded.\n */\n::slotted(ion-button[slot=start].button-has-icon-only),\n::slotted(ion-button[slot=end].button-has-icon-only) {\n  --border-radius: 50%;\n  --padding-start: 8px;\n  --padding-end: 8px;\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  aspect-ratio: 1;\n  min-height: 40px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, forceUpdate, h } from \"@stencil/core\";\nimport { createNotchController } from \"../../utils/forms/index\";\nimport { inheritAriaAttributes, debounceEvent, inheritAttributes, componentOnReady } from \"../../utils/helpers\";\nimport { createSlotMutationController } from \"../../utils/slot-mutation-controller\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { closeCircle, closeSharp } from \"ionicons/icons\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { getCounterText } from \"./input.utils\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot label - The label text to associate with the input. Use the `labelPlacement` property to control where the label is placed relative to the input. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)\n * @slot start - Content to display at the leading edge of the input. (EXPERIMENTAL)\n * @slot end - Content to display at the trailing edge of the input. (EXPERIMENTAL)\n */\nexport class Input {\n    constructor() {\n        this.inputId = `ion-input-${inputIds++}`;\n        this.inheritedAttributes = {};\n        this.isComposing = false;\n        /**\n         * `true` if the input was cleared as a result of the user typing\n         * with `clearOnEdit` enabled.\n         *\n         * Resets when the input loses focus.\n         */\n        this.didInputClearOnEdit = false;\n        this.onInput = (ev) => {\n            const input = ev.target;\n            if (input) {\n                this.value = input.value || '';\n            }\n            this.emitInputChange(ev);\n        };\n        this.onChange = (ev) => {\n            this.emitValueChange(ev);\n        };\n        this.onBlur = (ev) => {\n            this.hasFocus = false;\n            if (this.focusedValue !== this.value) {\n                /**\n                 * Emits the `ionChange` event when the input value\n                 * is different than the value when the input was focused.\n                 */\n                this.emitValueChange(ev);\n            }\n            this.didInputClearOnEdit = false;\n            this.ionBlur.emit(ev);\n        };\n        this.onFocus = (ev) => {\n            this.hasFocus = true;\n            this.focusedValue = this.value;\n            this.ionFocus.emit(ev);\n        };\n        this.onKeydown = (ev) => {\n            this.checkClearOnEdit(ev);\n        };\n        this.onCompositionStart = () => {\n            this.isComposing = true;\n        };\n        this.onCompositionEnd = () => {\n            this.isComposing = false;\n        };\n        this.clearTextInput = (ev) => {\n            if (this.clearInput && !this.readonly && !this.disabled && ev) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                // Attempt to focus input again after pressing clear button\n                this.setFocus();\n            }\n            this.value = '';\n            this.emitInputChange(ev);\n        };\n        this.hasFocus = false;\n        this.color = undefined;\n        this.autocapitalize = 'off';\n        this.autocomplete = 'off';\n        this.autocorrect = 'off';\n        this.autofocus = false;\n        this.clearInput = false;\n        this.clearInputIcon = undefined;\n        this.clearOnEdit = undefined;\n        this.counter = false;\n        this.counterFormatter = undefined;\n        this.debounce = undefined;\n        this.disabled = false;\n        this.enterkeyhint = undefined;\n        this.errorText = undefined;\n        this.fill = undefined;\n        this.inputmode = undefined;\n        this.helperText = undefined;\n        this.label = undefined;\n        this.labelPlacement = 'start';\n        this.max = undefined;\n        this.maxlength = undefined;\n        this.min = undefined;\n        this.minlength = undefined;\n        this.multiple = undefined;\n        this.name = this.inputId;\n        this.pattern = undefined;\n        this.placeholder = undefined;\n        this.readonly = false;\n        this.required = false;\n        this.shape = undefined;\n        this.spellcheck = false;\n        this.step = undefined;\n        this.type = 'text';\n        this.value = '';\n    }\n    debounceChanged() {\n        const { ionInput, debounce, originalIonInput } = this;\n        /**\n         * If debounce is undefined, we have to manually revert the ionInput emitter in case\n         * debounce used to be set to a number. Otherwise, the event would stay debounced.\n         */\n        this.ionInput = debounce === undefined ? originalIonInput !== null && originalIonInput !== void 0 ? originalIonInput : ionInput : debounceEvent(ionInput, debounce);\n    }\n    /**\n     * Whenever the type on the input changes we need\n     * to update the internal type prop on the password\n     * toggle so that that correct icon is shown.\n     */\n    onTypeChange() {\n        const passwordToggle = this.el.querySelector('ion-input-password-toggle');\n        if (passwordToggle) {\n            passwordToggle.type = this.type;\n        }\n    }\n    /**\n     * Update the native input element when the value changes\n     */\n    valueChanged() {\n        const nativeInput = this.nativeInput;\n        const value = this.getValue();\n        if (nativeInput && nativeInput.value !== value && !this.isComposing) {\n            /**\n             * Assigning the native input's value on attribute\n             * value change, allows `ionInput` implementations\n             * to override the control's value.\n             *\n             * Used for patterns such as input trimming (removing whitespace),\n             * or input masking.\n             */\n            nativeInput.value = value;\n        }\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, ['tabindex', 'title', 'data-form-type']));\n    }\n    connectedCallback() {\n        const { el } = this;\n        this.slotMutationController = createSlotMutationController(el, ['label', 'start', 'end'], () => forceUpdate(this));\n        this.notchController = createNotchController(el, () => this.notchSpacerEl, () => this.labelSlot);\n        this.debounceChanged();\n        if (Build.isBrowser) {\n            document.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n                detail: this.el,\n            }));\n        }\n    }\n    componentDidLoad() {\n        this.originalIonInput = this.ionInput;\n        /**\n         * Set the type on the password toggle in the event that this input's\n         * type was set async and does not match the default type for the password toggle.\n         * This can happen when the type is bound using a JS framework binding syntax\n         * such as [type] in Angular.\n         */\n        this.onTypeChange();\n        this.debounceChanged();\n    }\n    componentDidRender() {\n        var _a;\n        (_a = this.notchController) === null || _a === void 0 ? void 0 : _a.calculateNotchWidth();\n    }\n    disconnectedCallback() {\n        if (Build.isBrowser) {\n            document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n                detail: this.el,\n            }));\n        }\n        if (this.slotMutationController) {\n            this.slotMutationController.destroy();\n            this.slotMutationController = undefined;\n        }\n        if (this.notchController) {\n            this.notchController.destroy();\n            this.notchController = undefined;\n        }\n    }\n    /**\n     * Sets focus on the native `input` in `ion-input`. Use this method instead of the global\n     * `input.focus()`.\n     *\n     * Developers who wish to focus an input when a page enters\n     * should call `setFocus()` in the `ionViewDidEnter()` lifecycle method.\n     *\n     * Developers who wish to focus an input when an overlay is presented\n     * should call `setFocus` after `didPresent` has resolved.\n     *\n     * See [managing focus](/docs/developing/managing-focus) for more information.\n     */\n    async setFocus() {\n        if (this.nativeInput) {\n            this.nativeInput.focus();\n        }\n    }\n    /**\n     * Returns the native `<input>` element used under the hood.\n     */\n    async getInputElement() {\n        /**\n         * If this gets called in certain early lifecycle hooks (ex: Vue onMounted),\n         * nativeInput won't be defined yet with the custom elements build, so wait for it to load in.\n         */\n        if (!this.nativeInput) {\n            await new Promise((resolve) => componentOnReady(this.el, resolve));\n        }\n        return Promise.resolve(this.nativeInput);\n    }\n    /**\n     * Emits an `ionChange` event.\n     *\n     * This API should be called for user committed changes.\n     * This API should not be used for external value changes.\n     */\n    emitValueChange(event) {\n        const { value } = this;\n        // Checks for both null and undefined values\n        const newValue = value == null ? value : value.toString();\n        // Emitting a value change should update the internal state for tracking the focused value\n        this.focusedValue = newValue;\n        this.ionChange.emit({ value: newValue, event });\n    }\n    /**\n     * Emits an `ionInput` event.\n     */\n    emitInputChange(event) {\n        const { value } = this;\n        // Checks for both null and undefined values\n        const newValue = value == null ? value : value.toString();\n        this.ionInput.emit({ value: newValue, event });\n    }\n    shouldClearOnEdit() {\n        const { type, clearOnEdit } = this;\n        return clearOnEdit === undefined ? type === 'password' : clearOnEdit;\n    }\n    getValue() {\n        return typeof this.value === 'number' ? this.value.toString() : (this.value || '').toString();\n    }\n    checkClearOnEdit(ev) {\n        if (!this.shouldClearOnEdit()) {\n            return;\n        }\n        /**\n         * The following keys do not modify the\n         * contents of the input. As a result, pressing\n         * them should not edit the input.\n         *\n         * We can't check to see if the value of the input\n         * was changed because we call checkClearOnEdit\n         * in a keydown listener, and the key has not yet\n         * been added to the input.\n         */\n        const IGNORED_KEYS = ['Enter', 'Tab', 'Shift', 'Meta', 'Alt', 'Control'];\n        const pressedIgnoredKey = IGNORED_KEYS.includes(ev.key);\n        /**\n         * Clear the input if the control has not been previously cleared during focus.\n         * Do not clear if the user hitting enter to submit a form.\n         */\n        if (!this.didInputClearOnEdit && this.hasValue() && !pressedIgnoredKey) {\n            this.value = '';\n            this.emitInputChange(ev);\n        }\n        /**\n         * Pressing an IGNORED_KEYS first and\n         * then an allowed key will cause the input to not\n         * be cleared.\n         */\n        if (!pressedIgnoredKey) {\n            this.didInputClearOnEdit = true;\n        }\n    }\n    hasValue() {\n        return this.getValue().length > 0;\n    }\n    /**\n     * Renders the helper text or error text values\n     */\n    renderHintText() {\n        const { helperText, errorText } = this;\n        return [h(\"div\", { class: \"helper-text\" }, helperText), h(\"div\", { class: \"error-text\" }, errorText)];\n    }\n    renderCounter() {\n        const { counter, maxlength, counterFormatter, value } = this;\n        if (counter !== true || maxlength === undefined) {\n            return;\n        }\n        return h(\"div\", { class: \"counter\" }, getCounterText(value, maxlength, counterFormatter));\n    }\n    /**\n     * Responsible for rendering helper text,\n     * error text, and counter. This element should only\n     * be rendered if hint text is set or counter is enabled.\n     */\n    renderBottomContent() {\n        const { counter, helperText, errorText, maxlength } = this;\n        /**\n         * undefined and empty string values should\n         * be treated as not having helper/error text.\n         */\n        const hasHintText = !!helperText || !!errorText;\n        const hasCounter = counter === true && maxlength !== undefined;\n        if (!hasHintText && !hasCounter) {\n            return;\n        }\n        return (h(\"div\", { class: \"input-bottom\" }, this.renderHintText(), this.renderCounter()));\n    }\n    renderLabel() {\n        const { label } = this;\n        return (h(\"div\", { class: {\n                'label-text-wrapper': true,\n                'label-text-wrapper-hidden': !this.hasLabel,\n            } }, label === undefined ? h(\"slot\", { name: \"label\" }) : h(\"div\", { class: \"label-text\" }, label)));\n    }\n    /**\n     * Gets any content passed into the `label` slot,\n     * not the <slot> definition.\n     */\n    get labelSlot() {\n        return this.el.querySelector('[slot=\"label\"]');\n    }\n    /**\n     * Returns `true` if label content is provided\n     * either by a prop or a content. If you want\n     * to get the plaintext value of the label use\n     * the `labelText` getter instead.\n     */\n    get hasLabel() {\n        return this.label !== undefined || this.labelSlot !== null;\n    }\n    /**\n     * Renders the border container\n     * when fill=\"outline\".\n     */\n    renderLabelContainer() {\n        const mode = getIonMode(this);\n        const hasOutlineFill = mode === 'md' && this.fill === 'outline';\n        if (hasOutlineFill) {\n            /**\n             * The outline fill has a special outline\n             * that appears around the input and the label.\n             * Certain stacked and floating label placements cause the\n             * label to translate up and create a \"cut out\"\n             * inside of that border by using the notch-spacer element.\n             */\n            return [\n                h(\"div\", { class: \"input-outline-container\" }, h(\"div\", { class: \"input-outline-start\" }), h(\"div\", { class: {\n                        'input-outline-notch': true,\n                        'input-outline-notch-hidden': !this.hasLabel,\n                    } }, h(\"div\", { class: \"notch-spacer\", \"aria-hidden\": \"true\", ref: (el) => (this.notchSpacerEl = el) }, this.label)), h(\"div\", { class: \"input-outline-end\" })),\n                this.renderLabel(),\n            ];\n        }\n        /**\n         * If not using the outline style,\n         * we can render just the label.\n         */\n        return this.renderLabel();\n    }\n    render() {\n        const { disabled, fill, readonly, shape, inputId, labelPlacement, el, hasFocus, clearInputIcon } = this;\n        const mode = getIonMode(this);\n        const value = this.getValue();\n        const inItem = hostContext('ion-item', this.el);\n        const shouldRenderHighlight = mode === 'md' && fill !== 'outline' && !inItem;\n        const defaultClearIcon = mode === 'ios' ? closeCircle : closeSharp;\n        const clearIconData = clearInputIcon !== null && clearInputIcon !== void 0 ? clearInputIcon : defaultClearIcon;\n        const hasValue = this.hasValue();\n        const hasStartEndSlots = el.querySelector('[slot=\"start\"], [slot=\"end\"]') !== null;\n        /**\n         * If the label is stacked, it should always sit above the input.\n         * For floating labels, the label should move above the input if\n         * the input has a value, is focused, or has anything in either\n         * the start or end slot.\n         *\n         * If there is content in the start slot, the label would overlap\n         * it if not forced to float. This is also applied to the end slot\n         * because with the default or solid fills, the input is not\n         * vertically centered in the container, but the label is. This\n         * causes the slots and label to appear vertically offset from each\n         * other when the label isn't floating above the input. This doesn't\n         * apply to the outline fill, but this was not accounted for to keep\n         * things consistent.\n         *\n         * TODO(FW-5592): Remove hasStartEndSlots condition\n         */\n        const labelShouldFloat = labelPlacement === 'stacked' || (labelPlacement === 'floating' && (hasValue || hasFocus || hasStartEndSlots));\n        return (h(Host, { key: '907ce98a82b5cfae5a08504cd79e00a2330b7444', class: createColorClasses(this.color, {\n                [mode]: true,\n                'has-value': hasValue,\n                'has-focus': hasFocus,\n                'label-floating': labelShouldFloat,\n                [`input-fill-${fill}`]: fill !== undefined,\n                [`input-shape-${shape}`]: shape !== undefined,\n                [`input-label-placement-${labelPlacement}`]: true,\n                'in-item': inItem,\n                'in-item-color': hostContext('ion-item.ion-color', this.el),\n                'input-disabled': disabled,\n            }) }, h(\"label\", { key: '59d5bb45d2a5b828bba0ed8687a632a551e2f4d8', class: \"input-wrapper\", htmlFor: inputId }, this.renderLabelContainer(), h(\"div\", { key: 'f93f129d08246d0e9a601c100d718534d6403853', class: \"native-wrapper\" }, h(\"slot\", { key: '54eeb1a6bace662b7eb0d7e27180ea3d7e3a3729', name: \"start\" }), h(\"input\", Object.assign({ key: 'b3e0be55bc1a4a539ae3b0fdcf7fc078723cca16', class: \"native-input\", ref: (input) => (this.nativeInput = input), id: inputId, disabled: disabled, autoCapitalize: this.autocapitalize, autoComplete: this.autocomplete, autoCorrect: this.autocorrect, autoFocus: this.autofocus, enterKeyHint: this.enterkeyhint, inputMode: this.inputmode, min: this.min, max: this.max, minLength: this.minlength, maxLength: this.maxlength, multiple: this.multiple, name: this.name, pattern: this.pattern, placeholder: this.placeholder || '', readOnly: readonly, required: this.required, spellcheck: this.spellcheck, step: this.step, type: this.type, value: value, onInput: this.onInput, onChange: this.onChange, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeydown, onCompositionstart: this.onCompositionStart, onCompositionend: this.onCompositionEnd }, this.inheritedAttributes)), this.clearInput && !readonly && !disabled && (h(\"button\", { key: '5f6373504a6d0d074bfbf875c794d45ea2748175', \"aria-label\": \"reset\", type: \"button\", class: \"input-clear-icon\", onPointerDown: (ev) => {\n                /**\n                 * This prevents mobile browsers from\n                 * blurring the input when the clear\n                 * button is activated.\n                 */\n                ev.preventDefault();\n            }, onFocusin: (ev) => {\n                /**\n                 * Prevent the focusin event from bubbling otherwise it will cause the focusin\n                 * event listener in scroll assist to fire. When this fires, focus will be moved\n                 * back to the input even if the clear button was never tapped. This poses issues\n                 * for screen readers as it means users would be unable to swipe past the clear button.\n                 */\n                ev.stopPropagation();\n            }, onClick: this.clearTextInput }, h(\"ion-icon\", { key: '230d77973aa83458ceb32bf52e3abe9bc322cfe6', \"aria-hidden\": \"true\", icon: clearIconData }))), h(\"slot\", { key: '9d69ac6e8a3c4b2b303dba2478f82695d5755ed2', name: \"end\" })), shouldRenderHighlight && h(\"div\", { key: 'ac61f16237ce731e0745ab72d0fc3f066252464a', class: \"input-highlight\" })), this.renderBottomContent()));\n    }\n    static get is() { return \"ion-input\"; }\n    static get encapsulation() { return \"scoped\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"input.ios.scss\"],\n            \"md\": [\"input.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"input.ios.css\"],\n            \"md\": [\"input.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"autocapitalize\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\\nAvailable options: `\\\"off\\\"`, `\\\"none\\\"`, `\\\"on\\\"`, `\\\"sentences\\\"`, `\\\"words\\\"`, `\\\"characters\\\"`.\"\n                },\n                \"attribute\": \"autocapitalize\",\n                \"reflect\": false,\n                \"defaultValue\": \"'off'\"\n            },\n            \"autocomplete\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"AutocompleteTypes\",\n                    \"resolved\": \"\\\"name\\\" | \\\"email\\\" | \\\"tel\\\" | \\\"url\\\" | \\\"on\\\" | \\\"off\\\" | \\\"honorific-prefix\\\" | \\\"given-name\\\" | \\\"additional-name\\\" | \\\"family-name\\\" | \\\"honorific-suffix\\\" | \\\"nickname\\\" | \\\"username\\\" | \\\"new-password\\\" | \\\"current-password\\\" | \\\"one-time-code\\\" | \\\"organization-title\\\" | \\\"organization\\\" | \\\"street-address\\\" | \\\"address-line1\\\" | \\\"address-line2\\\" | \\\"address-line3\\\" | \\\"address-level4\\\" | \\\"address-level3\\\" | \\\"address-level2\\\" | \\\"address-level1\\\" | \\\"country\\\" | \\\"country-name\\\" | \\\"postal-code\\\" | \\\"cc-name\\\" | \\\"cc-given-name\\\" | \\\"cc-additional-name\\\" | \\\"cc-family-name\\\" | \\\"cc-number\\\" | \\\"cc-exp\\\" | \\\"cc-exp-month\\\" | \\\"cc-exp-year\\\" | \\\"cc-csc\\\" | \\\"cc-type\\\" | \\\"transaction-currency\\\" | \\\"transaction-amount\\\" | \\\"language\\\" | \\\"bday\\\" | \\\"bday-day\\\" | \\\"bday-month\\\" | \\\"bday-year\\\" | \\\"sex\\\" | \\\"tel-country-code\\\" | \\\"tel-national\\\" | \\\"tel-area-code\\\" | \\\"tel-local\\\" | \\\"tel-extension\\\" | \\\"impp\\\" | \\\"photo\\\"\",\n                    \"references\": {\n                        \"AutocompleteTypes\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::AutocompleteTypes\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Indicates whether the value of the control can be automatically completed by the browser.\"\n                },\n                \"attribute\": \"autocomplete\",\n                \"reflect\": false,\n                \"defaultValue\": \"'off'\"\n            },\n            \"autocorrect\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'on' | 'off'\",\n                    \"resolved\": \"\\\"off\\\" | \\\"on\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Whether auto correction should be enabled when the user is entering/editing the text value.\"\n                },\n                \"attribute\": \"autocorrect\",\n                \"reflect\": false,\n                \"defaultValue\": \"'off'\"\n            },\n            \"autofocus\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Sets the [`autofocus` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus) on the native input element.\\n\\nThis may not be sufficient for the element to be focused on page load. See [managing focus](/docs/developing/managing-focus) for more information.\"\n                },\n                \"attribute\": \"autofocus\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"clearInput\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\"\n                },\n                \"attribute\": \"clear-input\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"clearInputIcon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The icon to use for the clear button. Only applies when `clearInput` is set to `true`.\"\n                },\n                \"attribute\": \"clear-input-icon\",\n                \"reflect\": false\n            },\n            \"clearOnEdit\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\\\"password\\\"`, `false` for all other types.\"\n                },\n                \"attribute\": \"clear-on-edit\",\n                \"reflect\": false\n            },\n            \"counter\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, a character counter will display the ratio of characters used and the total character limit. Developers must also set the `maxlength` property for the counter to be calculated correctly.\"\n                },\n                \"attribute\": \"counter\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"counterFormatter\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"(inputLength: number, maxLength: number) => string\",\n                    \"resolved\": \"((inputLength: number, maxLength: number) => string) | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A callback used to format the counter text.\\nBy default the counter text is set to \\\"itemLength / maxLength\\\".\\n\\nSee https://ionicframework.com/docs/troubleshooting/runtime#accessing-this\\nif you need to access `this` from within the callback.\"\n                }\n            },\n            \"debounce\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.\"\n                },\n                \"attribute\": \"debounce\",\n                \"reflect\": false\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the input.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"enterkeyhint\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'\",\n                    \"resolved\": \"\\\"done\\\" | \\\"enter\\\" | \\\"go\\\" | \\\"next\\\" | \\\"previous\\\" | \\\"search\\\" | \\\"send\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A hint to the browser for which enter key to display.\\nPossible values: `\\\"enter\\\"`, `\\\"done\\\"`, `\\\"go\\\"`, `\\\"next\\\"`,\\n`\\\"previous\\\"`, `\\\"search\\\"`, and `\\\"send\\\"`.\"\n                },\n                \"attribute\": \"enterkeyhint\",\n                \"reflect\": false\n            },\n            \"errorText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Text that is placed under the input and displayed when an error is detected.\"\n                },\n                \"attribute\": \"error-text\",\n                \"reflect\": false\n            },\n            \"fill\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'outline' | 'solid'\",\n                    \"resolved\": \"\\\"outline\\\" | \\\"solid\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The fill for the item. If `\\\"solid\\\"` the item will have a background. If\\n`\\\"outline\\\"` the item will be transparent with a border. Only available in `md` mode.\"\n                },\n                \"attribute\": \"fill\",\n                \"reflect\": false\n            },\n            \"inputmode\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'\",\n                    \"resolved\": \"\\\"decimal\\\" | \\\"email\\\" | \\\"none\\\" | \\\"numeric\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"url\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A hint to the browser for which keyboard to display.\\nPossible values: `\\\"none\\\"`, `\\\"text\\\"`, `\\\"tel\\\"`, `\\\"url\\\"`,\\n`\\\"email\\\"`, `\\\"numeric\\\"`, `\\\"decimal\\\"`, and `\\\"search\\\"`.\"\n                },\n                \"attribute\": \"inputmode\",\n                \"reflect\": false\n            },\n            \"helperText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Text that is placed under the input and displayed when no error is detected.\"\n                },\n                \"attribute\": \"helper-text\",\n                \"reflect\": false\n            },\n            \"label\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The visible label associated with the input.\\n\\nUse this if you need to render a plaintext label.\\n\\nThe `label` property will take priority over the `label` slot if both are used.\"\n                },\n                \"attribute\": \"label\",\n                \"reflect\": false\n            },\n            \"labelPlacement\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'floating' | 'stacked' | 'fixed'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"fixed\\\" | \\\"floating\\\" | \\\"stacked\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Where to place the label relative to the input.\\n`\\\"start\\\"`: The label will appear to the left of the input in LTR and to the right in RTL.\\n`\\\"end\\\"`: The label will appear to the right of the input in LTR and to the left in RTL.\\n`\\\"floating\\\"`: The label will appear smaller and above the input when the input is focused or it has a value. Otherwise it will appear on top of the input.\\n`\\\"stacked\\\"`: The label will appear smaller and above the input regardless even when the input is blurred or has no value.\\n`\\\"fixed\\\"`: The label has the same behavior as `\\\"start\\\"` except it also has a fixed width. Long text will be truncated with ellipses (\\\"...\\\").\"\n                },\n                \"attribute\": \"label-placement\",\n                \"reflect\": false,\n                \"defaultValue\": \"'start'\"\n            },\n            \"max\": {\n                \"type\": \"any\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | number\",\n                    \"resolved\": \"number | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The maximum value, which must not be less than its minimum (min attribute) value.\"\n                },\n                \"attribute\": \"max\",\n                \"reflect\": false\n            },\n            \"maxlength\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.\"\n                },\n                \"attribute\": \"maxlength\",\n                \"reflect\": false\n            },\n            \"min\": {\n                \"type\": \"any\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | number\",\n                    \"resolved\": \"number | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The minimum value, which must not be greater than its maximum (max attribute) value.\"\n                },\n                \"attribute\": \"min\",\n                \"reflect\": false\n            },\n            \"minlength\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.\"\n                },\n                \"attribute\": \"minlength\",\n                \"reflect\": false\n            },\n            \"multiple\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `\\\"email\\\"`, otherwise it is ignored.\"\n                },\n                \"attribute\": \"multiple\",\n                \"reflect\": false\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The name of the control, which is submitted with the form data.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.inputId\"\n            },\n            \"pattern\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `\\\"text\\\"`, `\\\"search\\\"`, `\\\"tel\\\"`, `\\\"url\\\"`, `\\\"email\\\"`, `\\\"date\\\"`, or `\\\"password\\\"`, otherwise it is ignored. When the type attribute is `\\\"date\\\"`, `pattern` will only be used in browsers that do not support the `\\\"date\\\"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.\"\n                },\n                \"attribute\": \"pattern\",\n                \"reflect\": false\n            },\n            \"placeholder\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Instructional text that shows before the input has a value.\\nThis property applies only when the `type` property is set to `\\\"email\\\"`,\\n`\\\"number\\\"`, `\\\"password\\\"`, `\\\"search\\\"`, `\\\"tel\\\"`, `\\\"text\\\"`, or `\\\"url\\\"`, otherwise it is ignored.\"\n                },\n                \"attribute\": \"placeholder\",\n                \"reflect\": false\n            },\n            \"readonly\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot modify the value.\"\n                },\n                \"attribute\": \"readonly\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"required\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user must fill in a value before submitting a form.\"\n                },\n                \"attribute\": \"required\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"shape\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'round'\",\n                    \"resolved\": \"\\\"round\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The shape of the input. If \\\"round\\\" it will have an increased border radius.\"\n                },\n                \"attribute\": \"shape\",\n                \"reflect\": false\n            },\n            \"spellcheck\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the element will have its spelling and grammar checked.\"\n                },\n                \"attribute\": \"spellcheck\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"step\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Works with the min and max attributes to limit the increments at which a value can be set.\\nPossible values are: `\\\"any\\\"` or a positive floating point number.\"\n                },\n                \"attribute\": \"step\",\n                \"reflect\": false\n            },\n            \"type\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"TextFieldTypes\",\n                    \"resolved\": \"\\\"date\\\" | \\\"datetime-local\\\" | \\\"email\\\" | \\\"month\\\" | \\\"number\\\" | \\\"password\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"time\\\" | \\\"url\\\" | \\\"week\\\"\",\n                    \"references\": {\n                        \"TextFieldTypes\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::TextFieldTypes\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The type of control to display. The default type is text.\"\n                },\n                \"attribute\": \"type\",\n                \"reflect\": false,\n                \"defaultValue\": \"'text'\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"string | number | null\",\n                    \"resolved\": \"null | number | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The value of the input.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false,\n                \"defaultValue\": \"''\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"hasFocus\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionInput\",\n                \"name\": \"ionInput\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `ionInput` event is fired each time the user modifies the input's value.\\nUnlike the `ionChange` event, the `ionInput` event is fired for each alteration\\nto the input's value. This typically happens for each keystroke as the user types.\\n\\nFor elements that accept text input (`type=text`, `type=tel`, etc.), the interface\\nis [`InputEvent`](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent); for others,\\nthe interface is [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event). If\\nthe input is cleared on edit, the type is `null`.\"\n                },\n                \"complexType\": {\n                    \"original\": \"InputInputEventDetail\",\n                    \"resolved\": \"InputInputEventDetail\",\n                    \"references\": {\n                        \"InputInputEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./input-interface\",\n                            \"id\": \"src/components/input/input-interface.ts::InputInputEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionChange\",\n                \"name\": \"ionChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `ionChange` event is fired when the user modifies the input's value.\\nUnlike the `ionInput` event, the `ionChange` event is only fired when changes\\nare committed, not as the user types.\\n\\nDepending on the way the users interacts with the element, the `ionChange`\\nevent fires at a different moment:\\n- When the user commits the change explicitly (e.g. by selecting a date\\nfrom a date picker for `<ion-input type=\\\"date\\\">`, pressing the \\\"Enter\\\" key, etc.).\\n- When the element loses focus after its value has changed: for elements\\nwhere the user's interaction is typing.\\n\\nThis event will not emit when programmatically setting the `value` property.\"\n                },\n                \"complexType\": {\n                    \"original\": \"InputChangeEventDetail\",\n                    \"resolved\": \"InputChangeEventDetail\",\n                    \"references\": {\n                        \"InputChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./input-interface\",\n                            \"id\": \"src/components/input/input-interface.ts::InputChangeEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionBlur\",\n                \"name\": \"ionBlur\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the input loses focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"FocusEvent\",\n                    \"resolved\": \"FocusEvent\",\n                    \"references\": {\n                        \"FocusEvent\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::FocusEvent\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionFocus\",\n                \"name\": \"ionFocus\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the input has focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"FocusEvent\",\n                    \"resolved\": \"FocusEvent\",\n                    \"references\": {\n                        \"FocusEvent\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::FocusEvent\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets focus on the native `input` in `ion-input`. Use this method instead of the global\\n`input.focus()`.\\n\\nDevelopers who wish to focus an input when a page enters\\nshould call `setFocus()` in the `ionViewDidEnter()` lifecycle method.\\n\\nDevelopers who wish to focus an input when an overlay is presented\\nshould call `setFocus` after `didPresent` has resolved.\\n\\nSee [managing focus](/docs/developing/managing-focus) for more information.\",\n                    \"tags\": []\n                }\n            },\n            \"getInputElement\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<HTMLInputElement>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"HTMLInputElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLInputElement\"\n                        }\n                    },\n                    \"return\": \"Promise<HTMLInputElement>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns the native `<input>` element used under the hood.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"debounce\",\n                \"methodName\": \"debounceChanged\"\n            }, {\n                \"propName\": \"type\",\n                \"methodName\": \"onTypeChange\"\n            }, {\n                \"propName\": \"value\",\n                \"methodName\": \"valueChanged\"\n            }];\n    }\n}\nlet inputIds = 0;\n"],"mappings":"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","ignoreList":[]}