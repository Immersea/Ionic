{"version":3,"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","WebPlugin","constructor","super","arguments","this","DB_VERSION","DB_NAME","_writeCmds","downloadFile","async","options","_a","_b","requestInit","buildRequestInit","webFetchExtra","response","fetch","url","blob","progress","body","Blob","reader","getReader","bytes","chunks","contentType","headers","get","contentLength","parseInt","done","read","status","notifyListeners","allChunks","Uint8Array","position","chunk","set","buffer","type","undefined","result","writeFile","directory","recursive","data","uri","initDb","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","onerror","error","onblocked","console","warn","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","readFlag","indexOf","then","conn","tx","transaction","objectStore","req","dbIndexRequest","indexName","getPath","uriPath","cleanedUriPath","replace","fsPath","clear","readFile","entry","Error","content","encoding","doRecursive","occupiedEntry","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","appendFile","btoa","atob","deleteFile","entries","IDBKeyRange","only","depth","match","rmdir","fullPath","readDirResult","readdir","files","entryPath","name","entryObj","stat","all","map","e","subEntry","substring","getUri","rename","_copy","copy","requestPermissions","publicStorage","checkPermissions","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","file","Encoding","UTF8","writeResult","contents","filename","str","err","_debug"],"sources":["node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin, buildRequestInit } from '@capacitor/core';\nimport { Encoding } from './definitions';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n        /**\n         * Function that performs a http request to a server and downloads the file to the specified destination\n         *\n         * @param options the options for the download operation\n         * @returns a promise that resolves with the download file result\n         */\n        this.downloadFile = async (options) => {\n            var _a, _b;\n            const requestInit = buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!options.progress)\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                const chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                const allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            const result = await this.writeFile({\n                path: options.path,\n                directory: (_a = options.directory) !== null && _a !== void 0 ? _a : undefined,\n                recursive: (_b = options.recursive) !== null && _b !== void 0 ? _b : false,\n                data: blob,\n            });\n            return { path: result.uri, blob };\n        };\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding && !(data instanceof Blob)) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data instanceof Blob ? data.size : data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content instanceof Blob) {\n                throw Error('The occupied entry contains a Blob object which cannot be appended to.');\n            }\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                let encoding;\n                if (!(file.data instanceof Blob) && !this.isBase64String(file.data)) {\n                    encoding = Encoding.UTF8;\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                    encoding: encoding,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename.name}`,\n                        to: `${to}/${filename.name}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"],"mappings":"qVAEA,SAASA,EAAQC,GACb,MAAMC,EAAQD,EAAKE,MAAM,KAAKC,QAAOC,GAAQA,IAAS,MACtD,MAAMC,EAAW,GACjBJ,EAAMK,SAAQF,IACV,GAAIA,IAAS,MACTC,EAASE,OAAS,GAClBF,EAASA,EAASE,OAAS,KAAO,KAAM,CACxCF,EAASG,KACrB,KACa,CACDH,EAASI,KAAKL,EAC1B,KAEI,OAAOC,EAASK,KAAK,IACzB,CACA,SAASC,EAAaC,EAAQC,GAC1BD,EAASb,EAAQa,GACjBC,EAAWd,EAAQc,GACnB,MAAMC,EAASF,EAAOV,MAAM,KAC5B,MAAMa,EAASF,EAASX,MAAM,KAC9B,OAAQU,IAAWC,GACfC,EAAOE,OAAM,CAACC,EAAOC,IAAUD,IAAUF,EAAOG,IACxD,CACO,MAAMC,UAAsBC,EAC/B,WAAAC,GACIC,SAASC,WACTC,KAAKC,WAAa,EAClBD,KAAKE,QAAU,OACfF,KAAKG,WAAa,CAAC,MAAO,MAAO,UAOjCH,KAAKI,aAAeC,MAAOC,IACvB,IAAIC,EAAIC,EACR,MAAMC,EAAcC,EAAiBJ,EAASA,EAAQK,eACtD,MAAMC,QAAiBC,MAAMP,EAAQQ,IAAKL,GAC1C,IAAIM,EACJ,IAAKT,EAAQU,SACTD,QAAaH,EAASG,YACrB,KAAMH,IAAa,MAAQA,SAAkB,OAAS,EAAIA,EAASK,MACpEF,EAAO,IAAIG,SACV,CACD,MAAMC,EAASP,EAASK,KAAKG,YAC7B,IAAIC,EAAQ,EACZ,MAAMC,EAAS,GACf,MAAMC,EAAcX,EAASY,QAAQC,IAAI,gBACzC,MAAMC,EAAgBC,SAASf,EAASY,QAAQC,IAAI,mBAAqB,IAAK,IAC9E,MAAO,KAAM,CACT,MAAMG,KAAEA,EAAInC,MAAEA,SAAgB0B,EAAOU,OACrC,GAAID,EACA,MACJN,EAAOrC,KAAKQ,GACZ4B,IAAU5B,IAAU,MAAQA,SAAe,OAAS,EAAIA,EAAMV,SAAW,EACzE,MAAM+C,EAAS,CACXhB,IAAKR,EAAQQ,IACbO,QACAK,iBAEJ1B,KAAK+B,gBAAgB,WAAYD,EACrD,CACgB,MAAME,EAAY,IAAIC,WAAWZ,GACjC,IAAIa,EAAW,EACf,IAAK,MAAMC,KAASb,EAAQ,CACxB,UAAWa,IAAU,YACjB,SACJH,EAAUI,IAAID,EAAOD,GACrBA,GAAYC,EAAMpD,MACtC,CACgBgC,EAAO,IAAIG,KAAK,CAACc,EAAUK,QAAS,CAAEC,KAAMf,GAAegB,WAC3E,CACY,MAAMC,QAAexC,KAAKyC,UAAU,CAChCjE,KAAM8B,EAAQ9B,KACdkE,WAAYnC,EAAKD,EAAQoC,aAAe,MAAQnC,SAAY,EAAIA,EAAKgC,UACrEI,WAAYnC,EAAKF,EAAQqC,aAAe,MAAQnC,SAAY,EAAIA,EAAK,MACrEoC,KAAM7B,IAEV,MAAO,CAAEvC,KAAMgE,EAAOK,IAAK9B,OAAM,CAE7C,CACI,YAAM+B,GACF,GAAI9C,KAAK+C,MAAQR,UAAW,CACxB,OAAOvC,KAAK+C,GACxB,CACQ,KAAM,cAAeC,QAAS,CAC1B,MAAMhD,KAAKiD,YAAY,yCACnC,CACQ,OAAO,IAAIC,SAAQ,CAAC3E,EAAS4E,KACzB,MAAMC,EAAUC,UAAUC,KAAKtD,KAAKE,QAASF,KAAKC,YAClDmD,EAAQG,gBAAkB5D,EAAc6D,UACxCJ,EAAQK,UAAY,KAChBzD,KAAK+C,IAAMK,EAAQZ,OACnBjE,EAAQ6E,EAAQZ,OAAO,EAE3BY,EAAQM,QAAU,IAAMP,EAAOC,EAAQO,OACvCP,EAAQQ,UAAY,KAChBC,QAAQC,KAAK,aAAa,CAC7B,GAEb,CACI,gBAAON,CAAUO,GACb,MAAMC,EAAcD,EAAME,OAC1B,MAAMC,EAAKF,EAAYxB,OACvB,OAAQuB,EAAMI,YACV,KAAK,EACL,KAAK,EACL,QAAS,CACL,GAAID,EAAGE,iBAAiBC,SAAS,eAAgB,CAC7CH,EAAGI,kBAAkB,cACzC,CACgB,MAAMC,EAAQL,EAAGM,kBAAkB,cAAe,CAAEC,QAAS,SAC7DF,EAAMG,YAAY,YAAa,SAC/C,EAEA,CACI,eAAMC,CAAUC,EAAKC,GACjB,MAAMC,EAAW9E,KAAKG,WAAW4E,QAAQH,MAAU,EAAI,YAAc,WACrE,OAAO5E,KAAK8C,SAASkC,MAAMC,GAChB,IAAI/B,SAAQ,CAAC3E,EAAS4E,KACzB,MAAM+B,EAAKD,EAAKE,YAAY,CAAC,eAAgBL,GAC7C,MAAMP,EAAQW,EAAGE,YAAY,eAC7B,MAAMC,EAAMd,EAAMK,MAAQC,GAC1BQ,EAAI5B,UAAY,IAAMlF,EAAQ8G,EAAI7C,QAClC6C,EAAI3B,QAAU,IAAMP,EAAOkC,EAAI1B,MAAM,KAGrD,CACI,oBAAM2B,CAAeC,EAAWX,EAAKC,GACjC,MAAMC,EAAW9E,KAAKG,WAAW4E,QAAQH,MAAU,EAAI,YAAc,WACrE,OAAO5E,KAAK8C,SAASkC,MAAMC,GAChB,IAAI/B,SAAQ,CAAC3E,EAAS4E,KACzB,MAAM+B,EAAKD,EAAKE,YAAY,CAAC,eAAgBL,GAC7C,MAAMP,EAAQW,EAAGE,YAAY,eAC7B,MAAM1F,EAAQ6E,EAAM7E,MAAM6F,GAC1B,MAAMF,EAAM3F,EAAMkF,MAAQC,GAC1BQ,EAAI5B,UAAY,IAAMlF,EAAQ8G,EAAI7C,QAClC6C,EAAI3B,QAAU,IAAMP,EAAOkC,EAAI1B,MAAM,KAGrD,CACI,OAAA6B,CAAQ9C,EAAW+C,GACf,MAAMC,EAAiBD,IAAYlD,UAAYkD,EAAQE,QAAQ,eAAgB,IAAM,GACrF,IAAIC,EAAS,GACb,GAAIlD,IAAcH,UACdqD,GAAU,IAAMlD,EACpB,GAAI+C,IAAY,GACZG,GAAU,IAAMF,EACpB,OAAOE,CACf,CACI,WAAMC,GACF,MAAMZ,QAAajF,KAAK8C,SACxB,MAAMoC,EAAKD,EAAKE,YAAY,CAAC,eAAgB,aAC7C,MAAMZ,EAAQW,EAAGE,YAAY,eAC7Bb,EAAMsB,OACd,CAMI,cAAMC,CAASxF,GACX,MAAM9B,EAAOwB,KAAKwF,QAAQlF,EAAQoC,UAAWpC,EAAQ9B,MAErD,MAAMuH,QAAe/F,KAAK2E,UAAU,MAAO,CAACnG,IAC5C,GAAIuH,IAAUxD,UACV,MAAMyD,MAAM,wBAChB,MAAO,CAAEpD,KAAMmD,EAAME,QAAUF,EAAME,QAAU,GACvD,CAMI,eAAMxD,CAAUnC,GACZ,MAAM9B,EAAOwB,KAAKwF,QAAQlF,EAAQoC,UAAWpC,EAAQ9B,MACrD,IAAIoE,EAAOtC,EAAQsC,KACnB,MAAMsD,EAAW5F,EAAQ4F,SACzB,MAAMC,EAAc7F,EAAQqC,UAC5B,MAAMyD,QAAuBpG,KAAK2E,UAAU,MAAO,CAACnG,IACpD,GAAI4H,GAAiBA,EAAc9D,OAAS,YACxC,MAAM0D,MAAM,qCAChB,MAAMK,EAAa7H,EAAK8H,OAAO,EAAG9H,EAAK+H,YAAY,MACnD,MAAMC,QAAqBxG,KAAK2E,UAAU,MAAO,CAAC0B,IAClD,GAAIG,IAAgBjE,UAAW,CAC3B,MAAMkE,EAAcJ,EAAWtB,QAAQ,IAAK,GAC5C,GAAI0B,KAAiB,EAAG,CACpB,MAAMC,EAAgBL,EAAWC,OAAOG,SAClCzG,KAAK2G,MAAM,CACbnI,KAAMkI,EACNhE,UAAWpC,EAAQoC,UACnBC,UAAWwD,GAE/B,CACA,CACQ,IAAKD,KAActD,aAAgB1B,MAAO,CACtC0B,EAAOA,EAAKmC,QAAQ,MAAQ,EAAInC,EAAKlE,MAAM,KAAK,GAAKkE,EACrD,IAAK5C,KAAK4G,eAAehE,GACrB,MAAMoD,MAAM,iDAC5B,CACQ,MAAMa,EAAMC,KAAKD,MACjB,MAAME,EAAU,CACZvI,KAAMA,EACNwI,OAAQX,EACR/D,KAAM,OACN2E,KAAMrE,aAAgB1B,KAAO0B,EAAKqE,KAAOrE,EAAK7D,OAC9CmI,MAAOL,EACPM,MAAON,EACPZ,QAASrD,SAEP5C,KAAK2E,UAAU,MAAO,CAACoC,IAC7B,MAAO,CACHlE,IAAKkE,EAAQvI,KAEzB,CAMI,gBAAM4I,CAAW9G,GACb,MAAM9B,EAAOwB,KAAKwF,QAAQlF,EAAQoC,UAAWpC,EAAQ9B,MACrD,IAAIoE,EAAOtC,EAAQsC,KACnB,MAAMsD,EAAW5F,EAAQ4F,SACzB,MAAMG,EAAa7H,EAAK8H,OAAO,EAAG9H,EAAK+H,YAAY,MACnD,MAAMM,EAAMC,KAAKD,MACjB,IAAIK,EAAQL,EACZ,MAAMT,QAAuBpG,KAAK2E,UAAU,MAAO,CAACnG,IACpD,GAAI4H,GAAiBA,EAAc9D,OAAS,YACxC,MAAM0D,MAAM,qCAChB,MAAMQ,QAAqBxG,KAAK2E,UAAU,MAAO,CAAC0B,IAClD,GAAIG,IAAgBjE,UAAW,CAC3B,MAAMkE,EAAcJ,EAAWtB,QAAQ,IAAK,GAC5C,GAAI0B,KAAiB,EAAG,CACpB,MAAMC,EAAgBL,EAAWC,OAAOG,SAClCzG,KAAK2G,MAAM,CACbnI,KAAMkI,EACNhE,UAAWpC,EAAQoC,UACnBC,UAAW,MAE/B,CACA,CACQ,IAAKuD,IAAalG,KAAK4G,eAAehE,GAClC,MAAMoD,MAAM,kDAChB,GAAII,IAAkB7D,UAAW,CAC7B,GAAI6D,EAAcH,mBAAmB/E,KAAM,CACvC,MAAM8E,MAAM,yEAC5B,CACY,GAAII,EAAcH,UAAY1D,YAAc2D,EAAU,CAClDtD,EAAOyE,KAAKC,KAAKlB,EAAcH,SAAWqB,KAAK1E,GAC/D,KACiB,CACDA,EAAOwD,EAAcH,QAAUrD,CAC/C,CACYsE,EAAQd,EAAcc,KAClC,CACQ,MAAMH,EAAU,CACZvI,KAAMA,EACNwI,OAAQX,EACR/D,KAAM,OACN2E,KAAMrE,EAAK7D,OACXmI,MAAOA,EACPC,MAAON,EACPZ,QAASrD,SAEP5C,KAAK2E,UAAU,MAAO,CAACoC,GACrC,CAMI,gBAAMQ,CAAWjH,GACb,MAAM9B,EAAOwB,KAAKwF,QAAQlF,EAAQoC,UAAWpC,EAAQ9B,MACrD,MAAMuH,QAAe/F,KAAK2E,UAAU,MAAO,CAACnG,IAC5C,GAAIuH,IAAUxD,UACV,MAAMyD,MAAM,wBAChB,MAAMwB,QAAgBxH,KAAKsF,eAAe,YAAa,aAAc,CACjEmC,YAAYC,KAAKlJ,KAErB,GAAIgJ,EAAQzI,SAAW,EACnB,MAAMiH,MAAM,8BACVhG,KAAK2E,UAAU,SAAU,CAACnG,GACxC,CAMI,WAAMmI,CAAMrG,GACR,MAAM9B,EAAOwB,KAAKwF,QAAQlF,EAAQoC,UAAWpC,EAAQ9B,MACrD,MAAM2H,EAAc7F,EAAQqC,UAC5B,MAAM0D,EAAa7H,EAAK8H,OAAO,EAAG9H,EAAK+H,YAAY,MACnD,MAAMoB,GAASnJ,EAAKoJ,MAAM,QAAU,IAAI7I,OACxC,MAAMyH,QAAqBxG,KAAK2E,UAAU,MAAO,CAAC0B,IAClD,MAAMD,QAAuBpG,KAAK2E,UAAU,MAAO,CAACnG,IACpD,GAAImJ,IAAU,EACV,MAAM3B,MAAM,gCAChB,GAAII,IAAkB7D,UAClB,MAAMyD,MAAM,yCAChB,IAAKG,GAAewB,IAAU,GAAKnB,IAAgBjE,UAC/C,MAAMyD,MAAM,+BAChB,GAAIG,GAAewB,IAAU,GAAKnB,IAAgBjE,UAAW,CACzD,MAAMmE,EAAgBL,EAAWC,OAAOD,EAAWtB,QAAQ,IAAK,UAC1D/E,KAAK2G,MAAM,CACbnI,KAAMkI,EACNhE,UAAWpC,EAAQoC,UACnBC,UAAWwD,GAE3B,CACQ,MAAMU,EAAMC,KAAKD,MACjB,MAAME,EAAU,CACZvI,KAAMA,EACNwI,OAAQX,EACR/D,KAAM,YACN2E,KAAM,EACNC,MAAOL,EACPM,MAAON,SAEL7G,KAAK2E,UAAU,MAAO,CAACoC,GACrC,CAKI,WAAMc,CAAMvH,GACR,MAAM9B,KAAEA,EAAIkE,UAAEA,EAASC,UAAEA,GAAcrC,EACvC,MAAMwH,EAAW9H,KAAKwF,QAAQ9C,EAAWlE,GACzC,MAAMuH,QAAe/F,KAAK2E,UAAU,MAAO,CAACmD,IAC5C,GAAI/B,IAAUxD,UACV,MAAMyD,MAAM,0BAChB,GAAID,EAAMzD,OAAS,YACf,MAAM0D,MAAM,qCAChB,MAAM+B,QAAsB/H,KAAKgI,QAAQ,CAAExJ,OAAMkE,cACjD,GAAIqF,EAAcE,MAAMlJ,SAAW,IAAM4D,EACrC,MAAMqD,MAAM,uBAChB,IAAK,MAAMD,KAASgC,EAAcE,MAAO,CACrC,MAAMC,EAAY,GAAG1J,KAAQuH,EAAMoC,OACnC,MAAMC,QAAiBpI,KAAKqI,KAAK,CAAE7J,KAAM0J,EAAWxF,cACpD,GAAI0F,EAAS9F,OAAS,OAAQ,OACpBtC,KAAKuH,WAAW,CAAE/I,KAAM0J,EAAWxF,aACzD,KACiB,OACK1C,KAAK6H,MAAM,CAAErJ,KAAM0J,EAAWxF,YAAWC,aAC/D,CACA,OACc3C,KAAK2E,UAAU,SAAU,CAACmD,GACxC,CAMI,aAAME,CAAQ1H,GACV,MAAM9B,EAAOwB,KAAKwF,QAAQlF,EAAQoC,UAAWpC,EAAQ9B,MACrD,MAAMuH,QAAe/F,KAAK2E,UAAU,MAAO,CAACnG,IAC5C,GAAI8B,EAAQ9B,OAAS,IAAMuH,IAAUxD,UACjC,MAAMyD,MAAM,0BAChB,MAAMwB,QAAgBxH,KAAKsF,eAAe,YAAa,aAAc,CAACmC,YAAYC,KAAKlJ,KACvF,MAAMyJ,QAAc/E,QAAQoF,IAAId,EAAQe,KAAIlI,MAAOmI,IAC/C,IAAIC,QAAkBzI,KAAK2E,UAAU,MAAO,CAAC6D,IAC7C,GAAIC,IAAalG,UAAW,CACxBkG,QAAkBzI,KAAK2E,UAAU,MAAO,CAAC6D,EAAI,KAC7D,CACY,MAAO,CACHL,KAAMK,EAAEE,UAAUlK,EAAKO,OAAS,GAChCuD,KAAMmG,EAASnG,KACf2E,KAAMwB,EAASxB,KACfC,MAAOuB,EAASvB,MAChBC,MAAOsB,EAAStB,MAChBtE,IAAK4F,EAASjK,KACjB,KAEL,MAAO,CAAEyJ,MAAOA,EACxB,CAMI,YAAMU,CAAOrI,GACT,MAAM9B,EAAOwB,KAAKwF,QAAQlF,EAAQoC,UAAWpC,EAAQ9B,MACrD,IAAIuH,QAAe/F,KAAK2E,UAAU,MAAO,CAACnG,IAC1C,GAAIuH,IAAUxD,UAAW,CACrBwD,QAAe/F,KAAK2E,UAAU,MAAO,CAACnG,EAAO,KACzD,CACQ,MAAO,CACHqE,KAAMkD,IAAU,MAAQA,SAAe,OAAS,EAAIA,EAAMvH,OAASA,EAE/E,CAMI,UAAM6J,CAAK/H,GACP,MAAM9B,EAAOwB,KAAKwF,QAAQlF,EAAQoC,UAAWpC,EAAQ9B,MACrD,IAAIuH,QAAe/F,KAAK2E,UAAU,MAAO,CAACnG,IAC1C,GAAIuH,IAAUxD,UAAW,CACrBwD,QAAe/F,KAAK2E,UAAU,MAAO,CAACnG,EAAO,KACzD,CACQ,GAAIuH,IAAUxD,UACV,MAAMyD,MAAM,yBAChB,MAAO,CACH1D,KAAMyD,EAAMzD,KACZ2E,KAAMlB,EAAMkB,KACZC,MAAOnB,EAAMmB,MACbC,MAAOpB,EAAMoB,MACbtE,IAAKkD,EAAMvH,KAEvB,CAMI,YAAMoK,CAAOtI,SACHN,KAAK6I,MAAMvI,EAAS,MAC1B,MACR,CAMI,UAAMwI,CAAKxI,GACP,OAAON,KAAK6I,MAAMvI,EAAS,MACnC,CACI,wBAAMyI,GACF,MAAO,CAAEC,cAAe,UAChC,CACI,sBAAMC,GACF,MAAO,CAAED,cAAe,UAChC,CAOI,WAAMH,CAAMvI,EAAS4I,EAAW,OAC5B,IAAIC,YAAEA,GAAgB7I,EACtB,MAAM8I,GAAEA,EAAEC,KAAEA,EAAM3G,UAAW4G,GAAkBhJ,EAC/C,IAAK8I,IAAOC,EAAM,CACd,MAAMrD,MAAM,oCACxB,CAEQ,IAAKmD,EAAa,CACdA,EAAcG,CAC1B,CACQ,MAAMC,EAAWvJ,KAAKwF,QAAQ8D,EAAeD,GAC7C,MAAMG,EAASxJ,KAAKwF,QAAQ2D,EAAaC,GAEzC,GAAIG,IAAaC,EAAQ,CACrB,MAAO,CACH3G,IAAK2G,EAErB,CACQ,GAAIrK,EAAaoK,EAAUC,GAAS,CAChC,MAAMxD,MAAM,uCACxB,CAEQ,IAAIyD,EACJ,IACIA,QAAczJ,KAAKqI,KAAK,CACpB7J,KAAM4K,EACN1G,UAAWyG,GAE3B,CACQ,MAAOX,GAEH,MAAMkB,EAAmBN,EAAG1K,MAAM,KAClCgL,EAAiB1K,MACjB,MAAMwK,EAASE,EAAiBxK,KAAK,KAErC,GAAIwK,EAAiB3K,OAAS,EAAG,CAC7B,MAAM4K,QAA0B3J,KAAKqI,KAAK,CACtC7J,KAAMgL,EACN9G,UAAWyG,IAEf,GAAIQ,EAAkBrH,OAAS,YAAa,CACxC,MAAM,IAAI0D,MAAM,4CACpC,CACA,CACA,CAEQ,GAAIyD,GAASA,EAAMnH,OAAS,YAAa,CACrC,MAAM,IAAI0D,MAAM,2CAC5B,CAEQ,MAAM4D,QAAgB5J,KAAKqI,KAAK,CAC5B7J,KAAM6K,EACN3G,UAAW4G,IAGf,MAAMO,EAAaxJ,MAAO7B,EAAM0I,EAAOC,KACnC,MAAMW,EAAW9H,KAAKwF,QAAQ2D,EAAa3K,GAC3C,MAAMuH,QAAe/F,KAAK2E,UAAU,MAAO,CAACmD,IAC5C/B,EAAMmB,MAAQA,EACdnB,EAAMoB,MAAQA,QACRnH,KAAK2E,UAAU,MAAO,CAACoB,GAAO,EAExC,MAAMmB,EAAQ0C,EAAQ1C,MAAQ0C,EAAQ1C,MAAQJ,KAAKD,MACnD,OAAQ+C,EAAQtH,MAEZ,IAAK,OAAQ,CAET,MAAMwH,QAAa9J,KAAK8F,SAAS,CAC7BtH,KAAM6K,EACN3G,UAAW4G,IAGf,GAAIJ,EAAU,OACJlJ,KAAKuH,WAAW,CAClB/I,KAAM6K,EACN3G,UAAW4G,GAEnC,CACgB,IAAIpD,EACJ,KAAM4D,EAAKlH,gBAAgB1B,QAAUlB,KAAK4G,eAAekD,EAAKlH,MAAO,CACjEsD,EAAW6D,EAASC,IACxC,CAEgB,MAAMC,QAAoBjK,KAAKyC,UAAU,CACrCjE,KAAM4K,EACN1G,UAAWyG,EACXvG,KAAMkH,EAAKlH,KACXsD,SAAUA,IAGd,GAAIgD,EAAU,OACJW,EAAWT,EAAIlC,EAAO0C,EAAQzC,MACxD,CAEgB,OAAO8C,CACvB,CACY,IAAK,YAAa,CACd,GAAIR,EAAO,CACP,MAAMzD,MAAM,kDAChC,CACgB,UAEUhG,KAAK2G,MAAM,CACbnI,KAAM4K,EACN1G,UAAWyG,EACXxG,UAAW,QAGf,GAAIuG,EAAU,OACJW,EAAWT,EAAIlC,EAAO0C,EAAQzC,MAC5D,CACA,CACgB,MAAOqB,GAEvB,CAEgB,MAAM0B,SAAkBlK,KAAKgI,QAAQ,CACjCxJ,KAAM6K,EACN3G,UAAW4G,KACXrB,MACJ,IAAK,MAAMkC,KAAYD,EAAU,OAEvBlK,KAAK6I,MAAM,CACbQ,KAAM,GAAGA,KAAQc,EAAShC,OAC1BiB,GAAI,GAAGA,KAAMe,EAAShC,OACtBzF,UAAW4G,EACXH,eACDD,EACvB,CAEgB,GAAIA,EAAU,OACJlJ,KAAK6H,MAAM,CACbrJ,KAAM6K,EACN3G,UAAW4G,GAEnC,CACA,EAEQ,MAAO,CACHzG,IAAK2G,EAEjB,CACI,cAAA5C,CAAewD,GACX,IACI,OAAO/C,KAAKC,KAAK8C,KAASA,CACtC,CACQ,MAAOC,GACH,OAAO,KACnB,CACA,EAEA1K,EAAc2K,OAAS,Y","ignoreList":[]}