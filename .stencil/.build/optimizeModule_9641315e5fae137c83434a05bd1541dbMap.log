{"version":3,"names":["appItemDetailCss","AppItemDetailStyle0","AppItemDetail","this","show","componentWillLoad","isBoolean","detailText","isString","isNumber","isObject","isNull","inset","h","labelText","style","color","labelTag","TranslationService","getTransl","appendText","undefined","alignRight","text","detailTag","isDate","Date","toLocaleDateString","render","showItem","lines","appMultilanguageTextCss","AppMultilanguageTextStyle0","AppMultilanguageText","selectedLanguage","UserService","userSettings","getLanguage","textLanguages","Object","keys","sort","length","includes","changeSelectedLanguage","ev","detail","Host","key","size","selectedLangCode","picker","selectOnly","onLanguageChanged","gridCss","IonGridStyle0","Grid","constructor","hostRef","fixed","mode","getIonMode","class","noteIosCss","IonNoteIosStyle0","noteMdCss","IonNoteMdStyle0","Note","createColorClasses","skeletonTextCss","IonSkeletonTextStyle0","SkeletonText","animated","emitStyle","ionStyle","emit","config","getBoolean","inMedia","hostContext","el","textareaIosCss","IonTextareaIosStyle0","textareaMdCss","IonTextareaMdStyle0","Textarea","inputId","textareaIds","didTextareaClearOnEdit","inheritedAttributes","onInput","input","target","value","emitInputChange","onChange","emitValueChange","onFocus","hasFocus","focusedValue","ionFocus","onBlur","ionBlur","onKeyDown","checkClearOnEdit","autocapitalize","autofocus","clearOnEdit","debounce","disabled","fill","inputmode","enterkeyhint","maxlength","minlength","name","placeholder","readonly","required","spellcheck","cols","rows","wrap","autoGrow","counter","counterFormatter","errorText","helperText","label","labelPlacement","shape","debounceChanged","ionInput","originalIonInput","debounceEvent","valueChanged","nativeInput","getValue","runAutoGrow","connectedCallback","slotMutationController","createSlotMutationController","forceUpdate","notchController","createNotchController","notchSpacerEl","labelSlot","document","dispatchEvent","CustomEvent","disconnectedCallback","destroy","assign","inheritAriaAttributes","inheritAttributes","componentDidLoad","componentDidRender","_a","calculateNotchWidth","setFocus","focus","getInputElement","Promise","resolve","componentOnReady","event","newValue","toString","ionChange","writeTask","textareaWrapper","dataset","replicatedValue","IGNORED_KEYS","pressedIgnoredKey","hasValue","renderLabel","hasLabel","querySelector","renderLabelContainer","hasOutlineFill","ref","renderHintText","renderCounter","getCounterText","renderBottomContent","hasHintText","hasCounter","inItem","shouldRenderHighlight","hasStartEndSlots","labelShouldFloat","htmlFor","id","autoCapitalize","autoFocus","enterKeyHint","inputMode","minLength","maxLength","readOnly","toggleIosCss","IonToggleIosStyle0","toggleMdCss","IonToggleMdStyle0","Toggle","toggleIds","lastDrag","didLoad","setupGesture","async","toggleTrack","gesture","import","createGesture","gestureName","gesturePriority","threshold","passive","onStart","onMove","onEnd","disabledChanged","onClick","preventDefault","now","toggleChecked","getSwitchLabelIcon","checked","checkmarkOutline","removeOutline","ellipseOutline","activated","enableOnOffLabels","get","justify","alignment","enable","isNowChecked","shouldToggle","isRTL","deltaX","hapticSelection","stopImmediatePropagation","focusEl","renderOnOffSwitchLabels","icon","renderToggleControl","part","textContent","rtl","renderHiddenInput","type","role","margin"],"sources":["src/components/common/app/common/app-item-detail/app-item-detail.scss?tag=app-item-detail&encapsulation=shadow","src/components/common/app/common/app-item-detail/app-item-detail.tsx","src/components/common/app/common/app-multilanguage-text/app-multilanguage-text.scss?tag=app-multilanguage-text","src/components/common/app/common/app-multilanguage-text/app-multilanguage-text.tsx","node_modules/@ionic/core/dist/collection/components/grid/grid.css?tag=ion-grid&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/grid/grid.js","node_modules/@ionic/core/dist/collection/components/note/note.ios.css?tag=ion-note&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/note/note.md.css?tag=ion-note&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/note/note.js","node_modules/@ionic/core/dist/collection/components/skeleton-text/skeleton-text.css?tag=ion-skeleton-text&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/skeleton-text/skeleton-text.js","node_modules/@ionic/core/dist/collection/components/textarea/textarea.ios.css?tag=ion-textarea&mode=ios&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/textarea/textarea.md.css?tag=ion-textarea&mode=md&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/textarea/textarea.js","node_modules/@ionic/core/dist/collection/components/toggle/toggle.ios.css?tag=ion-toggle&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/toggle/toggle.md.css?tag=ion-toggle&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/toggle/toggle.js"],"sourcesContent":["app-item-detail {\n  ion-item {\n    border: 1px solid black;\n    background-color: #000000;\n    --padding-end: 0px;\n    --padding-start: 0px;\n    --inner-padding-bottom: 0;\n    --inner-padding-end: 0;\n    --inner-padding-start: 0;\n    --inner-padding-top: 0;\n  }\n}\n","import {Component, Prop, Watch, h} from \"@stencil/core\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {TextMultilanguage} from \"../../../../../interfaces/interfaces\";\nimport {isBoolean, isNull, isNumber, isObject, isString} from \"lodash\";\n\n@Component({\n  tag: \"app-item-detail\",\n  styleUrl: \"app-item-detail.scss\",\n  shadow: true,\n})\nexport class AppItemDetail {\n  @Prop() labelTag?: string; //optional to get translation\n  @Prop() labelText?: string;\n  @Prop() detailTag?: string; //optional to get translation\n  @Prop({mutable: true}) detailText?:\n    | string\n    | number\n    | boolean\n    | TextMultilanguage;\n  @Prop() appendText?: string;\n  @Prop() showItem?: boolean = true;\n  @Prop() lines?: \"none\" | \"full\" | \"inset\" = \"none\";\n  @Prop() isDate? = false;\n  @Prop() alignRight? = false;\n  show = false;\n\n  componentWillLoad() {\n    this.show =\n      (isBoolean(this.detailText) ||\n        isString(this.detailText) ||\n        isNumber(this.detailText) ||\n        isObject(this.detailText)) &&\n      !isNull(this.detailText);\n  }\n\n  @Watch(\"detailText\")\n  inset() {\n    return (\n      <ion-label>\n        {this.labelText ? (\n          <p\n            style={\n              isNumber(this.detailText) || this.detailText == \"-\"\n                ? {\n                    \"font-size\": \"0.75rem\",\n                    color: \"black\",\n                  }\n                : {\n                    \"font-size\": \"0.75rem\",\n                    color: \"black\",\n                  }\n            }\n          >\n            {this.labelTag\n              ? TranslationService.getTransl(this.labelTag, this.labelText)\n              : this.labelText}\n            {this.appendText ? this.appendText : undefined}\n          </p>\n        ) : undefined}\n        <h2\n          style={\n            this.alignRight\n              ? {\n                  \"text-align\": \"right\",\n                }\n              : null\n          }\n        >\n          {typeof this.detailText === \"object\" && !isNull(this.detailText) ? (\n            <app-multilanguage-text\n              text={this.detailText}\n            ></app-multilanguage-text>\n          ) : isBoolean(this.detailText) ? (\n            this.detailText === true ? (\n              TranslationService.getTransl(\"yes\", \"Yes\")\n            ) : (\n              TranslationService.getTransl(\"no\", \"No\")\n            )\n          ) : this.detailTag && isString(this.detailText) ? (\n            TranslationService.getTransl(this.detailTag, this.detailText)\n          ) : this.isDate ? (\n            new Date(this.detailText).toLocaleDateString()\n          ) : (\n            this.detailText\n          )}\n        </h2>\n      </ion-label>\n    );\n  }\n\n  render() {\n    return [\n      this.show ? (\n        this.showItem ? (\n          <ion-item lines={this.lines}>{this.inset()}</ion-item>\n        ) : (\n          <div>{this.inset()}</div>\n        )\n      ) : undefined,\n    ];\n  }\n}\n","app-multilanguage-text {\n  ion-grid {\n    --ion-grid-column-padding: 0px;\n    --ion-grid-padding: 0px;\n  }\n}\n","import {Component, h, Host, Prop, State} from \"@stencil/core\";\nimport {TextMultilanguage} from \"../../../../../interfaces/interfaces\";\nimport {UserService} from \"../../../../../services/common/user\";\n\n@Component({\n  tag: \"app-multilanguage-text\",\n  styleUrl: \"app-multilanguage-text.scss\",\n})\nexport class AppMultilanguageText {\n  @Prop() text: TextMultilanguage;\n  @State() selectedLanguage = \"en\";\n\n  componentWillLoad() {\n    this.selectedLanguage = UserService.userSettings.getLanguage();\n    const textLanguages = Object.keys(this.text).sort();\n    //check if user language is available\n    if (\n      textLanguages &&\n      textLanguages.length > 0 &&\n      !textLanguages.includes(this.selectedLanguage)\n    ) {\n      //not available - check if english is available\n      if (textLanguages.includes(\"en\")) {\n        this.selectedLanguage = \"en\";\n      } else {\n        this.selectedLanguage = textLanguages[0];\n      }\n    }\n  }\n\n  changeSelectedLanguage(ev) {\n    if (ev.detail) {\n      this.selectedLanguage = ev.detail;\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <ion-grid>\n          <ion-row>\n            <ion-col>\n              {\n                //show according to user language\n                this.text[this.selectedLanguage]\n              }\n            </ion-col>\n            <ion-col size=\"1\">\n              <app-language-picker\n                selectedLangCode={this.selectedLanguage}\n                picker\n                selectOnly\n                onLanguageChanged={(ev) => this.changeSelectedLanguage(ev)}\n              ></app-language-picker>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n      </Host>\n    );\n  }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --ion-grid-padding: Padding for the Grid\n   * @prop --ion-grid-padding-xs: Padding for the Grid on xs screens\n   * @prop --ion-grid-padding-sm: Padding for the Grid on sm screens\n   * @prop --ion-grid-padding-md: Padding for the Grid on md screens\n   * @prop --ion-grid-padding-lg: Padding for the Grid on lg screens\n   * @prop --ion-grid-padding-xl: Padding for the Grid on xl screens\n   *\n   * @prop --ion-grid-width: Width of the fixed Grid\n   * @prop --ion-grid-width-xs: Width of the fixed Grid on xs screens\n   * @prop --ion-grid-width-sm: Width of the fixed Grid on sm screens\n   * @prop --ion-grid-width-md: Width of the fixed Grid on md screens\n   * @prop --ion-grid-width-lg: Width of the fixed Grid on lg screens\n   * @prop --ion-grid-width-xl: Width of the fixed Grid on xl screens\n   */\n  -webkit-padding-start: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  padding-inline-start: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  -webkit-padding-end: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  padding-inline-end: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  padding-top: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  padding-bottom: var(--ion-grid-padding-xs, var(--ion-grid-padding, 5px));\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  display: block;\n  flex: 1;\n}\n@media (min-width: 576px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    padding-inline-start: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    padding-inline-end: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    padding-top: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n    padding-bottom: var(--ion-grid-padding-sm, var(--ion-grid-padding, 5px));\n  }\n}\n@media (min-width: 768px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    padding-inline-start: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    padding-inline-end: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    padding-top: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n    padding-bottom: var(--ion-grid-padding-md, var(--ion-grid-padding, 5px));\n  }\n}\n@media (min-width: 992px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    padding-inline-start: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    padding-inline-end: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    padding-top: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n    padding-bottom: var(--ion-grid-padding-lg, var(--ion-grid-padding, 5px));\n  }\n}\n@media (min-width: 1200px) {\n  :host {\n    -webkit-padding-start: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    padding-inline-start: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    -webkit-padding-end: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    padding-inline-end: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    padding-top: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n    padding-bottom: var(--ion-grid-padding-xl, var(--ion-grid-padding, 5px));\n  }\n}\n\n:host(.grid-fixed) {\n  width: var(--ion-grid-width-xs, var(--ion-grid-width, 100%));\n  max-width: 100%;\n}\n@media (min-width: 576px) {\n  :host(.grid-fixed) {\n    width: var(--ion-grid-width-sm, var(--ion-grid-width, 540px));\n  }\n}\n@media (min-width: 768px) {\n  :host(.grid-fixed) {\n    width: var(--ion-grid-width-md, var(--ion-grid-width, 720px));\n  }\n}\n@media (min-width: 992px) {\n  :host(.grid-fixed) {\n    width: var(--ion-grid-width-lg, var(--ion-grid-width, 960px));\n  }\n}\n@media (min-width: 1200px) {\n  :host(.grid-fixed) {\n    width: var(--ion-grid-width-xl, var(--ion-grid-width, 1140px));\n  }\n}\n\n:host(.ion-no-padding) {\n  --ion-grid-column-padding: 0;\n  --ion-grid-column-padding-xs: 0;\n  --ion-grid-column-padding-sm: 0;\n  --ion-grid-column-padding-md: 0;\n  --ion-grid-column-padding-lg: 0;\n  --ion-grid-column-padding-xl: 0;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class Grid {\n    constructor() {\n        this.fixed = false;\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '930ce78b02f8360fbca08a35d364d2c09128c6c8', class: {\n                [mode]: true,\n                'grid-fixed': this.fixed,\n            } }, h(\"slot\", { key: 'c47bf7ef2197f5ebc42d3e2c55044276fb0db393' })));\n    }\n    static get is() { return \"ion-grid\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"grid.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"grid.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"fixed\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the grid will have a fixed width based on the screen size.\"\n                },\n                \"attribute\": \"fixed\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --color: Color of the note\n   */\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  box-sizing: border-box;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n:host {\n  --color: var(--ion-color-step-350, var(--ion-text-color-step-650, #a6a6a6));\n  font-size: max(14px, 1rem);\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --color: Color of the note\n   */\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  box-sizing: border-box;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n:host {\n  --color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n  font-size: 0.875rem;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { createColorClasses } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class Note {\n    constructor() {\n        this.color = undefined;\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: '90ec2fe8c9487608ed8c0bdc32c2e80a6a0890b3', class: createColorClasses(this.color, {\n                [mode]: true,\n            }) }, h(\"slot\", { key: '115ee3f79e6c526b0644443aad468e99385d0eda' })));\n    }\n    static get is() { return \"ion-note\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"note.ios.scss\"],\n            \"md\": [\"note.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"note.ios.css\"],\n            \"md\": [\"note.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            }\n        };\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the skeleton text\n   * @prop --background-rgb: Background of the skeleton text in rgb format\n   *\n   * @prop --border-radius: Border radius of the skeleton text\n   */\n  --background: rgba(var(--background-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.065);\n  border-radius: var(--border-radius, inherit);\n  display: block;\n  width: 100%;\n  height: inherit;\n  margin-top: 4px;\n  margin-bottom: 4px;\n  background: var(--background);\n  line-height: 10px;\n  user-select: none;\n  pointer-events: none;\n}\n\nspan {\n  display: inline-block;\n}\n\n:host(.in-media) {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  height: 100%;\n}\n\n:host(.skeleton-text-animated) {\n  position: relative;\n  background: linear-gradient(to right, rgba(var(--background-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.065) 8%, rgba(var(--background-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.135) 18%, rgba(var(--background-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.065) 33%);\n  background-size: 800px 104px;\n  animation-duration: 1s;\n  animation-fill-mode: forwards;\n  animation-iteration-count: infinite;\n  animation-name: shimmer;\n  animation-timing-function: linear;\n}\n\n/* stylelint-disable property-disallowed-list */\n@keyframes shimmer {\n  0% {\n    background-position: -400px 0;\n  }\n  100% {\n    background-position: 400px 0;\n  }\n}\n/* stylelint-enable property-disallowed-list */","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { hostContext } from \"../../utils/theme\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class SkeletonText {\n    constructor() {\n        this.animated = false;\n    }\n    componentWillLoad() {\n        this.emitStyle();\n    }\n    emitStyle() {\n        // The emitted property is used by item in order\n        // to add the item-skeleton-text class which applies\n        // overflow: hidden to its label\n        const style = {\n            'skeleton-text': true,\n        };\n        this.ionStyle.emit(style);\n    }\n    render() {\n        const animated = this.animated && config.getBoolean('animated', true);\n        const inMedia = hostContext('ion-avatar', this.el) || hostContext('ion-thumbnail', this.el);\n        const mode = getIonMode(this);\n        return (h(Host, { key: '1a3e78e9a6f740d609d1f0b7a16cb6eff4a2d617', class: {\n                [mode]: true,\n                'skeleton-text-animated': animated,\n                'in-media': inMedia,\n            } }, h(\"span\", { key: 'be3eabe196ec6e8ec19857375ba30f4c8aa58e7f' }, \"\\u00A0\")));\n    }\n    static get is() { return \"ion-skeleton-text\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"skeleton-text.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"skeleton-text.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"animated\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the skeleton text will animate.\"\n                },\n                \"attribute\": \"animated\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionStyle\",\n                \"name\": \"ionStyle\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Emitted when the styles change.\"\n                },\n                \"complexType\": {\n                    \"original\": \"StyleEventDetail\",\n                    \"resolved\": \"StyleEventDetail\",\n                    \"references\": {\n                        \"StyleEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::StyleEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get elementRef() { return \"el\"; }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the textarea\n   *\n   * @prop --border-radius: Border radius of the textarea\n   * @prop --border-color: Color of the border below the textarea when using helper text, error text, or counter\n   * @prop --border-radius: Radius of the textarea border. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.\n   * @prop --border-style: Style of the border below the textarea when using helper text, error text, or counter\n   * @prop --border-width: Width of the border below the textarea when using helper text, error text, or counter\n   *\n   * @prop --color: Color of the text\n   *\n   * @prop --placeholder-color: Color of the placeholder text\n   * @prop --placeholder-font-style: Style of the placeholder text\n   * @prop --placeholder-font-weight: Weight of the placeholder text\n   * @prop --placeholder-opacity: Opacity of the placeholder text\n   *\n   * @prop --highlight-height: The height of the highlight on the textarea. Only applies to md mode.\n   * @prop --highlight-color-focused: The color of the highlight on the textarea when focused\n   * @prop --highlight-color-valid: The color of the highlight on the textarea when valid\n   * @prop --highlight-color-invalid: The color of the highlight on the textarea when invalid\n   *\n   * @prop --padding-top: Top padding of the textarea\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea\n   * @prop --padding-bottom: Bottom padding of the textarea\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea\n   */\n  --background: initial;\n  --color: initial;\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: var(--ion-placeholder-opacity, 0.6);\n  --padding-top: 0;\n  --padding-end: 0;\n  --padding-bottom: 8px;\n  --padding-start: 0;\n  --border-radius: 0;\n  --border-style: solid;\n  --highlight-color-focused: var(--ion-color-primary, #0054e9);\n  --highlight-color-valid: var(--ion-color-success, #2dd55b);\n  --highlight-color-invalid: var(--ion-color-danger, #c5000f);\n  /**\n   * This is a private API that is used to switch\n   * out the highlight color based on the state\n   * of the component without having to write\n   * different selectors for different fill variants.\n   */\n  --highlight-color: var(--highlight-color-focused);\n  display: block;\n  position: relative;\n  width: 100%;\n  min-height: 44px;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  z-index: 2;\n  box-sizing: border-box;\n}\n\n/**\n * Since the label sits on top of the element,\n * the component needs to be taller otherwise the\n * label will appear too close to the textarea text.\n * Also, floating and stacked labels should not\n * push the label down since it it\n * sits on top of the textarea.\n */\n:host(.textarea-label-placement-floating),\n:host(.textarea-label-placement-stacked) {\n  --padding-top: 0px;\n  min-height: 56px;\n}\n\n/**\n * When the cols property is set we should\n * respect that width instead of defaulting\n * to taking up the entire line.\n * Requires both the cols and autoGrow\n * properties to be reflected as attributes\n * on the host.\n *\n * cols does not work with autoGrow because\n * autoGrow would prevent line breaks from naturally\n * occurring until the textarea takes up the entire line width.\n */\n:host([cols]:not([auto-grow])) {\n  width: fit-content;\n}\n\n:host(.ion-color) {\n  --highlight-color-focused: var(--ion-color-base);\n  background: initial;\n}\n\n:host-context(ion-item) {\n  align-self: baseline;\n}\n\n:host-context(ion-item)[slot=start],\n:host-context(ion-item)[slot=end] {\n  width: auto;\n}\n\n.native-textarea {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  white-space: pre-wrap;\n  /**\n   * This ensures the textarea\n   * remains on top of any decoration\n   * that we render (particularly the\n   * outline border when fill=\"outline\").\n   * If we did not do this then Axe would\n   * be unable to determine the color\n   * contrast of the textarea.\n   */\n  z-index: 1;\n  box-sizing: border-box;\n  resize: none;\n  appearance: none;\n}\n.native-textarea::placeholder {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n\n.native-textarea {\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n.cloned-input {\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  pointer-events: none;\n}\n.cloned-input {\n  inset-inline-start: 0;\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n:host([auto-grow]) .cloned-input {\n  height: 100%;\n}\n\n:host([auto-grow]) .native-textarea {\n  overflow: hidden;\n}\n\n.textarea-wrapper {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 0px;\n  padding-bottom: 0px;\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: flex-start;\n  height: inherit;\n  min-height: inherit;\n  transition: background-color 15ms linear;\n  background: var(--background);\n  line-height: normal;\n}\n\n.native-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.has-focus) textarea {\n  caret-color: var(--highlight-color);\n}\n\n.native-wrapper textarea {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n}\n\n.native-wrapper {\n  display: grid;\n  min-width: inherit;\n  max-width: inherit;\n  min-height: inherit;\n  max-height: inherit;\n  /**\n   * This avoids a WebKit bug where\n   * the height of the inner textarea\n   * is incorrect and flows outside the\n   * parent container: https://bugs.webkit.org/show_bug.cgi?id=256781\n   * TODO FW-4734\n   */\n  grid-auto-rows: 100%;\n}\n.native-wrapper::after {\n  white-space: pre-wrap;\n  content: attr(data-replicated-value) \" \";\n  visibility: hidden;\n}\n\n.native-wrapper::after {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  border-radius: var(--border-radius);\n  /**\n   * Note: Do not use @include text-inherit()\n   * as that sets white-space: inherit\n   * Instead, we use white-space: pre-wrap above.\n   */\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n.textarea-wrapper-inner {\n  display: flex;\n  width: 100%;\n  min-height: inherit;\n}\n\n:host(.ion-touched.ion-invalid) {\n  --highlight-color: var(--highlight-color-invalid);\n}\n\n/**\n * The component highlight is only shown\n * on focus, so we can safely set the valid\n * color state when touched/valid. If we\n * set it when .has-focus is present then\n * the highlight color would change\n * from the valid color to the component's\n * color during the transition after the\n * component loses focus.\n */\n:host(.ion-valid) {\n  --highlight-color: var(--highlight-color-valid);\n}\n\n.textarea-bottom {\n  /**\n   * The bottom content should take on the start and end\n   * padding so it is always aligned with either the label\n   * or the start of the textarea.\n   */\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 5px;\n  padding-bottom: 0;\n  display: flex;\n  justify-content: space-between;\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  font-size: 0.75rem;\n}\n\n/**\n * If the textarea has a validity state, the\n * border and label should reflect that as a color.\n */\n:host(.has-focus.ion-valid),\n:host(.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Error text should only be shown when .ion-invalid is\n * present on the textarea. Otherwise the helper text should\n * be shown.\n */\n.textarea-bottom .error-text {\n  display: none;\n  color: var(--highlight-color-invalid);\n}\n\n.textarea-bottom .helper-text {\n  display: block;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n}\n\n:host(.ion-touched.ion-invalid) .textarea-bottom .error-text {\n  display: block;\n}\n\n:host(.ion-touched.ion-invalid) .textarea-bottom .helper-text {\n  display: none;\n}\n\n.textarea-bottom .counter {\n  /**\n   * Counter should always be at\n   * the end of the container even\n   * when no helper/error texts are used.\n   */\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n  white-space: nowrap;\n  padding-inline-start: 16px;\n}\n\n.label-text-wrapper {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   * However, we do not set the max\n   * width to 100% because then\n   * only the label would show and users\n   * would not be able to see what they are typing.\n   */\n  max-width: 200px;\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the textarea\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n}\n\n/**\n * We need to use two elements instead of\n * one. The .label-text-wrapper is responsible\n * for centering the label text vertically regardless\n * of the textarea height using flexbox.\n *\n * The .label-text element is responsible for controlling\n * overflow when label-placement=\"fixed\".\n * We want the ellipses to show up when the\n * fixed label overflows, but text-overflow: ellipsis only\n * works on block-level elements. A flex item is\n * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).\n */\n.label-text,\n::slotted([slot=label]) {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden,\n.textarea-outline-notch-hidden {\n  display: none;\n}\n\n.textarea-wrapper textarea {\n  /**\n   * When the floating label appears on top of the\n   * textarea, we need to fade the textarea out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/**\n * Label is on the left of the textarea in LTR and\n * on the right in RTL.\n */\n:host(.textarea-label-placement-start) .textarea-wrapper {\n  flex-direction: row;\n}\n\n:host(.textarea-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the textarea should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the textarea in LTR and\n * on the left in RTL.\n */\n:host(.textarea-label-placement-end) .textarea-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the textarea should be on the start\n * when the label sits at the end.\n */\n:host(.textarea-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.textarea-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the textarea should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the textarea in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.textarea-label-placement-fixed) .label-text {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Stacked: Label sits above the textarea and is scaled down.\n * Floating: Label sits over the textarea when the textarea has no\n * value and is blurred. Label sits above the textarea and is scaled\n * down when the textarea is focused or has a value.\n *\n */\n:host(.textarea-label-placement-stacked) .textarea-wrapper,\n:host(.textarea-label-placement-floating) .textarea-wrapper {\n  flex-direction: column;\n  align-items: start;\n}\n\n/**\n * Ensures that the label animates\n * up and to the left in LTR or\n * up and to the right in RTL.\n */\n:host(.textarea-label-placement-stacked) .label-text-wrapper,\n:host(.textarea-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  max-width: 100%;\n  /**\n   * The 2 ensures the label\n   * remains on top of any browser\n   * autofill background too.\n   */\n  z-index: 2;\n}\n:host-context([dir=rtl]):host(.textarea-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).textarea-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.textarea-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).textarea-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.textarea-label-placement-stacked:dir(rtl)) .label-text-wrapper, :host(.textarea-label-placement-floating:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n/**\n * Ensures the textarea does not\n * overlap the label.\n */\n:host(.textarea-label-placement-stacked) textarea,\n:host(.textarea-label-placement-floating) textarea,\n:host(.textarea-label-placement-stacked[auto-grow]) .native-wrapper::after,\n:host(.textarea-label-placement-floating[auto-grow]) .native-wrapper::after {\n  -webkit-margin-start: 0px;\n  margin-inline-start: 0px;\n  -webkit-margin-end: 0px;\n  margin-inline-end: 0px;\n  margin-top: 8px;\n  margin-bottom: 0px;\n}\n\n:host(.textarea-label-placement-stacked) ::slotted([slot=start]),\n:host(.textarea-label-placement-stacked) ::slotted([slot=end]),\n:host(.textarea-label-placement-floating) ::slotted([slot=start]),\n:host(.textarea-label-placement-floating) ::slotted([slot=end]) {\n  margin-top: 8px;\n}\n\n/**\n * This makes the label sit over the textarea\n * when the textarea is blurred and has no value.\n */\n:host(.textarea-label-placement-floating) .label-text-wrapper {\n  transform: translateY(100%) scale(1);\n}\n\n/**\n * The textarea should be hidden when the label\n * is on top of the textarea. This prevents the label\n * from overlapping any placeholder value.\n */\n:host(.textarea-label-placement-floating) textarea {\n  opacity: 0;\n}\n\n:host(.has-focus.textarea-label-placement-floating) textarea,\n:host(.has-value.textarea-label-placement-floating) textarea {\n  opacity: 1;\n}\n\n/**\n * This makes the label sit above the textarea.\n */\n:host(.label-floating) .label-text-wrapper {\n  transform: translateY(50%) scale(0.75);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n.start-slot-wrapper, .end-slot-wrapper {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  display: flex;\n  flex-shrink: 0;\n  align-self: start;\n}\n\n::slotted([slot=start]),\n::slotted([slot=end]) {\n  margin-top: 0;\n}\n\n::slotted([slot=start]:last-of-type) {\n  margin-inline-end: 16px;\n  margin-inline-start: 0;\n}\n\n::slotted([slot=end]:first-of-type) {\n  margin-inline-start: 16px;\n  margin-inline-end: 0;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border-width: 0.55px;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));\n  --padding-top: 10px;\n  --padding-end: 0px;\n  --padding-bottom: 8px;\n  --padding-start: 0px;\n  --highlight-height: 0px;\n  font-size: inherit;\n}\n\n:host(.textarea-disabled) {\n  opacity: 0.3;\n}\n\n/**\n * Slotted buttons have a lot of default padding that can\n * cause them to look misaligned from other pieces such\n * as the control's label, especially when using a clear\n * fill. We also make them circular to ensure that non-\n * clear buttons and the focus/hover state on clear ones\n * don't look too crowded.\n */\n::slotted(ion-button[slot=start].button-has-icon-only),\n::slotted(ion-button[slot=end].button-has-icon-only) {\n  --border-radius: 50%;\n  --padding-start: 0;\n  --padding-end: 0;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  aspect-ratio: 1;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the textarea\n   *\n   * @prop --border-radius: Border radius of the textarea\n   * @prop --border-color: Color of the border below the textarea when using helper text, error text, or counter\n   * @prop --border-radius: Radius of the textarea border. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.\n   * @prop --border-style: Style of the border below the textarea when using helper text, error text, or counter\n   * @prop --border-width: Width of the border below the textarea when using helper text, error text, or counter\n   *\n   * @prop --color: Color of the text\n   *\n   * @prop --placeholder-color: Color of the placeholder text\n   * @prop --placeholder-font-style: Style of the placeholder text\n   * @prop --placeholder-font-weight: Weight of the placeholder text\n   * @prop --placeholder-opacity: Opacity of the placeholder text\n   *\n   * @prop --highlight-height: The height of the highlight on the textarea. Only applies to md mode.\n   * @prop --highlight-color-focused: The color of the highlight on the textarea when focused\n   * @prop --highlight-color-valid: The color of the highlight on the textarea when valid\n   * @prop --highlight-color-invalid: The color of the highlight on the textarea when invalid\n   *\n   * @prop --padding-top: Top padding of the textarea\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea\n   * @prop --padding-bottom: Bottom padding of the textarea\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea\n   */\n  --background: initial;\n  --color: initial;\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: var(--ion-placeholder-opacity, 0.6);\n  --padding-top: 0;\n  --padding-end: 0;\n  --padding-bottom: 8px;\n  --padding-start: 0;\n  --border-radius: 0;\n  --border-style: solid;\n  --highlight-color-focused: var(--ion-color-primary, #0054e9);\n  --highlight-color-valid: var(--ion-color-success, #2dd55b);\n  --highlight-color-invalid: var(--ion-color-danger, #c5000f);\n  /**\n   * This is a private API that is used to switch\n   * out the highlight color based on the state\n   * of the component without having to write\n   * different selectors for different fill variants.\n   */\n  --highlight-color: var(--highlight-color-focused);\n  display: block;\n  position: relative;\n  width: 100%;\n  min-height: 44px;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  z-index: 2;\n  box-sizing: border-box;\n}\n\n/**\n * Since the label sits on top of the element,\n * the component needs to be taller otherwise the\n * label will appear too close to the textarea text.\n * Also, floating and stacked labels should not\n * push the label down since it it\n * sits on top of the textarea.\n */\n:host(.textarea-label-placement-floating),\n:host(.textarea-label-placement-stacked) {\n  --padding-top: 0px;\n  min-height: 56px;\n}\n\n/**\n * When the cols property is set we should\n * respect that width instead of defaulting\n * to taking up the entire line.\n * Requires both the cols and autoGrow\n * properties to be reflected as attributes\n * on the host.\n *\n * cols does not work with autoGrow because\n * autoGrow would prevent line breaks from naturally\n * occurring until the textarea takes up the entire line width.\n */\n:host([cols]:not([auto-grow])) {\n  width: fit-content;\n}\n\n:host(.ion-color) {\n  --highlight-color-focused: var(--ion-color-base);\n  background: initial;\n}\n\n:host-context(ion-item) {\n  align-self: baseline;\n}\n\n:host-context(ion-item)[slot=start],\n:host-context(ion-item)[slot=end] {\n  width: auto;\n}\n\n.native-textarea {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  white-space: pre-wrap;\n  /**\n   * This ensures the textarea\n   * remains on top of any decoration\n   * that we render (particularly the\n   * outline border when fill=\"outline\").\n   * If we did not do this then Axe would\n   * be unable to determine the color\n   * contrast of the textarea.\n   */\n  z-index: 1;\n  box-sizing: border-box;\n  resize: none;\n  appearance: none;\n}\n.native-textarea::placeholder {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n\n.native-textarea {\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n.cloned-input {\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  pointer-events: none;\n}\n.cloned-input {\n  inset-inline-start: 0;\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n:host([auto-grow]) .cloned-input {\n  height: 100%;\n}\n\n:host([auto-grow]) .native-textarea {\n  overflow: hidden;\n}\n\n.textarea-wrapper {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 0px;\n  padding-bottom: 0px;\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: flex-start;\n  height: inherit;\n  min-height: inherit;\n  transition: background-color 15ms linear;\n  background: var(--background);\n  line-height: normal;\n}\n\n.native-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.has-focus) textarea {\n  caret-color: var(--highlight-color);\n}\n\n.native-wrapper textarea {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n}\n\n.native-wrapper {\n  display: grid;\n  min-width: inherit;\n  max-width: inherit;\n  min-height: inherit;\n  max-height: inherit;\n  /**\n   * This avoids a WebKit bug where\n   * the height of the inner textarea\n   * is incorrect and flows outside the\n   * parent container: https://bugs.webkit.org/show_bug.cgi?id=256781\n   * TODO FW-4734\n   */\n  grid-auto-rows: 100%;\n}\n.native-wrapper::after {\n  white-space: pre-wrap;\n  content: attr(data-replicated-value) \" \";\n  visibility: hidden;\n}\n\n.native-wrapper::after {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  border-radius: var(--border-radius);\n  /**\n   * Note: Do not use @include text-inherit()\n   * as that sets white-space: inherit\n   * Instead, we use white-space: pre-wrap above.\n   */\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n.textarea-wrapper-inner {\n  display: flex;\n  width: 100%;\n  min-height: inherit;\n}\n\n:host(.ion-touched.ion-invalid) {\n  --highlight-color: var(--highlight-color-invalid);\n}\n\n/**\n * The component highlight is only shown\n * on focus, so we can safely set the valid\n * color state when touched/valid. If we\n * set it when .has-focus is present then\n * the highlight color would change\n * from the valid color to the component's\n * color during the transition after the\n * component loses focus.\n */\n:host(.ion-valid) {\n  --highlight-color: var(--highlight-color-valid);\n}\n\n.textarea-bottom {\n  /**\n   * The bottom content should take on the start and end\n   * padding so it is always aligned with either the label\n   * or the start of the textarea.\n   */\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 5px;\n  padding-bottom: 0;\n  display: flex;\n  justify-content: space-between;\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  font-size: 0.75rem;\n}\n\n/**\n * If the textarea has a validity state, the\n * border and label should reflect that as a color.\n */\n:host(.has-focus.ion-valid),\n:host(.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Error text should only be shown when .ion-invalid is\n * present on the textarea. Otherwise the helper text should\n * be shown.\n */\n.textarea-bottom .error-text {\n  display: none;\n  color: var(--highlight-color-invalid);\n}\n\n.textarea-bottom .helper-text {\n  display: block;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n}\n\n:host(.ion-touched.ion-invalid) .textarea-bottom .error-text {\n  display: block;\n}\n\n:host(.ion-touched.ion-invalid) .textarea-bottom .helper-text {\n  display: none;\n}\n\n.textarea-bottom .counter {\n  /**\n   * Counter should always be at\n   * the end of the container even\n   * when no helper/error texts are used.\n   */\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n  white-space: nowrap;\n  padding-inline-start: 16px;\n}\n\n.label-text-wrapper {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   * However, we do not set the max\n   * width to 100% because then\n   * only the label would show and users\n   * would not be able to see what they are typing.\n   */\n  max-width: 200px;\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the textarea\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n}\n\n/**\n * We need to use two elements instead of\n * one. The .label-text-wrapper is responsible\n * for centering the label text vertically regardless\n * of the textarea height using flexbox.\n *\n * The .label-text element is responsible for controlling\n * overflow when label-placement=\"fixed\".\n * We want the ellipses to show up when the\n * fixed label overflows, but text-overflow: ellipsis only\n * works on block-level elements. A flex item is\n * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).\n */\n.label-text,\n::slotted([slot=label]) {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden,\n.textarea-outline-notch-hidden {\n  display: none;\n}\n\n.textarea-wrapper textarea {\n  /**\n   * When the floating label appears on top of the\n   * textarea, we need to fade the textarea out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/**\n * Label is on the left of the textarea in LTR and\n * on the right in RTL.\n */\n:host(.textarea-label-placement-start) .textarea-wrapper {\n  flex-direction: row;\n}\n\n:host(.textarea-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the textarea should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the textarea in LTR and\n * on the left in RTL.\n */\n:host(.textarea-label-placement-end) .textarea-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the textarea should be on the start\n * when the label sits at the end.\n */\n:host(.textarea-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.textarea-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the textarea should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the textarea in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.textarea-label-placement-fixed) .label-text {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Stacked: Label sits above the textarea and is scaled down.\n * Floating: Label sits over the textarea when the textarea has no\n * value and is blurred. Label sits above the textarea and is scaled\n * down when the textarea is focused or has a value.\n *\n */\n:host(.textarea-label-placement-stacked) .textarea-wrapper,\n:host(.textarea-label-placement-floating) .textarea-wrapper {\n  flex-direction: column;\n  align-items: start;\n}\n\n/**\n * Ensures that the label animates\n * up and to the left in LTR or\n * up and to the right in RTL.\n */\n:host(.textarea-label-placement-stacked) .label-text-wrapper,\n:host(.textarea-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  max-width: 100%;\n  /**\n   * The 2 ensures the label\n   * remains on top of any browser\n   * autofill background too.\n   */\n  z-index: 2;\n}\n:host-context([dir=rtl]):host(.textarea-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).textarea-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.textarea-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).textarea-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.textarea-label-placement-stacked:dir(rtl)) .label-text-wrapper, :host(.textarea-label-placement-floating:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n/**\n * Ensures the textarea does not\n * overlap the label.\n */\n:host(.textarea-label-placement-stacked) textarea,\n:host(.textarea-label-placement-floating) textarea,\n:host(.textarea-label-placement-stacked[auto-grow]) .native-wrapper::after,\n:host(.textarea-label-placement-floating[auto-grow]) .native-wrapper::after {\n  -webkit-margin-start: 0px;\n  margin-inline-start: 0px;\n  -webkit-margin-end: 0px;\n  margin-inline-end: 0px;\n  margin-top: 8px;\n  margin-bottom: 0px;\n}\n\n:host(.textarea-label-placement-stacked) ::slotted([slot=start]),\n:host(.textarea-label-placement-stacked) ::slotted([slot=end]),\n:host(.textarea-label-placement-floating) ::slotted([slot=start]),\n:host(.textarea-label-placement-floating) ::slotted([slot=end]) {\n  margin-top: 8px;\n}\n\n/**\n * This makes the label sit over the textarea\n * when the textarea is blurred and has no value.\n */\n:host(.textarea-label-placement-floating) .label-text-wrapper {\n  transform: translateY(100%) scale(1);\n}\n\n/**\n * The textarea should be hidden when the label\n * is on top of the textarea. This prevents the label\n * from overlapping any placeholder value.\n */\n:host(.textarea-label-placement-floating) textarea {\n  opacity: 0;\n}\n\n:host(.has-focus.textarea-label-placement-floating) textarea,\n:host(.has-value.textarea-label-placement-floating) textarea {\n  opacity: 1;\n}\n\n/**\n * This makes the label sit above the textarea.\n */\n:host(.label-floating) .label-text-wrapper {\n  transform: translateY(50%) scale(0.75);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n.start-slot-wrapper, .end-slot-wrapper {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  display: flex;\n  flex-shrink: 0;\n  align-self: start;\n}\n\n::slotted([slot=start]),\n::slotted([slot=end]) {\n  margin-top: 0;\n}\n\n::slotted([slot=start]:last-of-type) {\n  margin-inline-end: 16px;\n  margin-inline-start: 0;\n}\n\n::slotted([slot=end]:first-of-type) {\n  margin-inline-start: 16px;\n  margin-inline-end: 0;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.textarea-fill-solid) {\n  --background: var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));\n  --border-color: var(--ion-color-step-500, var(--ion-background-color-step-500, gray));\n  --border-radius: 4px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n  min-height: 56px;\n}\n\n/**\n * The solid fill style has a border\n * at the bottom of the textarea wrapper.\n * As a result, the border on the \"bottom\n * content\" is not needed.\n */\n:host(.textarea-fill-solid) .textarea-wrapper {\n  border-bottom: var(--border-width) var(--border-style) var(--border-color);\n}\n\n/**\n * If the textarea has a validity state, the\n * border should reflect that as a color.\n */\n:host(.has-focus.textarea-fill-solid.ion-valid),\n:host(.textarea-fill-solid.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n:host(.textarea-fill-solid) .textarea-bottom {\n  border-top: none;\n}\n\n/**\n * Background and border should be\n * slightly darker on hover.\n */\n@media (any-hover: hover) {\n  :host(.textarea-fill-solid:hover) {\n    --background: var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6));\n    --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n  }\n}\n/**\n * Background and border should be\n * much darker on focus.\n */\n:host(.textarea-fill-solid.has-focus) {\n  --background: var(--ion-color-step-150, var(--ion-background-color-step-150, #d9d9d9));\n  --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n}\n\n:host(.textarea-fill-solid) .textarea-wrapper {\n  /**\n   * Only the top left and top right borders should.\n   * have a radius when using a solid fill.\n   */\n  border-start-start-radius: var(--border-radius);\n  border-start-end-radius: var(--border-radius);\n  border-end-end-radius: 0px;\n  border-end-start-radius: 0px;\n}\n\n:host(.label-floating.textarea-fill-solid) .label-text-wrapper {\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.textarea-fill-outline) {\n  --border-color: var(--ion-color-step-300, var(--ion-background-color-step-300, #b3b3b3));\n  --border-radius: 4px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n  min-height: 56px;\n}\n\n:host(.textarea-fill-outline.textarea-shape-round) {\n  --border-radius: 28px;\n  --padding-start: 32px;\n  --padding-end: 32px;\n}\n\n/**\n * If the textarea has a validity state, the\n * border should reflect that as a color.\n */\n:host(.has-focus.textarea-fill-outline.ion-valid),\n:host(.textarea-fill-outline.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Border should be\n * slightly darker on hover.\n */\n@media (any-hover: hover) {\n  :host(.textarea-fill-outline:hover) {\n    --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n  }\n}\n/**\n * The border should get thicker\n * and take on component color when\n * the textarea is focused.\n */\n:host(.textarea-fill-outline.has-focus) {\n  --border-width: var(--highlight-height);\n  --border-color: var(--highlight-color);\n}\n\n/**\n * The bottom content should never have\n * a border with the outline style.\n */\n:host(.textarea-fill-outline) .textarea-bottom {\n  border-top: none;\n}\n\n/**\n * Outline textarea do not have a bottom border.\n * Instead, they have a border that wraps the\n * textarea + label.\n */\n:host(.textarea-fill-outline) .textarea-wrapper {\n  border-bottom: none;\n}\n\n:host(.textarea-fill-outline.textarea-label-placement-stacked) .label-text-wrapper,\n:host(.textarea-fill-outline.textarea-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  position: absolute;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(100% - var(--padding-start) - var(--padding-end));\n}\n:host-context([dir=rtl]):host(.textarea-fill-outline.textarea-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).textarea-fill-outline.textarea-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.textarea-fill-outline.textarea-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).textarea-fill-outline.textarea-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.textarea-fill-outline.textarea-label-placement-stacked:dir(rtl)) .label-text-wrapper, :host(.textarea-fill-outline.textarea-label-placement-floating:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n/**\n * The label should appear on top of an outline\n * container that overlaps it so it is always clickable.\n */\n:host(.textarea-fill-outline) .label-text-wrapper,\n:host(.textarea-fill-outline) .label-text-wrapper {\n  position: relative;\n}\n\n/**\n * This makes the label sit above the textarea.\n */\n:host(.label-floating.textarea-fill-outline) .label-text-wrapper {\n  transform: translateY(-32%) scale(0.75);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(\n    (100% - var(--padding-start) - var(--padding-end) - 8px) / 0.75\n  );\n}\n\n/**\n * This ensures that the textarea does not\n * overlap the floating label while still\n * remaining visually centered.\n */\n:host(.textarea-fill-outline.textarea-label-placement-stacked) textarea,\n:host(.textarea-fill-outline.textarea-label-placement-floating) textarea,\n:host(.textarea-fill-outline.textarea-label-placement-stacked[auto-grow]) .native-wrapper::after,\n:host(.textarea-fill-outline.textarea-label-placement-floating[auto-grow]) .native-wrapper::after {\n  -webkit-margin-start: 0px;\n  margin-inline-start: 0px;\n  -webkit-margin-end: 0px;\n  margin-inline-end: 0px;\n  margin-top: 12px;\n  margin-bottom: 0px;\n}\n\n:host(.textarea-fill-outline.textarea-label-placement-stacked) ::slotted([slot=start]),\n:host(.textarea-fill-outline.textarea-label-placement-stacked) ::slotted([slot=end]),\n:host(.textarea-fill-outline.textarea-label-placement-floating) ::slotted([slot=start]),\n:host(.textarea-fill-outline.textarea-label-placement-floating) ::slotted([slot=end]) {\n  margin-top: 12px;\n}\n\n:host(.textarea-fill-outline) .textarea-outline-container {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.textarea-fill-outline) .textarea-outline-start,\n:host(.textarea-fill-outline) .textarea-outline-end {\n  pointer-events: none;\n}\n\n/**\n * By default, each piece of the container should have\n * a top and bottom border. This gives the appearance\n * of a unified container with a border.\n */\n:host(.textarea-fill-outline) .textarea-outline-start,\n:host(.textarea-fill-outline) .textarea-outline-notch,\n:host(.textarea-fill-outline) .textarea-outline-end {\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  border-bottom: var(--border-width) var(--border-style) var(--border-color);\n}\n\n/**\n * Ensures long labels do not cause the notch to flow\n * out of bounds.\n */\n:host(.textarea-fill-outline) .textarea-outline-notch {\n  max-width: calc(100% - var(--padding-start) - var(--padding-end));\n}\n\n/**\n * This element ensures that the notch used\n * the size of the scaled text so that the\n * border cut out is the correct width.\n * The text in this element should not\n * be interactive.\n */\n:host(.textarea-fill-outline) .notch-spacer {\n  /**\n   * We need $textarea-md-floating-label-padding of padding on the right.\n   * However, we also subtracted $textarea-md-floating-label-padding from\n   * the width of .textarea-outline-start\n   * to create space, so we need to take\n   * that into consideration here.\n   */\n  -webkit-padding-end: 8px;\n  padding-inline-end: 8px;\n  font-size: calc(1em * 0.75);\n  opacity: 0;\n  pointer-events: none;\n  /**\n   * The spacer currently inherits\n   * border-box sizing from the Ionic reset styles.\n   * However, we do not want to include padding in\n   * the calculation of the element dimensions.\n   * This code can be removed if textarea is updated\n   * to use the Shadow DOM.\n   */\n  box-sizing: content-box;\n}\n\n:host(.textarea-fill-outline) .textarea-outline-start {\n  border-start-start-radius: var(--border-radius);\n  border-start-end-radius: 0px;\n  border-end-end-radius: 0px;\n  border-end-start-radius: var(--border-radius);\n  -webkit-border-start: var(--border-width) var(--border-style) var(--border-color);\n  border-inline-start: var(--border-width) var(--border-style) var(--border-color);\n  /**\n   * There should be spacing between the translated text\n   * and .textarea-outline-start. However, we can't add this\n   * spacing onto the notch because it would cause the\n   * label to look like it is not aligned with the\n   * text textarea. Instead, we subtract a few pixels from\n   * this element.\n   */\n  width: calc(var(--padding-start) - 4px);\n}\n\n:host(.textarea-fill-outline) .textarea-outline-end {\n  -webkit-border-end: var(--border-width) var(--border-style) var(--border-color);\n  border-inline-end: var(--border-width) var(--border-style) var(--border-color);\n  border-start-start-radius: 0px;\n  border-start-end-radius: var(--border-radius);\n  border-end-end-radius: var(--border-radius);\n  border-end-start-radius: 0px;\n  /**\n   * The ending outline fragment\n   * should take up the remaining free space.\n   */\n  flex-grow: 1;\n}\n\n/**\n * When the textarea either has focus or a value,\n * there should be a \"cut out\" at the top for\n * the floating/stacked label. We simulate this \"cut out\"\n * by removing the top border from the notch fragment.\n */\n:host(.label-floating.textarea-fill-outline) .textarea-outline-notch {\n  border-top: none;\n}\n\n:host {\n  --border-width: 1px;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));\n  --padding-top: 18px;\n  --padding-end: 0px;\n  --padding-bottom: 8px;\n  --padding-start: 0px;\n  --highlight-height: 2px;\n  font-size: inherit;\n}\n\n.textarea-bottom .counter {\n  letter-spacing: 0.0333333333em;\n}\n\n/**\n * When the textarea is focused the label should\n * take on the highlight color. This should\n * only apply to floating or stacked labels.\n */\n:host(.textarea-label-placement-floating.has-focus) .label-text-wrapper,\n:host(.textarea-label-placement-stacked.has-focus) .label-text-wrapper {\n  color: var(--highlight-color);\n}\n\n:host(.has-focus.textarea-label-placement-floating.ion-valid) .label-text-wrapper,\n:host(.textarea-label-placement-floating.ion-touched.ion-invalid) .label-text-wrapper,\n:host(.has-focus.textarea-label-placement-stacked.ion-valid) .label-text-wrapper,\n:host(.textarea-label-placement-stacked.ion-touched.ion-invalid) .label-text-wrapper {\n  color: var(--highlight-color);\n}\n\n:host(.textarea-disabled) {\n  opacity: 0.38;\n}\n\n.textarea-highlight {\n  bottom: -1px;\n  position: absolute;\n  width: 100%;\n  height: var(--highlight-height);\n  transform: scale(0);\n  transition: transform 200ms;\n  background: var(--highlight-color);\n}\n.textarea-highlight {\n  inset-inline-start: 0;\n}\n\n:host(.has-focus) .textarea-highlight {\n  transform: scale(1);\n}\n\n/**\n * Adjust the highlight up by 1px\n * so it is not cut off by the\n * the item's line (if one is present).\n */\n:host(.in-item) .textarea-highlight {\n  bottom: 0;\n}\n:host(.in-item) .textarea-highlight {\n  inset-inline-start: 0;\n}\n\n:host(.textarea-shape-round) {\n  --border-radius: 16px;\n}\n\n/**\n * Slotted buttons have a lot of default padding that can\n * cause them to look misaligned from other pieces such\n * as the control's label, especially when using a clear\n * fill. We also make them circular to ensure that non-\n * clear buttons and the focus/hover state on clear ones\n * don't look too crowded.\n */\n::slotted(ion-button[slot=start].button-has-icon-only),\n::slotted(ion-button[slot=end].button-has-icon-only) {\n  --border-radius: 50%;\n  --padding-start: 8px;\n  --padding-end: 8px;\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  aspect-ratio: 1;\n  min-height: 40px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, forceUpdate, h, writeTask, } from \"@stencil/core\";\nimport { createNotchController } from \"../../utils/forms/index\";\nimport { inheritAriaAttributes, debounceEvent, inheritAttributes, componentOnReady } from \"../../utils/helpers\";\nimport { createSlotMutationController } from \"../../utils/slot-mutation-controller\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { getCounterText } from \"../input/input.utils\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot label - The label text to associate with the textarea. Use the `labelPlacement` property to control where the label is placed relative to the textarea. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)\n * @slot start - Content to display at the leading edge of the textarea. (EXPERIMENTAL)\n * @slot end - Content to display at the trailing edge of the textarea. (EXPERIMENTAL)\n */\nexport class Textarea {\n    constructor() {\n        this.inputId = `ion-textarea-${textareaIds++}`;\n        /**\n         * `true` if the textarea was cleared as a result of the user typing\n         * with `clearOnEdit` enabled.\n         *\n         * Resets when the textarea loses focus.\n         */\n        this.didTextareaClearOnEdit = false;\n        this.inheritedAttributes = {};\n        // `Event` type is used instead of `InputEvent`\n        // since the types from Stencil are not derived\n        // from the element (e.g. textarea and input\n        // should be InputEvent, but all other elements\n        // should be Event).\n        this.onInput = (ev) => {\n            const input = ev.target;\n            if (input) {\n                this.value = input.value || '';\n            }\n            this.emitInputChange(ev);\n        };\n        this.onChange = (ev) => {\n            this.emitValueChange(ev);\n        };\n        this.onFocus = (ev) => {\n            this.hasFocus = true;\n            this.focusedValue = this.value;\n            this.ionFocus.emit(ev);\n        };\n        this.onBlur = (ev) => {\n            this.hasFocus = false;\n            if (this.focusedValue !== this.value) {\n                /**\n                 * Emits the `ionChange` event when the textarea value\n                 * is different than the value when the textarea was focused.\n                 */\n                this.emitValueChange(ev);\n            }\n            this.didTextareaClearOnEdit = false;\n            this.ionBlur.emit(ev);\n        };\n        this.onKeyDown = (ev) => {\n            this.checkClearOnEdit(ev);\n        };\n        this.hasFocus = false;\n        this.color = undefined;\n        this.autocapitalize = 'none';\n        this.autofocus = false;\n        this.clearOnEdit = false;\n        this.debounce = undefined;\n        this.disabled = false;\n        this.fill = undefined;\n        this.inputmode = undefined;\n        this.enterkeyhint = undefined;\n        this.maxlength = undefined;\n        this.minlength = undefined;\n        this.name = this.inputId;\n        this.placeholder = undefined;\n        this.readonly = false;\n        this.required = false;\n        this.spellcheck = false;\n        this.cols = undefined;\n        this.rows = undefined;\n        this.wrap = undefined;\n        this.autoGrow = false;\n        this.value = '';\n        this.counter = false;\n        this.counterFormatter = undefined;\n        this.errorText = undefined;\n        this.helperText = undefined;\n        this.label = undefined;\n        this.labelPlacement = 'start';\n        this.shape = undefined;\n    }\n    debounceChanged() {\n        const { ionInput, debounce, originalIonInput } = this;\n        /**\n         * If debounce is undefined, we have to manually revert the ionInput emitter in case\n         * debounce used to be set to a number. Otherwise, the event would stay debounced.\n         */\n        this.ionInput = debounce === undefined ? originalIonInput !== null && originalIonInput !== void 0 ? originalIonInput : ionInput : debounceEvent(ionInput, debounce);\n    }\n    /**\n     * Update the native input element when the value changes\n     */\n    valueChanged() {\n        const nativeInput = this.nativeInput;\n        const value = this.getValue();\n        if (nativeInput && nativeInput.value !== value) {\n            nativeInput.value = value;\n        }\n        this.runAutoGrow();\n    }\n    connectedCallback() {\n        const { el } = this;\n        this.slotMutationController = createSlotMutationController(el, ['label', 'start', 'end'], () => forceUpdate(this));\n        this.notchController = createNotchController(el, () => this.notchSpacerEl, () => this.labelSlot);\n        this.debounceChanged();\n        if (Build.isBrowser) {\n            document.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n                detail: el,\n            }));\n        }\n    }\n    disconnectedCallback() {\n        if (Build.isBrowser) {\n            document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n                detail: this.el,\n            }));\n        }\n        if (this.slotMutationController) {\n            this.slotMutationController.destroy();\n            this.slotMutationController = undefined;\n        }\n        if (this.notchController) {\n            this.notchController.destroy();\n            this.notchController = undefined;\n        }\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, ['data-form-type', 'title', 'tabindex']));\n    }\n    componentDidLoad() {\n        this.originalIonInput = this.ionInput;\n        this.runAutoGrow();\n    }\n    componentDidRender() {\n        var _a;\n        (_a = this.notchController) === null || _a === void 0 ? void 0 : _a.calculateNotchWidth();\n    }\n    /**\n     * Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\n     * `textarea.focus()`.\n     *\n     * See [managing focus](/docs/developing/managing-focus) for more information.\n     */\n    async setFocus() {\n        if (this.nativeInput) {\n            this.nativeInput.focus();\n        }\n    }\n    /**\n     * Returns the native `<textarea>` element used under the hood.\n     */\n    async getInputElement() {\n        /**\n         * If this gets called in certain early lifecycle hooks (ex: Vue onMounted),\n         * nativeInput won't be defined yet with the custom elements build, so wait for it to load in.\n         */\n        if (!this.nativeInput) {\n            await new Promise((resolve) => componentOnReady(this.el, resolve));\n        }\n        return Promise.resolve(this.nativeInput);\n    }\n    /**\n     * Emits an `ionChange` event.\n     *\n     * This API should be called for user committed changes.\n     * This API should not be used for external value changes.\n     */\n    emitValueChange(event) {\n        const { value } = this;\n        // Checks for both null and undefined values\n        const newValue = value == null ? value : value.toString();\n        // Emitting a value change should update the internal state for tracking the focused value\n        this.focusedValue = newValue;\n        this.ionChange.emit({ value: newValue, event });\n    }\n    /**\n     * Emits an `ionInput` event.\n     */\n    emitInputChange(event) {\n        const { value } = this;\n        this.ionInput.emit({ value, event });\n    }\n    runAutoGrow() {\n        if (this.nativeInput && this.autoGrow) {\n            writeTask(() => {\n                var _a;\n                if (this.textareaWrapper) {\n                    // Replicated value is an attribute to be used in the stylesheet\n                    // to set the inner contents of a pseudo element.\n                    this.textareaWrapper.dataset.replicatedValue = (_a = this.value) !== null && _a !== void 0 ? _a : '';\n                }\n            });\n        }\n    }\n    /**\n     * Check if we need to clear the text input if clearOnEdit is enabled\n     */\n    checkClearOnEdit(ev) {\n        if (!this.clearOnEdit) {\n            return;\n        }\n        /**\n         * The following keys do not modify the\n         * contents of the input. As a result, pressing\n         * them should not edit the textarea.\n         *\n         * We can't check to see if the value of the textarea\n         * was changed because we call checkClearOnEdit\n         * in a keydown listener, and the key has not yet\n         * been added to the textarea.\n         *\n         * Unlike ion-input, the \"Enter\" key does modify the\n         * textarea by adding a new line, so \"Enter\" is not\n         * included in the IGNORED_KEYS array.\n         */\n        const IGNORED_KEYS = ['Tab', 'Shift', 'Meta', 'Alt', 'Control'];\n        const pressedIgnoredKey = IGNORED_KEYS.includes(ev.key);\n        /**\n         * Clear the textarea if the control has not been previously cleared\n         * during focus.\n         */\n        if (!this.didTextareaClearOnEdit && this.hasValue() && !pressedIgnoredKey) {\n            this.value = '';\n            this.emitInputChange(ev);\n        }\n        /**\n         * Pressing an IGNORED_KEYS first and\n         * then an allowed key will cause the input to not\n         * be cleared.\n         */\n        if (!pressedIgnoredKey) {\n            this.didTextareaClearOnEdit = true;\n        }\n    }\n    hasValue() {\n        return this.getValue() !== '';\n    }\n    getValue() {\n        return this.value || '';\n    }\n    renderLabel() {\n        const { label } = this;\n        return (h(\"div\", { class: {\n                'label-text-wrapper': true,\n                'label-text-wrapper-hidden': !this.hasLabel,\n            } }, label === undefined ? h(\"slot\", { name: \"label\" }) : h(\"div\", { class: \"label-text\" }, label)));\n    }\n    /**\n     * Gets any content passed into the `label` slot,\n     * not the <slot> definition.\n     */\n    get labelSlot() {\n        return this.el.querySelector('[slot=\"label\"]');\n    }\n    /**\n     * Returns `true` if label content is provided\n     * either by a prop or a content. If you want\n     * to get the plaintext value of the label use\n     * the `labelText` getter instead.\n     */\n    get hasLabel() {\n        return this.label !== undefined || this.labelSlot !== null;\n    }\n    /**\n     * Renders the border container when fill=\"outline\".\n     */\n    renderLabelContainer() {\n        const mode = getIonMode(this);\n        const hasOutlineFill = mode === 'md' && this.fill === 'outline';\n        if (hasOutlineFill) {\n            /**\n             * The outline fill has a special outline\n             * that appears around the textarea and the label.\n             * Certain stacked and floating label placements cause the\n             * label to translate up and create a \"cut out\"\n             * inside of that border by using the notch-spacer element.\n             */\n            return [\n                h(\"div\", { class: \"textarea-outline-container\" }, h(\"div\", { class: \"textarea-outline-start\" }), h(\"div\", { class: {\n                        'textarea-outline-notch': true,\n                        'textarea-outline-notch-hidden': !this.hasLabel,\n                    } }, h(\"div\", { class: \"notch-spacer\", \"aria-hidden\": \"true\", ref: (el) => (this.notchSpacerEl = el) }, this.label)), h(\"div\", { class: \"textarea-outline-end\" })),\n                this.renderLabel(),\n            ];\n        }\n        /**\n         * If not using the outline style,\n         * we can render just the label.\n         */\n        return this.renderLabel();\n    }\n    /**\n     * Renders the helper text or error text values\n     */\n    renderHintText() {\n        const { helperText, errorText } = this;\n        return [h(\"div\", { class: \"helper-text\" }, helperText), h(\"div\", { class: \"error-text\" }, errorText)];\n    }\n    renderCounter() {\n        const { counter, maxlength, counterFormatter, value } = this;\n        if (counter !== true || maxlength === undefined) {\n            return;\n        }\n        return h(\"div\", { class: \"counter\" }, getCounterText(value, maxlength, counterFormatter));\n    }\n    /**\n     * Responsible for rendering helper text,\n     * error text, and counter. This element should only\n     * be rendered if hint text is set or counter is enabled.\n     */\n    renderBottomContent() {\n        const { counter, helperText, errorText, maxlength } = this;\n        /**\n         * undefined and empty string values should\n         * be treated as not having helper/error text.\n         */\n        const hasHintText = !!helperText || !!errorText;\n        const hasCounter = counter === true && maxlength !== undefined;\n        if (!hasHintText && !hasCounter) {\n            return;\n        }\n        return (h(\"div\", { class: \"textarea-bottom\" }, this.renderHintText(), this.renderCounter()));\n    }\n    render() {\n        const { inputId, disabled, fill, shape, labelPlacement, el, hasFocus } = this;\n        const mode = getIonMode(this);\n        const value = this.getValue();\n        const inItem = hostContext('ion-item', this.el);\n        const shouldRenderHighlight = mode === 'md' && fill !== 'outline' && !inItem;\n        const hasValue = this.hasValue();\n        const hasStartEndSlots = el.querySelector('[slot=\"start\"], [slot=\"end\"]') !== null;\n        /**\n         * If the label is stacked, it should always sit above the textarea.\n         * For floating labels, the label should move above the textarea if\n         * the textarea has a value, is focused, or has anything in either\n         * the start or end slot.\n         *\n         * If there is content in the start slot, the label would overlap\n         * it if not forced to float. This is also applied to the end slot\n         * because with the default or solid fills, the textarea is not\n         * vertically centered in the container, but the label is. This\n         * causes the slots and label to appear vertically offset from each\n         * other when the label isn't floating above the input. This doesn't\n         * apply to the outline fill, but this was not accounted for to keep\n         * things consistent.\n         *\n         * TODO(FW-5592): Remove hasStartEndSlots condition\n         */\n        const labelShouldFloat = labelPlacement === 'stacked' || (labelPlacement === 'floating' && (hasValue || hasFocus || hasStartEndSlots));\n        return (h(Host, { key: '37595a18d77dea1a337ac1c672e5f08a4128111d', class: createColorClasses(this.color, {\n                [mode]: true,\n                'has-value': hasValue,\n                'has-focus': hasFocus,\n                'label-floating': labelShouldFloat,\n                [`textarea-fill-${fill}`]: fill !== undefined,\n                [`textarea-shape-${shape}`]: shape !== undefined,\n                [`textarea-label-placement-${labelPlacement}`]: true,\n                'textarea-disabled': disabled,\n            }) }, h(\"label\", { key: '67342758743e5a40448a32ff695876d39778621f', class: \"textarea-wrapper\", htmlFor: inputId }, this.renderLabelContainer(), h(\"div\", { key: 'a994be8264bf5652811cf816d79a04178954e83f', class: \"textarea-wrapper-inner\" }, h(\"div\", { key: 'e09c93ebcd5b3d227d51e682ca23dfc7fd7027ad', class: \"start-slot-wrapper\" }, h(\"slot\", { key: 'd39758f21f19ae70aea21e9a9a7b7c20991fe593', name: \"start\" })), h(\"div\", { key: '6a4e10e53de4bb235ee30def4c9ae5bdee888816', class: \"native-wrapper\", ref: (el) => (this.textareaWrapper = el) }, h(\"textarea\", Object.assign({ key: '9e254e551f124d972e9bc6b09ef0f2bb55890be5', class: \"native-textarea\", ref: (el) => (this.nativeInput = el), id: inputId, disabled: disabled, autoCapitalize: this.autocapitalize, autoFocus: this.autofocus, enterKeyHint: this.enterkeyhint, inputMode: this.inputmode, minLength: this.minlength, maxLength: this.maxlength, name: this.name, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellcheck: this.spellcheck, cols: this.cols, rows: this.rows, wrap: this.wrap, onInput: this.onInput, onChange: this.onChange, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeyDown }, this.inheritedAttributes), value)), h(\"div\", { key: 'a66aa2d2bc4778a0bec56a8b9ec9052a832eb3b2', class: \"end-slot-wrapper\" }, h(\"slot\", { key: '8e6a90b4475de32e23afc593da4108610dcca663', name: \"end\" }))), shouldRenderHighlight && h(\"div\", { key: '6da03205a8daff45581b20f0af3938634a9d5f8c', class: \"textarea-highlight\" })), this.renderBottomContent()));\n    }\n    static get is() { return \"ion-textarea\"; }\n    static get encapsulation() { return \"scoped\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"textarea.ios.scss\"],\n            \"md\": [\"textarea.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"textarea.ios.css\"],\n            \"md\": [\"textarea.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"autocapitalize\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\\nAvailable options: `\\\"off\\\"`, `\\\"none\\\"`, `\\\"on\\\"`, `\\\"sentences\\\"`, `\\\"words\\\"`, `\\\"characters\\\"`.\"\n                },\n                \"attribute\": \"autocapitalize\",\n                \"reflect\": false,\n                \"defaultValue\": \"'none'\"\n            },\n            \"autofocus\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Sets the [`autofocus` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus) on the native input element.\\n\\nThis may not be sufficient for the element to be focused on page load. See [managing focus](/docs/developing/managing-focus) for more information.\"\n                },\n                \"attribute\": \"autofocus\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"clearOnEdit\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the value will be cleared after focus upon edit.\"\n                },\n                \"attribute\": \"clear-on-edit\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"debounce\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.\"\n                },\n                \"attribute\": \"debounce\",\n                \"reflect\": false\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the textarea.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"fill\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'outline' | 'solid'\",\n                    \"resolved\": \"\\\"outline\\\" | \\\"solid\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The fill for the item. If `\\\"solid\\\"` the item will have a background. If\\n`\\\"outline\\\"` the item will be transparent with a border. Only available in `md` mode.\"\n                },\n                \"attribute\": \"fill\",\n                \"reflect\": false\n            },\n            \"inputmode\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'\",\n                    \"resolved\": \"\\\"decimal\\\" | \\\"email\\\" | \\\"none\\\" | \\\"numeric\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"url\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A hint to the browser for which keyboard to display.\\nPossible values: `\\\"none\\\"`, `\\\"text\\\"`, `\\\"tel\\\"`, `\\\"url\\\"`,\\n`\\\"email\\\"`, `\\\"numeric\\\"`, `\\\"decimal\\\"`, and `\\\"search\\\"`.\"\n                },\n                \"attribute\": \"inputmode\",\n                \"reflect\": false\n            },\n            \"enterkeyhint\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'\",\n                    \"resolved\": \"\\\"done\\\" | \\\"enter\\\" | \\\"go\\\" | \\\"next\\\" | \\\"previous\\\" | \\\"search\\\" | \\\"send\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A hint to the browser for which enter key to display.\\nPossible values: `\\\"enter\\\"`, `\\\"done\\\"`, `\\\"go\\\"`, `\\\"next\\\"`,\\n`\\\"previous\\\"`, `\\\"search\\\"`, and `\\\"send\\\"`.\"\n                },\n                \"attribute\": \"enterkeyhint\",\n                \"reflect\": false\n            },\n            \"maxlength\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"This attribute specifies the maximum number of characters that the user can enter.\"\n                },\n                \"attribute\": \"maxlength\",\n                \"reflect\": false\n            },\n            \"minlength\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"This attribute specifies the minimum number of characters that the user can enter.\"\n                },\n                \"attribute\": \"minlength\",\n                \"reflect\": false\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The name of the control, which is submitted with the form data.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.inputId\"\n            },\n            \"placeholder\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Instructional text that shows before the input has a value.\"\n                },\n                \"attribute\": \"placeholder\",\n                \"reflect\": false\n            },\n            \"readonly\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot modify the value.\"\n                },\n                \"attribute\": \"readonly\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"required\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user must fill in a value before submitting a form.\"\n                },\n                \"attribute\": \"required\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"spellcheck\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the element will have its spelling and grammar checked.\"\n                },\n                \"attribute\": \"spellcheck\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"cols\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.\"\n                },\n                \"attribute\": \"cols\",\n                \"reflect\": true\n            },\n            \"rows\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The number of visible text lines for the control.\"\n                },\n                \"attribute\": \"rows\",\n                \"reflect\": false\n            },\n            \"wrap\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'hard' | 'soft' | 'off'\",\n                    \"resolved\": \"\\\"hard\\\" | \\\"off\\\" | \\\"soft\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Indicates how the control wraps text.\"\n                },\n                \"attribute\": \"wrap\",\n                \"reflect\": false\n            },\n            \"autoGrow\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the textarea container will grow and shrink based\\non the contents of the textarea.\"\n                },\n                \"attribute\": \"auto-grow\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"value\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"string | null\",\n                    \"resolved\": \"null | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The value of the textarea.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false,\n                \"defaultValue\": \"''\"\n            },\n            \"counter\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, a character counter will display the ratio of characters used and the total character limit.\\nDevelopers must also set the `maxlength` property for the counter to be calculated correctly.\"\n                },\n                \"attribute\": \"counter\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"counterFormatter\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"(inputLength: number, maxLength: number) => string\",\n                    \"resolved\": \"((inputLength: number, maxLength: number) => string) | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A callback used to format the counter text.\\nBy default the counter text is set to \\\"itemLength / maxLength\\\".\\n\\nSee https://ionicframework.com/docs/troubleshooting/runtime#accessing-this\\nif you need to access `this` from within the callback.\"\n                }\n            },\n            \"errorText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Text that is placed under the textarea and displayed when an error is detected.\"\n                },\n                \"attribute\": \"error-text\",\n                \"reflect\": false\n            },\n            \"helperText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Text that is placed under the textarea and displayed when no error is detected.\"\n                },\n                \"attribute\": \"helper-text\",\n                \"reflect\": false\n            },\n            \"label\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The visible label associated with the textarea.\\n\\nUse this if you need to render a plaintext label.\\n\\nThe `label` property will take priority over the `label` slot if both are used.\"\n                },\n                \"attribute\": \"label\",\n                \"reflect\": false\n            },\n            \"labelPlacement\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'floating' | 'stacked' | 'fixed'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"fixed\\\" | \\\"floating\\\" | \\\"stacked\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Where to place the label relative to the textarea.\\n`\\\"start\\\"`: The label will appear to the left of the textarea in LTR and to the right in RTL.\\n`\\\"end\\\"`: The label will appear to the right of the textarea in LTR and to the left in RTL.\\n`\\\"floating\\\"`: The label will appear smaller and above the textarea when the textarea is focused or it has a value. Otherwise it will appear on top of the textarea.\\n`\\\"stacked\\\"`: The label will appear smaller and above the textarea regardless even when the textarea is blurred or has no value.\\n`\\\"fixed\\\"`: The label has the same behavior as `\\\"start\\\"` except it also has a fixed width. Long text will be truncated with ellipses (\\\"...\\\").\"\n                },\n                \"attribute\": \"label-placement\",\n                \"reflect\": false,\n                \"defaultValue\": \"'start'\"\n            },\n            \"shape\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'round'\",\n                    \"resolved\": \"\\\"round\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The shape of the textarea. If \\\"round\\\" it will have an increased border radius.\"\n                },\n                \"attribute\": \"shape\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"hasFocus\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionChange\",\n                \"name\": \"ionChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `ionChange` event is fired when the user modifies the textarea's value.\\nUnlike the `ionInput` event, the `ionChange` event is fired when\\nthe element loses focus after its value has been modified.\\n\\nThis event will not emit when programmatically setting the `value` property.\"\n                },\n                \"complexType\": {\n                    \"original\": \"TextareaChangeEventDetail\",\n                    \"resolved\": \"TextareaChangeEventDetail\",\n                    \"references\": {\n                        \"TextareaChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./textarea-interface\",\n                            \"id\": \"src/components/textarea/textarea-interface.ts::TextareaChangeEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionInput\",\n                \"name\": \"ionInput\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `ionInput` event is fired each time the user modifies the textarea's value.\\nUnlike the `ionChange` event, the `ionInput` event is fired for each alteration\\nto the textarea's value. This typically happens for each keystroke as the user types.\\n\\nWhen `clearOnEdit` is enabled, the `ionInput` event will be fired when\\nthe user clears the textarea by performing a keydown event.\"\n                },\n                \"complexType\": {\n                    \"original\": \"TextareaInputEventDetail\",\n                    \"resolved\": \"TextareaInputEventDetail\",\n                    \"references\": {\n                        \"TextareaInputEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./textarea-interface\",\n                            \"id\": \"src/components/textarea/textarea-interface.ts::TextareaInputEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionBlur\",\n                \"name\": \"ionBlur\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the input loses focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"FocusEvent\",\n                    \"resolved\": \"FocusEvent\",\n                    \"references\": {\n                        \"FocusEvent\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::FocusEvent\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionFocus\",\n                \"name\": \"ionFocus\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the input has focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"FocusEvent\",\n                    \"resolved\": \"FocusEvent\",\n                    \"references\": {\n                        \"FocusEvent\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::FocusEvent\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\\n`textarea.focus()`.\\n\\nSee [managing focus](/docs/developing/managing-focus) for more information.\",\n                    \"tags\": []\n                }\n            },\n            \"getInputElement\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<HTMLTextAreaElement>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"HTMLTextAreaElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLTextAreaElement\"\n                        }\n                    },\n                    \"return\": \"Promise<HTMLTextAreaElement>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns the native `<textarea>` element used under the hood.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"debounce\",\n                \"methodName\": \"debounceChanged\"\n            }, {\n                \"propName\": \"value\",\n                \"methodName\": \"valueChanged\"\n            }];\n    }\n}\nlet textareaIds = 0;\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --track-background: Background of the toggle track\n   * @prop --track-background-checked: Background of the toggle track when checked\n   * @prop --border-radius: Border radius of the toggle track\n   *\n   * @prop --handle-background: Background of the toggle handle\n   * @prop --handle-background-checked: Background of the toggle handle when checked\n   *\n   * @prop --handle-border-radius: Border radius of the toggle handle\n   * @prop --handle-box-shadow: Box shadow of the toggle handle\n   * @prop --handle-height: Height of the toggle handle\n   * @prop --handle-max-height: Maximum height of the toggle handle\n   * @prop --handle-width: Width of the toggle handle\n   * @prop --handle-spacing: Horizontal spacing around the toggle handle\n   * @prop --handle-transition: Transition of the toggle handle\n   */\n  /* stylelint-disable-next-line declaration-no-important */\n  box-sizing: content-box !important;\n  display: inline-block;\n  position: relative;\n  max-width: 100%;\n  outline: none;\n  cursor: pointer;\n  user-select: none;\n  z-index: 2;\n}\n\n:host(.in-item) {\n  flex: 1 1 0;\n  width: 100%;\n  height: 100%;\n}\n\n/**\n * Toggle can be slotted\n * in components such as item and\n * toolbar which is why we do not\n * limit the below behavior to just ion-item.\n */\n:host([slot=start]),\n:host([slot=end]) {\n  flex: initial;\n  width: auto;\n}\n\n:host(.ion-focused) input {\n  border: 2px solid #5e9ed6;\n}\n\n:host(.toggle-disabled) {\n  pointer-events: none;\n}\n\ninput {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n.toggle-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  height: inherit;\n  transition: background-color 15ms linear;\n  cursor: inherit;\n}\n\n.label-text-wrapper {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n:host(.in-item) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n:host(.in-item.toggle-label-placement-stacked) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 16px;\n}\n\n:host(.in-item.toggle-label-placement-stacked) .native-wrapper {\n  margin-bottom: 10px;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden {\n  display: none;\n}\n\n.native-wrapper {\n  display: flex;\n  align-items: center;\n}\n\n:host(.toggle-justify-space-between) .toggle-wrapper {\n  justify-content: space-between;\n}\n\n:host(.toggle-justify-start) .toggle-wrapper {\n  justify-content: start;\n}\n\n:host(.toggle-justify-end) .toggle-wrapper {\n  justify-content: end;\n}\n\n:host(.toggle-alignment-start) .toggle-wrapper {\n  align-items: start;\n}\n\n:host(.toggle-alignment-center) .toggle-wrapper {\n  align-items: center;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL.\n */\n:host(.toggle-label-placement-start) .toggle-wrapper {\n  flex-direction: row;\n}\n\n:host(.toggle-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the right of the input in LTR and\n * on the left in RTL.\n */\n:host(.toggle-label-placement-end) .toggle-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the input should be on the start\n * when the label sits at the end.\n */\n:host(.toggle-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n}\n\n:host(.toggle-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.toggle-label-placement-fixed) .label-text-wrapper {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Label is on top of the toggle.\n */\n:host(.toggle-label-placement-stacked) .toggle-wrapper {\n  flex-direction: column;\n}\n\n:host(.toggle-label-placement-stacked) .label-text-wrapper {\n  transform: scale(0.75);\n  /**\n   * The margin between the label and\n   * the toggle should be on the bottom\n   * when the label sits on top.\n   */\n  margin-left: 0;\n  margin-right: 0;\n  margin-bottom: 16px;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the toggle.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n:host(.toggle-label-placement-stacked.toggle-alignment-start) .label-text-wrapper {\n  transform-origin: left top;\n}\n:host-context([dir=rtl]):host(.toggle-label-placement-stacked.toggle-alignment-start) .label-text-wrapper, :host-context([dir=rtl]).toggle-label-placement-stacked.toggle-alignment-start .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.toggle-label-placement-stacked.toggle-alignment-start:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n:host(.toggle-label-placement-stacked.toggle-alignment-center) .label-text-wrapper {\n  transform-origin: center top;\n}\n:host-context([dir=rtl]):host(.toggle-label-placement-stacked.toggle-alignment-center) .label-text-wrapper, :host-context([dir=rtl]).toggle-label-placement-stacked.toggle-alignment-center .label-text-wrapper {\n  transform-origin: calc(100% - center) top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.toggle-label-placement-stacked.toggle-alignment-center:dir(rtl)) .label-text-wrapper {\n    transform-origin: calc(100% - center) top;\n  }\n}\n\n.toggle-icon-wrapper {\n  display: flex;\n  position: relative;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  transition: var(--handle-transition);\n  will-change: transform;\n}\n\n.toggle-icon {\n  border-radius: var(--border-radius);\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background: var(--track-background);\n  overflow: inherit;\n}\n\n:host(.toggle-checked) .toggle-icon {\n  background: var(--track-background-checked);\n}\n\n.toggle-inner {\n  border-radius: var(--handle-border-radius);\n  position: absolute;\n  left: var(--handle-spacing);\n  width: var(--handle-width);\n  height: var(--handle-height);\n  max-height: var(--handle-max-height);\n  transition: var(--handle-transition);\n  background: var(--handle-background);\n  box-shadow: var(--handle-box-shadow);\n  contain: strict;\n}\n\n/**\n * We do not use the @ltr and @rtl mixins\n * here because ion-toggle uses the Shadow DOM\n * and WebKit does not support :host-context.\n */\n:host(.toggle-ltr) .toggle-inner {\n  left: var(--handle-spacing);\n}\n\n:host(.toggle-rtl) .toggle-inner {\n  right: var(--handle-spacing);\n}\n\n:host(.toggle-ltr.toggle-checked) .toggle-icon-wrapper {\n  transform: translate3d(calc(100% - var(--handle-width)), 0, 0);\n}\n\n:host(.toggle-rtl.toggle-checked) .toggle-icon-wrapper {\n  transform: translate3d(calc(-100% + var(--handle-width)), 0, 0);\n}\n\n:host(.toggle-checked) .toggle-inner {\n  background: var(--handle-background-checked);\n}\n\n:host(.toggle-ltr.toggle-checked) .toggle-inner {\n  transform: translate3d(calc(var(--handle-spacing) * -2), 0, 0);\n}\n\n:host(.toggle-rtl.toggle-checked) .toggle-inner {\n  transform: translate3d(calc(var(--handle-spacing) * 2), 0, 0);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --track-background: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.088);\n  --track-background-checked: var(--ion-color-primary, #0054e9);\n  --border-radius: 15.5px;\n  --handle-background: #ffffff;\n  --handle-background-checked: #ffffff;\n  --handle-border-radius: 25.5px;\n  --handle-box-shadow: 0 3px 4px rgba(0, 0, 0, 0.06), 0 3px 8px rgba(0, 0, 0, 0.06);\n  --handle-height: calc(31px - (2px * 2));\n  --handle-max-height: calc(100% - var(--handle-spacing) * 2);\n  --handle-width: calc(31px - (2px * 2));\n  --handle-spacing: 2px;\n  --handle-transition: transform 300ms, width 120ms ease-in-out 80ms, left 110ms ease-in-out 80ms, right 110ms ease-in-out 80ms;\n}\n\n.native-wrapper .toggle-icon {\n  width: 51px;\n  height: 31px;\n  /**\n   * The handle box shadow should not\n   * overflow outside of the track container.\n   */\n  overflow: hidden;\n}\n\n:host(.ion-color.toggle-checked) .toggle-icon {\n  background: var(--ion-color-base);\n}\n\n:host(.toggle-activated) .toggle-switch-icon {\n  opacity: 0;\n}\n\n.toggle-icon {\n  transform: translate3d(0, 0, 0);\n  transition: background-color 300ms;\n}\n\n.toggle-inner {\n  will-change: transform;\n}\n\n.toggle-switch-icon {\n  position: absolute;\n  top: 50%;\n  width: 11px;\n  height: 11px;\n  transform: translateY(-50%);\n  transition: opacity 300ms, color 300ms;\n}\n\n.toggle-switch-icon {\n  position: absolute;\n  color: var(--ion-color-dark, #222428);\n}\n\n:host(.toggle-ltr) .toggle-switch-icon {\n  /* stylelint-disable-next-line property-disallowed-list */\n  right: 6px;\n}\n\n:host(.toggle-rtl) .toggle-switch-icon {\n  /* stylelint-disable property-disallowed-list */\n  right: initial;\n  left: 6px;\n  /* stylelint-enable property-disallowed-list */\n}\n\n:host(.toggle-checked) .toggle-switch-icon.toggle-switch-icon-checked {\n  color: var(--ion-color-contrast, #fff);\n}\n\n:host(.toggle-checked) .toggle-switch-icon:not(.toggle-switch-icon-checked) {\n  opacity: 0;\n}\n\n.toggle-switch-icon-checked {\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  transform: translateY(-50%) rotate(90deg);\n}\n\n:host(.toggle-ltr) .toggle-switch-icon-checked {\n  /* stylelint-disable property-disallowed-list */\n  right: initial;\n  left: 4px;\n  /* stylelint-enable property-disallowed-list */\n}\n\n:host(.toggle-rtl) .toggle-switch-icon-checked {\n  /* stylelint-disable-next-line property-disallowed-list */\n  right: 4px;\n}\n\n:host(.toggle-activated) .toggle-icon::before,\n:host(.toggle-checked) .toggle-icon::before {\n  transform: scale3d(0, 0, 0);\n}\n\n:host(.toggle-activated.toggle-checked) .toggle-inner::before {\n  transform: scale3d(0, 0, 0);\n}\n\n:host(.toggle-activated) .toggle-inner {\n  width: calc(var(--handle-width) + 6px);\n}\n\n:host(.toggle-ltr.toggle-activated.toggle-checked) .toggle-icon-wrapper {\n  transform: translate3d(calc(100% - var(--handle-width) - 6px), 0, 0);\n}\n\n:host(.toggle-rtl.toggle-activated.toggle-checked) .toggle-icon-wrapper {\n  transform: translate3d(calc(-100% + var(--handle-width) + 6px), 0, 0);\n}\n\n:host(.toggle-disabled) {\n  opacity: 0.3;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --track-background: Background of the toggle track\n   * @prop --track-background-checked: Background of the toggle track when checked\n   * @prop --border-radius: Border radius of the toggle track\n   *\n   * @prop --handle-background: Background of the toggle handle\n   * @prop --handle-background-checked: Background of the toggle handle when checked\n   *\n   * @prop --handle-border-radius: Border radius of the toggle handle\n   * @prop --handle-box-shadow: Box shadow of the toggle handle\n   * @prop --handle-height: Height of the toggle handle\n   * @prop --handle-max-height: Maximum height of the toggle handle\n   * @prop --handle-width: Width of the toggle handle\n   * @prop --handle-spacing: Horizontal spacing around the toggle handle\n   * @prop --handle-transition: Transition of the toggle handle\n   */\n  /* stylelint-disable-next-line declaration-no-important */\n  box-sizing: content-box !important;\n  display: inline-block;\n  position: relative;\n  max-width: 100%;\n  outline: none;\n  cursor: pointer;\n  user-select: none;\n  z-index: 2;\n}\n\n:host(.in-item) {\n  flex: 1 1 0;\n  width: 100%;\n  height: 100%;\n}\n\n/**\n * Toggle can be slotted\n * in components such as item and\n * toolbar which is why we do not\n * limit the below behavior to just ion-item.\n */\n:host([slot=start]),\n:host([slot=end]) {\n  flex: initial;\n  width: auto;\n}\n\n:host(.ion-focused) input {\n  border: 2px solid #5e9ed6;\n}\n\n:host(.toggle-disabled) {\n  pointer-events: none;\n}\n\ninput {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n.toggle-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  height: inherit;\n  transition: background-color 15ms linear;\n  cursor: inherit;\n}\n\n.label-text-wrapper {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n:host(.in-item) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n:host(.in-item.toggle-label-placement-stacked) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 16px;\n}\n\n:host(.in-item.toggle-label-placement-stacked) .native-wrapper {\n  margin-bottom: 10px;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden {\n  display: none;\n}\n\n.native-wrapper {\n  display: flex;\n  align-items: center;\n}\n\n:host(.toggle-justify-space-between) .toggle-wrapper {\n  justify-content: space-between;\n}\n\n:host(.toggle-justify-start) .toggle-wrapper {\n  justify-content: start;\n}\n\n:host(.toggle-justify-end) .toggle-wrapper {\n  justify-content: end;\n}\n\n:host(.toggle-alignment-start) .toggle-wrapper {\n  align-items: start;\n}\n\n:host(.toggle-alignment-center) .toggle-wrapper {\n  align-items: center;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL.\n */\n:host(.toggle-label-placement-start) .toggle-wrapper {\n  flex-direction: row;\n}\n\n:host(.toggle-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the right of the input in LTR and\n * on the left in RTL.\n */\n:host(.toggle-label-placement-end) .toggle-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the input should be on the start\n * when the label sits at the end.\n */\n:host(.toggle-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n}\n\n:host(.toggle-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the input should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.toggle-label-placement-fixed) .label-text-wrapper {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Label is on top of the toggle.\n */\n:host(.toggle-label-placement-stacked) .toggle-wrapper {\n  flex-direction: column;\n}\n\n:host(.toggle-label-placement-stacked) .label-text-wrapper {\n  transform: scale(0.75);\n  /**\n   * The margin between the label and\n   * the toggle should be on the bottom\n   * when the label sits on top.\n   */\n  margin-left: 0;\n  margin-right: 0;\n  margin-bottom: 16px;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the toggle.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n:host(.toggle-label-placement-stacked.toggle-alignment-start) .label-text-wrapper {\n  transform-origin: left top;\n}\n:host-context([dir=rtl]):host(.toggle-label-placement-stacked.toggle-alignment-start) .label-text-wrapper, :host-context([dir=rtl]).toggle-label-placement-stacked.toggle-alignment-start .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.toggle-label-placement-stacked.toggle-alignment-start:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n:host(.toggle-label-placement-stacked.toggle-alignment-center) .label-text-wrapper {\n  transform-origin: center top;\n}\n:host-context([dir=rtl]):host(.toggle-label-placement-stacked.toggle-alignment-center) .label-text-wrapper, :host-context([dir=rtl]).toggle-label-placement-stacked.toggle-alignment-center .label-text-wrapper {\n  transform-origin: calc(100% - center) top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.toggle-label-placement-stacked.toggle-alignment-center:dir(rtl)) .label-text-wrapper {\n    transform-origin: calc(100% - center) top;\n  }\n}\n\n.toggle-icon-wrapper {\n  display: flex;\n  position: relative;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  transition: var(--handle-transition);\n  will-change: transform;\n}\n\n.toggle-icon {\n  border-radius: var(--border-radius);\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background: var(--track-background);\n  overflow: inherit;\n}\n\n:host(.toggle-checked) .toggle-icon {\n  background: var(--track-background-checked);\n}\n\n.toggle-inner {\n  border-radius: var(--handle-border-radius);\n  position: absolute;\n  left: var(--handle-spacing);\n  width: var(--handle-width);\n  height: var(--handle-height);\n  max-height: var(--handle-max-height);\n  transition: var(--handle-transition);\n  background: var(--handle-background);\n  box-shadow: var(--handle-box-shadow);\n  contain: strict;\n}\n\n/**\n * We do not use the @ltr and @rtl mixins\n * here because ion-toggle uses the Shadow DOM\n * and WebKit does not support :host-context.\n */\n:host(.toggle-ltr) .toggle-inner {\n  left: var(--handle-spacing);\n}\n\n:host(.toggle-rtl) .toggle-inner {\n  right: var(--handle-spacing);\n}\n\n:host(.toggle-ltr.toggle-checked) .toggle-icon-wrapper {\n  transform: translate3d(calc(100% - var(--handle-width)), 0, 0);\n}\n\n:host(.toggle-rtl.toggle-checked) .toggle-icon-wrapper {\n  transform: translate3d(calc(-100% + var(--handle-width)), 0, 0);\n}\n\n:host(.toggle-checked) .toggle-inner {\n  background: var(--handle-background-checked);\n}\n\n:host(.toggle-ltr.toggle-checked) .toggle-inner {\n  transform: translate3d(calc(var(--handle-spacing) * -2), 0, 0);\n}\n\n:host(.toggle-rtl.toggle-checked) .toggle-inner {\n  transform: translate3d(calc(var(--handle-spacing) * 2), 0, 0);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --track-background: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.39);\n  --track-background-checked: rgba(var(--ion-color-primary-rgb, 0, 84, 233), 0.5);\n  --border-radius: 14px;\n  --handle-background: #ffffff;\n  --handle-background-checked: var(--ion-color-primary, #0054e9);\n  --handle-border-radius: 50%;\n  --handle-box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\n  --handle-width: 20px;\n  --handle-height: 20px;\n  --handle-max-height: calc(100% + 6px);\n  --handle-spacing: 0;\n  --handle-transition: transform 160ms cubic-bezier(0.4, 0, 0.2, 1), background-color 160ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.native-wrapper .toggle-icon {\n  width: 36px;\n  height: 14px;\n}\n\n:host(.ion-color.toggle-checked) .toggle-icon {\n  background: rgba(var(--ion-color-base-rgb), 0.5);\n}\n\n:host(.ion-color.toggle-checked) .toggle-inner {\n  background: var(--ion-color-base);\n}\n\n:host(.toggle-checked) .toggle-inner {\n  color: var(--ion-color-contrast, #fff);\n}\n\n.toggle-icon {\n  transition: background-color 160ms;\n}\n\n.toggle-inner {\n  will-change: background-color, transform;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #000;\n}\n\n.toggle-inner .toggle-switch-icon {\n  -webkit-padding-start: 1px;\n  padding-inline-start: 1px;\n  -webkit-padding-end: 1px;\n  padding-inline-end: 1px;\n  padding-top: 1px;\n  padding-bottom: 1px;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.toggle-disabled) {\n  opacity: 0.38;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { renderHiddenInput, inheritAriaAttributes } from \"../../utils/helpers\";\nimport { hapticSelection } from \"../../utils/native/haptic\";\nimport { isRTL } from \"../../utils/rtl/index\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { checkmarkOutline, removeOutline, ellipseOutline } from \"ionicons/icons\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot - The label text to associate with the toggle. Use the \"labelPlacement\" property to control where the label is placed relative to the toggle.\n *\n * @part track - The background track of the toggle.\n * @part handle - The toggle handle, or knob, used to change the checked state.\n * @part label - The label text describing the toggle.\n */\nexport class Toggle {\n    constructor() {\n        this.inputId = `ion-tg-${toggleIds++}`;\n        this.lastDrag = 0;\n        this.inheritedAttributes = {};\n        this.didLoad = false;\n        this.setupGesture = async () => {\n            const { toggleTrack } = this;\n            if (toggleTrack) {\n                this.gesture = (await import('../../utils/gesture')).createGesture({\n                    el: toggleTrack,\n                    gestureName: 'toggle',\n                    gesturePriority: 100,\n                    threshold: 5,\n                    passive: false,\n                    onStart: () => this.onStart(),\n                    onMove: (ev) => this.onMove(ev),\n                    onEnd: (ev) => this.onEnd(ev),\n                });\n                this.disabledChanged();\n            }\n        };\n        this.onClick = (ev) => {\n            if (this.disabled) {\n                return;\n            }\n            ev.preventDefault();\n            if (this.lastDrag + 300 < Date.now()) {\n                this.toggleChecked();\n            }\n        };\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n        this.getSwitchLabelIcon = (mode, checked) => {\n            if (mode === 'md') {\n                return checked ? checkmarkOutline : removeOutline;\n            }\n            return checked ? removeOutline : ellipseOutline;\n        };\n        this.activated = false;\n        this.color = undefined;\n        this.name = this.inputId;\n        this.checked = false;\n        this.disabled = false;\n        this.value = 'on';\n        this.enableOnOffLabels = config.get('toggleOnOffLabels');\n        this.labelPlacement = 'start';\n        this.justify = 'space-between';\n        this.alignment = 'center';\n    }\n    disabledChanged() {\n        if (this.gesture) {\n            this.gesture.enable(!this.disabled);\n        }\n    }\n    toggleChecked() {\n        const { checked, value } = this;\n        const isNowChecked = !checked;\n        this.checked = isNowChecked;\n        this.ionChange.emit({\n            checked: isNowChecked,\n            value,\n        });\n    }\n    async connectedCallback() {\n        /**\n         * If we have not yet rendered\n         * ion-toggle, then toggleTrack is not defined.\n         * But if we are moving ion-toggle via appendChild,\n         * then toggleTrack will be defined.\n         */\n        if (this.didLoad) {\n            this.setupGesture();\n        }\n    }\n    componentDidLoad() {\n        this.setupGesture();\n        this.didLoad = true;\n    }\n    disconnectedCallback() {\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = Object.assign({}, inheritAriaAttributes(this.el));\n    }\n    onStart() {\n        this.activated = true;\n        // touch-action does not work in iOS\n        this.setFocus();\n    }\n    onMove(detail) {\n        if (shouldToggle(isRTL(this.el), this.checked, detail.deltaX, -10)) {\n            this.toggleChecked();\n            hapticSelection();\n        }\n    }\n    onEnd(ev) {\n        this.activated = false;\n        this.lastDrag = Date.now();\n        ev.event.preventDefault();\n        ev.event.stopImmediatePropagation();\n    }\n    getValue() {\n        return this.value || '';\n    }\n    setFocus() {\n        if (this.focusEl) {\n            this.focusEl.focus();\n        }\n    }\n    renderOnOffSwitchLabels(mode, checked) {\n        const icon = this.getSwitchLabelIcon(mode, checked);\n        return (h(\"ion-icon\", { class: {\n                'toggle-switch-icon': true,\n                'toggle-switch-icon-checked': checked,\n            }, icon: icon, \"aria-hidden\": \"true\" }));\n    }\n    renderToggleControl() {\n        const mode = getIonMode(this);\n        const { enableOnOffLabels, checked } = this;\n        return (h(\"div\", { class: \"toggle-icon\", part: \"track\", ref: (el) => (this.toggleTrack = el) }, enableOnOffLabels &&\n            mode === 'ios' && [this.renderOnOffSwitchLabels(mode, true), this.renderOnOffSwitchLabels(mode, false)], h(\"div\", { class: \"toggle-icon-wrapper\" }, h(\"div\", { class: \"toggle-inner\", part: \"handle\" }, enableOnOffLabels && mode === 'md' && this.renderOnOffSwitchLabels(mode, checked)))));\n    }\n    get hasLabel() {\n        return this.el.textContent !== '';\n    }\n    render() {\n        const { activated, color, checked, disabled, el, justify, labelPlacement, inputId, name, alignment } = this;\n        const mode = getIonMode(this);\n        const value = this.getValue();\n        const rtl = isRTL(el) ? 'rtl' : 'ltr';\n        renderHiddenInput(true, el, name, checked ? value : '', disabled);\n        return (h(Host, { key: 'b0d648e071bc8095998b519ce4dcdd0ea91575c0', onClick: this.onClick, class: createColorClasses(color, {\n                [mode]: true,\n                'in-item': hostContext('ion-item', el),\n                'toggle-activated': activated,\n                'toggle-checked': checked,\n                'toggle-disabled': disabled,\n                [`toggle-justify-${justify}`]: true,\n                [`toggle-alignment-${alignment}`]: true,\n                [`toggle-label-placement-${labelPlacement}`]: true,\n                [`toggle-${rtl}`]: true,\n            }) }, h(\"label\", { key: '9a2fe1d16dba66a9dfef450efebf2e5cbe3dcd00', class: \"toggle-wrapper\" }, h(\"input\", Object.assign({ key: '4358d18cb86da768155c17f9da3aac641296c256', type: \"checkbox\", role: \"switch\", \"aria-checked\": `${checked}`, checked: checked, disabled: disabled, id: inputId, onFocus: () => this.onFocus(), onBlur: () => this.onBlur(), ref: (focusEl) => (this.focusEl = focusEl) }, this.inheritedAttributes)), h(\"div\", { key: '0ec99e452164d7059cc4f93d09e5b918f82c022a', class: {\n                'label-text-wrapper': true,\n                'label-text-wrapper-hidden': !this.hasLabel,\n            }, part: \"label\" }, h(\"slot\", { key: '1c5cbc99905a79e842e9487eb3ca654e1bab3c66' })), h(\"div\", { key: 'ca8196423b429899febd11c7337d768ff05df6f4', class: \"native-wrapper\" }, this.renderToggleControl()))));\n    }\n    static get is() { return \"ion-toggle\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"toggle.ios.scss\"],\n            \"md\": [\"toggle.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"toggle.ios.css\"],\n            \"md\": [\"toggle.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The name of the control, which is submitted with the form data.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.inputId\"\n            },\n            \"checked\": {\n                \"type\": \"boolean\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the toggle is selected.\"\n                },\n                \"attribute\": \"checked\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the toggle.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"value\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | null\",\n                    \"resolved\": \"null | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The value of the toggle does not mean if it's checked or not, use the `checked`\\nproperty for that.\\n\\nThe value of a toggle is analogous to the value of a `<input type=\\\"checkbox\\\">`,\\nit's only used when the toggle participates in a native `<form>`.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false,\n                \"defaultValue\": \"'on'\"\n            },\n            \"enableOnOffLabels\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean | undefined\",\n                    \"resolved\": \"boolean | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Enables the on/off accessibility switch labels within the toggle.\"\n                },\n                \"attribute\": \"enable-on-off-labels\",\n                \"reflect\": false,\n                \"defaultValue\": \"config.get('toggleOnOffLabels')\"\n            },\n            \"labelPlacement\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'fixed' | 'stacked'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"fixed\\\" | \\\"stacked\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Where to place the label relative to the input.\\n`\\\"start\\\"`: The label will appear to the left of the toggle in LTR and to the right in RTL.\\n`\\\"end\\\"`: The label will appear to the right of the toggle in LTR and to the left in RTL.\\n`\\\"fixed\\\"`: The label has the same behavior as `\\\"start\\\"` except it also has a fixed width. Long text will be truncated with ellipses (\\\"...\\\").\\n`\\\"stacked\\\"`: The label will appear above the toggle regardless of the direction. The alignment of the label can be controlled with the `alignment` property.\"\n                },\n                \"attribute\": \"label-placement\",\n                \"reflect\": false,\n                \"defaultValue\": \"'start'\"\n            },\n            \"justify\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'space-between'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"space-between\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How to pack the label and toggle within a line.\\n`\\\"start\\\"`: The label and toggle will appear on the left in LTR and\\non the right in RTL.\\n`\\\"end\\\"`: The label and toggle will appear on the right in LTR and\\non the left in RTL.\\n`\\\"space-between\\\"`: The label and toggle will appear on opposite\\nends of the line with space between the two elements.\"\n                },\n                \"attribute\": \"justify\",\n                \"reflect\": false,\n                \"defaultValue\": \"'space-between'\"\n            },\n            \"alignment\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'center'\",\n                    \"resolved\": \"\\\"center\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How to control the alignment of the toggle and label on the cross axis.\\n`\\\"start\\\"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL.\\n`\\\"center\\\"`: The label and control will appear at the center of the cross axis in both LTR and RTL.\"\n                },\n                \"attribute\": \"alignment\",\n                \"reflect\": false,\n                \"defaultValue\": \"'center'\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"activated\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionChange\",\n                \"name\": \"ionChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the user switches the toggle on or off.\\n\\nThis event will not emit when programmatically setting the `checked` property.\"\n                },\n                \"complexType\": {\n                    \"original\": \"ToggleChangeEventDetail\",\n                    \"resolved\": \"ToggleChangeEventDetail<any>\",\n                    \"references\": {\n                        \"ToggleChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./toggle-interface\",\n                            \"id\": \"src/components/toggle/toggle-interface.ts::ToggleChangeEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionFocus\",\n                \"name\": \"ionFocus\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the toggle has focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionBlur\",\n                \"name\": \"ionBlur\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the toggle loses focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"disabled\",\n                \"methodName\": \"disabledChanged\"\n            }];\n    }\n}\nconst shouldToggle = (rtl, checked, deltaX, margin) => {\n    if (checked) {\n        return (!rtl && margin > deltaX) || (rtl && -margin < deltaX);\n    }\n    else {\n        return (!rtl && -margin < deltaX) || (rtl && margin > deltaX);\n    }\n};\nlet toggleIds = 0;\n"],"mappings":"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","ignoreList":[]}