{"version":3,"names":["VanDerWaals_A_OXYGEN","VanDerWaals_A_HELIUM","VanDerWaals_A_NITROGEN","VanDerWaals_B_OXYGEN","VanDerWaals_B_HELIUM","VanDerWaals_B_NITROGEN","Cylinder","constructor","internal_volume","service_pressure","this","mInternalVolume","mServicePressure","DiveToolsService","isMetric","universalGasConstant","atmPressure","VanDerWaals_computeA","m","x","getFO2","getFN2","getFHe","a","total","i","j","toNumber","Math","sqrt","VanDerWaals_computeB","b","fromCapacityVdw","capacity","c","setVdwCapacity","fromCapacityIdeal","setIdealCapacity","getVdwCapacity","getVdwCapacityAtPressure","Gas","getIdealCapacity","getIdealCapacityAtPressure","T","RT","PbRT","PbRT2","ab","P3","v0","v1","n","uncertainty","pow","f","fprime","abs","getInternalVolume","setInternalVolume","getServicePressure","setServicePressure","pressure","getIdealPressureAtCapacity","P","uncertainty_multiplier","getVdwPressureAtCapacity","v","GasSupply","ideal_gas_laws","temperature","units","mCylinder","mMix","mPressure","mUseIdealGasLaws","mTemperature","mUnits","useIdealGasLaws","ideal","getMix","setMix","getCylinder","setCylinder","getPressure","setPressure","p","getTemperature","getKTemperature","setTemperature","t","getGasAmount","round","getO2Amount","getN2Amount","getHeAmount","drainToGasAmount","amt","drainToO2Amount","drainToN2Amount","drainToHeAmount","addO2","addGas","addHe","mix","current_amt","o2","he","new_total_amt","topup","final_pressure","isEqualTo","error","max","toInteger","vt_n","vt_n_1","d","test","f_n","f_n_1","getForm","form","getO2","getHe","temp","bar"],"sources":["src/interfaces/udive/planner/cylinder.ts","src/interfaces/udive/planner/gas-supply.ts"],"sourcesContent":["import {Gas} from \"./gas\";\nimport {DiveToolsService} from \"../../../services/udive/planner/dive-tools\";\nimport {toNumber} from \"lodash\";\n\nconst VanDerWaals_A_OXYGEN = 1.382;\nconst VanDerWaals_A_HELIUM = 0.0346;\nconst VanDerWaals_A_NITROGEN = 1.37;\nconst VanDerWaals_B_OXYGEN = 0.03186;\nconst VanDerWaals_B_HELIUM = 0.0238;\nconst VanDerWaals_B_NITROGEN = 0.0387;\n\n// Avogradro's number\n//const VanDerWaals_N_A = 6.022E23;\n\nexport class Cylinder {\n  mInternalVolume;\n  mServicePressure;\n  universalGasConstant;\n  atmPressure;\n  /**\n   * Constructor is meant to take values as returned from a tank data model\n   * which stores internal volumes and service pressures (the metric way).\n   *\n   * @param internal_volume Internal volume of the cylinder in capacity units\n   * @param service_pressure Service pressure of the cylinder\n   */\n  constructor(internal_volume, service_pressure?) {\n    this.mInternalVolume = internal_volume;\n    this.mServicePressure = service_pressure\n      ? service_pressure\n      : DiveToolsService.isMetric()\n        ? 230\n        : 3300;\n\n    this.universalGasConstant = DiveToolsService.isMetric()\n      ? 0.083144598\n      : 10.73; // Gas constants in imperial (ft^3 psi R^-1 lb-mol^-1):10.73, metric (L bar K^-1 mol^-1) : 0.083144598\n    this.atmPressure = DiveToolsService.isMetric() ? 1 : 14;\n  }\n\n  /**\n   * Computes the particle attraction factor a for a theoretical homogeneous\n   * gas equivalent in behavior to the given gas mixture.\n   * @param m The gas mix to generate a for.\n   * @return The value of a.\n   */\n  VanDerWaals_computeA(m: Gas) {\n    let x = [m.getFO2(), m.getFN2(), m.getFHe()];\n    let a = [\n      VanDerWaals_A_OXYGEN,\n      VanDerWaals_A_NITROGEN,\n      VanDerWaals_A_HELIUM,\n    ];\n    let total = 0;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        total += toNumber(Math.sqrt(a[i] * a[j]) * x[i] * x[j]);\n      }\n    }\n    return total;\n  }\n\n  /**\n   * Computes the particle volume factor b for a theoretical homogeneous\n   * gas equivalent in behavior to the given gas mixture.\n   * @param m The gas mix to generate b for.\n   * @return The value of b.\n   */\n  VanDerWaals_computeB(m: Gas) {\n    let x = [m.getFO2(), m.getFN2(), m.getFHe()];\n    let b = [\n      VanDerWaals_B_OXYGEN,\n      VanDerWaals_B_NITROGEN,\n      VanDerWaals_B_HELIUM,\n    ];\n    let total = 0;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        total += toNumber(Math.sqrt(b[i] * b[j]) * x[i] * x[j]);\n      }\n    }\n    return total;\n  }\n\n  /**\n   * Build a Cylinder object with a capacity instead of an internal volume\n   * @param capacity The volume of gas the cylinder's contents would occupy at\n   * sea level pressure when the cylinder is filled to the service pressure\n   * @param service_pressure Service pressure of the cylinder\n   * @return A Cylinder object initialized with the given parameters\n   */\n  fromCapacityVdw(capacity, service_pressure) {\n    var c = new Cylinder(0, service_pressure);\n    c.setVdwCapacity(capacity);\n    return c;\n  }\n\n  fromCapacityIdeal(capacity, service_pressure) {\n    var c = new Cylinder(0, service_pressure);\n    c.setIdealCapacity(capacity);\n    return c;\n  }\n\n  /** Returns the air capacity of the cylinder(s)\n   * @return The volume of gas the cylinder's contents would occupy at sea level\n   * pressure when the cylinder is filled with air to the service pressure, in\n   * capacity units\n   */\n  getVdwCapacity() {\n    return toNumber(\n      this.getVdwCapacityAtPressure(this.mServicePressure, new Gas(0.21, 0))\n    );\n  }\n\n  getIdealCapacity() {\n    return toNumber(this.getIdealCapacityAtPressure(this.mServicePressure));\n  }\n\n  setIdealCapacity(capacity) {\n    this.mInternalVolume = capacity / this.mServicePressure;\n  }\n\n  setVdwCapacity(capacity, T = 297) {\n    //T in Kelvin\n    // This is quite similar to getVdwCapacityAtPressure, except\n    // we are solving for V instead of n. The cubic\n    // polynomial is the same, it's just that the\n    // uncertainty is calculated differently.\n    var m = new Gas(0.21, 0);\n    var a = this.VanDerWaals_computeA(m),\n      b = this.VanDerWaals_computeB(m);\n    // Source: http://en.wikipedia.org/wiki/Ideal_gas_constant\n    var RT = T * this.universalGasConstant; //KELVIN 297 temp ambiente * gas constant\n    // A bit of optimization to reduce number of calculations per iteration\n    var PbRT = this.mServicePressure * b + RT,\n      PbRT2 = 2 * PbRT,\n      ab = a * b,\n      P3 = 3 * this.mServicePressure;\n    // Come up with a guess to seed Newton-Raphson. The equation is easily\n    // solved if a and b were 0\n    var v0,\n      v1 = RT / this.mServicePressure;\n\n    // We know what n is because we were given capacity:\n    var n = capacity / RT;\n\n    // Uncertainty math (see below)\n    // V = nv\n    // dV/dv = n\n    var uncertainty = toNumber(n / Math.pow(10, 1) / 2);\n\n    do {\n      v0 = v1;\n      var f =\n        this.mServicePressure * Math.pow(v0, 3) -\n        PbRT * Math.pow(v0, 2) +\n        a * v0 -\n        ab;\n      var fprime = P3 * Math.pow(v0, 2) - PbRT2 * v0 + a;\n      v1 = v0 - f / fprime;\n    } while (Math.abs(v0 - v1) >= uncertainty);\n\n    this.mInternalVolume = toNumber(v1 * n);\n  }\n\n  /**\n   * Get the internal volume of this cylinder\n   * @return The internal volume in capacity units\n   */\n  getInternalVolume() {\n    return this.mInternalVolume;\n  }\n\n  setInternalVolume(internal_volume) {\n    this.mInternalVolume = internal_volume;\n  }\n\n  getServicePressure() {\n    return this.mServicePressure;\n  }\n\n  setServicePressure(service_pressure) {\n    this.mServicePressure = service_pressure;\n  }\n\n  getIdealCapacityAtPressure(pressure) {\n    return (this.mInternalVolume * pressure) / this.atmPressure; //1 atm pression\n  }\n\n  getIdealPressureAtCapacity(capacity) {\n    return (capacity * this.atmPressure) / this.mInternalVolume; //1 atm pression\n  }\n\n  /**\n   * Solves Van der Waals gas equation to get equivalent atmospheric volume at\n   * a given pressure\n   * @param P The pressure of the gas in the cylinder\n   * @param mix The mix in the cylinder, needed to determine a and b constants.\n   * @return The amount of gas in the cylinder to one decimal place\n   */\n  getVdwCapacityAtPressure(P, m, T = 297) {\n    //T in Kelvin\n    // First, the trivial solution. This will cause a divide by 0 if we try to\n    // solve.\n    if (P == 0) {\n      return 0;\n    }\n    // This is solved by finding the root of a cubic polynomial\n    // for the molar volume v = V/n:\n    // choose a reasonable value for T\n    //   P * v^3 - (P*b + R*T) * v^2 + a * v - a * b = 0\n    //   n = V/v\n    // Then we can use ideal gas laws to convert n to V @ 1 ata\n    var a = this.VanDerWaals_computeA(m),\n      b = this.VanDerWaals_computeB(m);\n    var RT = T * this.universalGasConstant; //KELVIN 297 temp ambiente * gas constant\n    // A bit of optimization to reduce number of calculations per iteration\n    var PbRT = P * b + RT,\n      PbRT2 = 2 * PbRT,\n      ab = a * b,\n      P3 = 3 * P;\n    // Come up with a guess to seed Newton-Raphson. The equation is easily\n    // solved if a and b were 0\n    var v0,\n      v1 = RT / P;\n\n    // First-order uncertainty propagation. This lets us know within what\n    // tolerance we need to compute v to get the right volume.\n    // The variable we are solving for is v.\n    // The result we care about the uncertainty for is V0, the volume at 1 ata.\n    //   V0 = n * R * T / P0 [ideal gas law] = V * R * T / (P0 * v)\n    // To compute the uncertainty in V0, we use the Taylor series method for\n    // v alone.\n    //   deltaV0 = dV0/dv*deltav\n    // ...where dV0/dv = - V*R*T / (P0 * v^2)\n    // We want to make sure deltaV0 is less than 0.05, so...\n    //   deltav < P0 * v^2 / (20 * V * R * T)\n    var uncertainty_multiplier = 1 / (20 * this.mInternalVolume * RT);\n\n    do {\n      v0 = v1;\n      var f = P * Math.pow(v0, 3) - PbRT * Math.pow(v0, 2) + a * v0 - ab;\n      var fprime = P3 * Math.pow(v0, 2) - PbRT2 * v0 + a;\n      v1 = v0 - f / fprime;\n    } while (Math.abs(v0 - v1) / uncertainty_multiplier >= v1 * v1);\n\n    const capacity = (this.mInternalVolume * RT) / (this.atmPressure * v1);\n\n    return capacity;\n  }\n\n  getVdwPressureAtCapacity(capacity, m, T) {\n    //T in Kelvin\n    // This is given by the following:\n    // choose a reasonable value for T\n    // n = Patm*V/(R*T) (since volume is at atmospheric pressure, it's close enough to ideal)\n    // v = V/n\n    // P = R * T / (v - b) - a / v^2\n    var RT = T * this.universalGasConstant;\n    var v = (this.mInternalVolume * RT) / (this.atmPressure * capacity),\n      a = this.VanDerWaals_computeA(m),\n      b = this.VanDerWaals_computeB(m);\n    return RT / (v - b) - a / Math.pow(v, 2);\n  }\n}\n","import {Gas} from \"./gas\";\nimport {Cylinder} from \"./cylinder\";\nimport {DiveToolsService} from \"../../../services/udive/planner/dive-tools\";\nimport {round, toInteger, toNumber} from \"lodash\";\n\nexport class GasSupply {\n  /**\n   * Create a new gas source from a cylinder size, an initial mix, and a starting\n   * pressure.\n   * @param c The cylinder object to use for this supply\n   * @param m The initial mix in the cylinder\n   * @param pressure The initial pressure of the cylinder's content, in the same\n   * units that were used for the cylinder object.\n   */\n  mMix: Gas;\n  mCylinder: Cylinder;\n  mPressure: number;\n  mUseIdealGasLaws: boolean;\n  mTemperature: number;\n  mUnits: string;\n\n  constructor(c, m, pressure, ideal_gas_laws, temperature, units?) {\n    this.mCylinder = c;\n    this.mMix = m;\n    this.mPressure = pressure;\n    this.mUseIdealGasLaws = ideal_gas_laws;\n    this.mTemperature = temperature;\n    this.mUnits = units ? units : DiveToolsService.units;\n  }\n\n  useIdealGasLaws(ideal) {\n    this.mUseIdealGasLaws = ideal;\n  }\n\n  getMix() {\n    return this.mMix;\n  }\n\n  setMix(m: Gas) {\n    this.mMix = m;\n  }\n\n  getCylinder() {\n    return this.mCylinder;\n  }\n\n  setCylinder(c: Cylinder) {\n    this.mCylinder = c;\n  }\n\n  getPressure() {\n    return this.mPressure;\n  }\n\n  setPressure(p) {\n    this.mPressure = p;\n  }\n\n  getTemperature() {\n    return this.mTemperature;\n  }\n\n  getKTemperature() {\n    //Kelvin\n    if (this.mUnits == \"Imperial\") {\n      return ((this.mTemperature - 32) * 5) / 9 + 273.15;\n    } else {\n      return this.mTemperature + 273.15;\n    }\n  }\n\n  setTemperature(t) {\n    this.mTemperature = t;\n  }\n  /**\n   * Get the total amount of gas in capacity units at sea level pressure\n   * @return The amount of gas in the supply\n   */\n  getGasAmount() {\n    if (this.mUseIdealGasLaws) {\n      return this.mCylinder.getIdealCapacityAtPressure(this.mPressure);\n    } else {\n      return this.mCylinder.getVdwCapacityAtPressure(\n        this.mPressure,\n        this.mMix,\n        this.getKTemperature()\n      );\n    }\n  }\n\n  getFO2() {\n    return round(this.mMix.getFO2(), 2);\n  }\n\n  getFN2() {\n    return round(this.mMix.getFN2(), 2);\n  }\n\n  getFHe() {\n    return round(this.mMix.getFHe(), 2);\n  }\n\n  getO2Amount() {\n    return this.getGasAmount() * this.getFO2();\n  }\n\n  getN2Amount() {\n    return this.getGasAmount() * this.getFN2();\n  }\n\n  getHeAmount() {\n    return this.getGasAmount() * this.getFHe();\n  }\n\n  /**\n   * Adjust the pressure in the supply so there's the given amount of gas.\n   * @param amt The amount to leave in the cylinder in capacity units at\n   * sea level pressure\n   * @return The GasSupply object\n   */\n  drainToGasAmount(amt) {\n    if (this.mUseIdealGasLaws) {\n      this.mPressure = this.mCylinder.getIdealPressureAtCapacity(amt);\n    } else {\n      this.mPressure = this.mCylinder.getVdwPressureAtCapacity(\n        amt,\n        this.mMix,\n        this.getKTemperature()\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Adjust the pressure in the supply so there's the given amount of oxygen.\n   * @param amt The amount of oxygen to leave in the cylinder in capacity\n   * units at sea level pressure\n   * @return The GasSupply object\n   */\n  drainToO2Amount(amt) {\n    return this.drainToGasAmount(amt / this.mMix.getFO2());\n  }\n\n  drainToN2Amount(amt) {\n    return this.drainToGasAmount(amt / this.mMix.getFHe());\n  }\n\n  drainToHeAmount(amt) {\n    return this.drainToGasAmount(amt / this.mMix.getFN2());\n  }\n\n  /**\n   * Add a given amount of oxygen to the cylinder, updating the mix and pressure\n   * accordingly.\n   * @param amt The amount of oxygen to add in 1-atm volumes\n   * @return The modified GasSupply object\n   */\n  addO2(amt) {\n    return this.addGas(new Gas(1, 0), amt);\n  }\n\n  /**\n   * Add a given amount of helium to the cylinder, updating the mix and pressure\n   * accordingly.\n   * @param amt The amount of helium to add in 1-atm volumes\n   * @return The modified GasSupply object\n   */\n  addHe(amt) {\n    return this.addGas(new Gas(0, 1), amt);\n  }\n\n  /**\n   * Add a given amount of arbitrary gas to the cylinder, updating the mix and\n   * pressure accordingly.\n   * @param mix The gas mix being added\n   * @param amt The amount of gas to add in 1-atm volumes\n   * @return The modified GasSupply object\n   */\n  addGas(mix, amt) {\n    var current_amt = this.getGasAmount(),\n      o2 = this.mMix.getFO2() * current_amt + mix.getFO2() * amt,\n      he = this.mMix.getFHe() * current_amt + mix.getFHe() * amt,\n      new_total_amt = current_amt + amt;\n    this.mMix = new Gas(o2 / new_total_amt, he / new_total_amt);\n    if (this.mUseIdealGasLaws) {\n      this.mPressure = this.mCylinder.getIdealPressureAtCapacity(new_total_amt);\n    } else {\n      this.mPressure = this.mCylinder.getVdwPressureAtCapacity(\n        new_total_amt,\n        this.mMix,\n        this.getKTemperature()\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Add a mix to the current contents of the supply.\n   * @param m The mix to add\n   * @param final_pressure The final pressure for the supply\n   * @return The modified GasSupply object.\n   */\n  topup(m, final_pressure) {\n    // Trivial solution: we're adding the same mix that's already in the cylinder\n    if (this.mMix.isEqualTo(m)) {\n      this.mPressure = final_pressure;\n      return this;\n    }\n    // This method uses the Secant Method to numerically determine\n    // the result to within 1/2% of each final mix. We do this because\n    // writing out the single equation for the system would be terrible,\n    // not to mention calculating its derivative.\n\n    // Compute uncertainty\n    // Max uncertainty in fo2 and fhe is 0.5% = 0.005.\n    // fo2 == fo2i + fo2t == fo2i + vt * fo2t\n    // e_fo2 == fo2t * e_vt <= 0.005\n    // e_fhe == fhet * e_vt <= 0.005\n    var error = 0.005 / Math.max(m.getFO2(), m.getFHe());\n\n    // cache member variables as local\n    var c = this.mCylinder;\n    var mix = this.mMix;\n    var pressure = toInteger(this.mPressure);\n\n    // Start with two guesses for Secant Method\n    // The first guess assumes ideal behavior as the gas is added, and assumes\n    // the topup mix is close enough to determine capacity.\n    var vt_n =\n      (1 - pressure / final_pressure) *\n      c.getVdwCapacityAtPressure(final_pressure, m, this.getKTemperature());\n    // The second guess assumes ideal behavior as the gas is added, and assumes\n    // the starting mix is close enough to determine capacity.\n    var vt_n_1 =\n      (1 - pressure / final_pressure) *\n      c.getVdwCapacityAtPressure(final_pressure, mix, this.getKTemperature());\n\n    var d;\n    do {\n      // Initialize a temporary this. Because addGas acts on the object,\n      // we have to re-instantiate it each time.\n      var test = new GasSupply(\n        c,\n        mix,\n        pressure,\n        this.mUseIdealGasLaws,\n        this.getKTemperature()\n      ); //this.create(c, mix, pressure);\n      // Each computation evaluates the difference between the actual pressure\n      // after adding a certain amount of gas, and the desired pressure.\n      var f_n = test.addGas(m, vt_n).getPressure() - final_pressure;\n      test = new GasSupply(\n        c,\n        mix,\n        pressure,\n        this.mUseIdealGasLaws,\n        this.getKTemperature()\n      ); //new this.create(c, mix, pressure);\n      var f_n_1 = test.addGas(m, vt_n_1).getPressure() - final_pressure;\n      d = ((vt_n - vt_n_1) / (f_n - f_n_1)) * f_n;\n      vt_n_1 = vt_n;\n      vt_n -= d;\n    } while (Math.abs(d) < error);\n\n    // Now that we have our solution, run addGas on self.\n    this.addGas(m, vt_n);\n    // Cheat! Set mPressure to what would be expected since addGas may not have\n    // gotten it exactly.\n    this.mPressure = final_pressure;\n    return this;\n  }\n\n  /*\n   * create forms\n   */\n  getForm() {\n    let form = {\n      o2: this.mMix.getO2(),\n      he: this.mMix.getHe(),\n      temp: round(toNumber(this.getTemperature()), 2),\n      bar: round(toNumber(this.getPressure()), 2),\n    };\n    return form;\n  }\n}\n"],"mappings":"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","ignoreList":[]}