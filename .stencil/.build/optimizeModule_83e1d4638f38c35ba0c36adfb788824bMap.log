{"version":3,"names":["pageUserSettingsCss","PageUserSettingsStyle0","PageUserSettings","this","selectedSegment","tag","text","componentWillLoad","segmentTitles","configurations","TranslationService","getTransl","tanks","userSub$","UserService","userProfile$","subscribe","userProfile","UserProfile","updateView","componentDidLoad","setSliderHeight","initLocalUser","updateSlider","segmentChartChanged","ev","detail","value","setTimeout","slider","update","undefined","Swiper","speed","spaceBetween","allowTouchMove","autoHeight","slideContainers","Array","from","el","getElementsByClassName","map","container","setAttribute","slideHeight","disconnectedCallback","unsubscribe","logScrollStart","content","srcElement","render","h","class","showUserDetails","color","Environment","getAppColor","swiper","titles","scrollEvents","onIonScrollStart","vertical","horizontal","slot","style","marginTop","fabButtonTopMarginString","name","onClick","presentUserUpdate","showCover","expand","fill","AuthService","logout","isLabel","onIonChange","mode"],"sources":["src/components/udive/pages/user/page-user-settings/page-user-settings.scss?tag=page-user-settings","src/components/udive/pages/user/page-user-settings/page-user-settings.tsx"],"sourcesContent":["page-user-settings {\n  .cover-header {\n    margin-top: var(--coverHeight);\n  }\n  ion-segment-button {\n    --color-checked: var(--ion-color-udive-contrast);\n  }\n  .nopaddingtop {\n    //remove for iOS\n    padding-top: 0px !important;\n  }\n}\n","import { Component, h, State, Element } from \"@stencil/core\";\nimport { Subscription } from \"rxjs\";\nimport { UserService } from \"../../../../../services/common/user\";\nimport { AuthService } from \"../../../../../services/common/auth\";\nimport { UserProfile } from \"../../../../../interfaces/common/user/user-profile\";\nimport {\n  fabButtonTopMarginString,\n  slideHeight,\n} from \"../../../../../helpers/utils\";\nimport { Environment } from \"../../../../../global/env\";\nimport Swiper from \"swiper\";\nimport { TranslationService } from \"../../../../../services/common/translations\";\n\n@Component({\n  tag: \"page-user-settings\",\n  styleUrl: \"page-user-settings.scss\",\n})\nexport class PageUserSettings {\n  @Element() el: HTMLElement;\n  @State() userProfile: UserProfile;\n  userSub$: Subscription;\n  @State() titles = [\n    { tag: \"user-info\", text: \"My Info\" },\n    { tag: \"dive-cards\" },\n    { tag: \"user-confs\", text: \"My Dive Configurations\" },\n    { tag: \"licences\" },\n    //{tag: \"notifications\"},\n  ];\n  segmentTitles: {\n    configurations: string;\n    tanks: string;\n  };\n  selectedSegment = \"configurations\";\n  @State() slider: Swiper;\n  @State() updateView = false;\n  content: HTMLIonContentElement;\n\n  componentWillLoad() {\n    this.segmentTitles = {\n      configurations: TranslationService.getTransl(\n        \"configurations\",\n        \"Configurations\"\n      ),\n      tanks: TranslationService.getTransl(\"tanks\", \"Tanks\"),\n    };\n    this.userSub$ = UserService.userProfile$.subscribe(\n      (userProfile: UserProfile) => {\n        this.userProfile = new UserProfile(userProfile);\n      }\n    );\n\n    this.updateView = !this.updateView;\n  }\n\n  async componentDidLoad() {\n    this.setSliderHeight();\n    //check if user is loaded or trigger local user\n    if (!this.userProfile) {\n      UserService.initLocalUser();\n    }\n    this.updateSlider();\n  }\n\n  segmentChartChanged(ev) {\n    this.selectedSegment = ev.detail.value;\n    this.updateSlider();\n  }\n\n  updateSlider() {\n    this.updateView = !this.updateView;\n    setTimeout(() => {\n      //reset slider height to show address\n      this.slider ? this.slider.update() : undefined;\n    }, 100);\n  }\n\n  setSliderHeight() {\n    this.slider = new Swiper(\".slider-user-settings\", {\n      speed: 400,\n      spaceBetween: 100,\n      allowTouchMove: true,\n      autoHeight: true,\n    });\n    //reset sliders height inside slider\n    const slideContainers = Array.from(\n      this.el.getElementsByClassName(\"slide-container\")\n    );\n    slideContainers.map((container) => {\n      container.setAttribute(\n        \"style\",\n        \"height: \" + slideHeight(this.userProfile) + \"px\"\n      );\n    });\n  }\n\n  disconnectedCallback() {\n    this.userSub$.unsubscribe();\n  }\n\n  logScrollStart(ev) {\n    this.content = ev.srcElement;\n  }\n\n  render() {\n    return [\n      this.userProfile\n        ? [\n            <ion-header class='cover-header'>\n              <app-user-cover showUserDetails={false}></app-user-cover>\n            </ion-header>,\n            <app-header-segment-toolbar\n              color={Environment.getAppColor()}\n              swiper={this.slider}\n              titles={this.titles}\n            ></app-header-segment-toolbar>,\n            <ion-content\n              class='slides'\n              scrollEvents={true}\n              onIonScrollStart={(ev) => this.logScrollStart(ev)}\n            >\n              <ion-fab\n                vertical='top'\n                horizontal='start'\n                slot='fixed'\n                style={{\n                  marginTop:\n                    \"calc(env(safe-area-inset-top) + \" +\n                    fabButtonTopMarginString(1) +\n                    \")\",\n                }}\n              >\n                <ion-menu-toggle>\n                  <ion-fab-button color='light'>\n                    <ion-icon name='menu-outline' />\n                  </ion-fab-button>\n                </ion-menu-toggle>\n              </ion-fab>\n              <ion-fab\n                vertical='top'\n                horizontal='end'\n                slot='fixed'\n                style={{\n                  marginTop:\n                    \"calc(env(safe-area-inset-top) + \" +\n                    fabButtonTopMarginString(1) +\n                    \")\",\n                }}\n              >\n                <ion-fab-button\n                  color='light'\n                  onClick={() => UserService.presentUserUpdate()}\n                >\n                  <ion-icon name='create-outline' />\n                </ion-fab-button>\n              </ion-fab>\n              <swiper-container class='slider-user-settings swiper'>\n                <swiper-wrapper class='swiper-wrapper'>\n                  <swiper-slide class='swiper-slide'>\n                    <ion-content class='slide-container'>\n                      <app-user-cover showCover={false}></app-user-cover>\n                      <ion-button\n                        expand='block'\n                        fill='solid'\n                        color='danger'\n                        onClick={() => AuthService.logout()}\n                      >\n                        <ion-icon slot='start' name='log-out'></ion-icon>\n                        <my-transl\n                          tag='logout'\n                          text='Logout'\n                          isLabel\n                        ></my-transl>\n                      </ion-button>\n                    </ion-content>\n                  </swiper-slide>\n                  <swiper-slide class='swiper-slide'>\n                    <app-user-cards\n                      updateSlider={() => this.updateSlider()}\n                    ></app-user-cards>\n                  </swiper-slide>\n                  <swiper-slide class='swiper-slide'>\n                    <div class='ion-no-padding'>\n                      <ion-row>\n                        <ion-col>\n                          <ion-segment\n                            onIonChange={(ev) => this.segmentChartChanged(ev)}\n                            color={Environment.getAppColor()}\n                            mode='ios'\n                            value={this.selectedSegment}\n                          >\n                            <ion-segment-button value='configurations'>\n                              <ion-label>\n                                {this.segmentTitles.configurations}\n                              </ion-label>\n                            </ion-segment-button>\n                            <ion-segment-button value='tanks'>\n                              <ion-label>{this.segmentTitles.tanks}</ion-label>\n                            </ion-segment-button>\n                          </ion-segment>\n                        </ion-col>\n                      </ion-row>\n                    </div>\n                    {this.selectedSegment == \"configurations\" ? (\n                      <app-user-configurations></app-user-configurations>\n                    ) : (\n                      <app-user-tanks></app-user-tanks>\n                    )}\n                  </swiper-slide>\n                  <swiper-slide class='swiper-slide'>\n                    <ion-content class='slide-container'>\n                      <app-user-licences></app-user-licences>\n                    </ion-content>\n                  </swiper-slide>\n                  {/**\n                   * <swiper-slide class=\"swiper-slide\">\n                    <ion-content class=\"slide-container\">\n                      <app-user-manage-notifications></app-user-manage-notifications>\n                    </ion-content>\n                  </swiper-slide>\n                   */}\n                </swiper-wrapper>\n              </swiper-container>\n            </ion-content>,\n          ]\n        : undefined,\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]}