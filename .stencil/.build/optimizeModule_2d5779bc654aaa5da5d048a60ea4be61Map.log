{"version":3,"names":["pageShapesCss","PageShapesStyle0","PageShapes","this","shapesList","nonFilteredShapesList","localDocName","ShapeFilter","componentWillLoad","filter","DatabaseService","getLocalDocument","ShapesService","shapesList$","subscribe","async","list","updateList","loading","filterLists","basket","forEach","datasheet","activateDownload","componentDidLoad","searchToolbar","el","querySelector","slider","Swiper","speed","spaceBetween","allowTouchMove","autoHeight","slidesPerView","on","slideChange","updateAutoHeight","downloadShapes","forceFilter","undefined","updateSlider","updateView","setTimeout","update","addShape","presentShapeUpdate","getOptions","TrasteelService","isRefraDBAdmin","tag","text","icon","color","func","returnField","deleteShape","duplicateShape","openShapeFilter","deleteLocalDocument","clearShapeFilter","cloneDeep","saveLocalDocument","isActive","localShapesList","SystemService","presentLoading","filterShapes","dismissLoading","filteredShapesList","showDownload","params","openShape","shapeId","shape","getShapeById","find","push","orderBy","saveBasket","presentShapeDetails","openDataSheet","index","ds","DatasheetsService","openSelectDataSheet","downloadShapesList","exportShapes","emptyBasket","removeItemFromBasket","length","splice","render","h","key","class","size","fill","expand","onClick","name","id","searchTitle","orderFields","placeholder","filterBy","onFilteredList","ev","detail","vertical","horizontal","slot","edge","side","Object","keys","map","includes","getShapeTypeName","shapeTypeId","en","showFields","options","TrasteelFilterService","getMapDocs","SHAPESCOLLECTION","onItemClicked","onListChanged","disabled","TranslationService","getTransl","shapeName","button","productName"],"sources":["src/components/trasteel/pages/refractories/page-shapes/page-shapes.scss?tag=page-shapes","src/components/trasteel/pages/refractories/page-shapes/page-shapes.tsx"],"sourcesContent":["page-shapes {\n  /* Component styles go here */\n}\n","import {Component, Element, State, h} from \"@stencil/core\";\nimport {\n  SHAPESCOLLECTION,\n  ShapesService,\n} from \"../../../../../services/trasteel/refractories/shapes\";\nimport {\n  MapDataShape,\n  ShapeFilter,\n} from \"../../../../../interfaces/trasteel/refractories/shapes\";\nimport {TrasteelFilterService} from \"../../../../../services/trasteel/common/trs-db-filter\";\nimport {TrasteelService} from \"../../../../../services/trasteel/common/services\";\nimport {cloneDeep, find, orderBy} from \"lodash\";\nimport {DatabaseService} from \"../../../../../services/common/database\";\nimport {SystemService} from \"../../../../../services/common/system\";\nimport Swiper from \"swiper\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {MapDataDatasheet} from \"../../../../../interfaces/trasteel/refractories/datasheets\";\nimport {DatasheetsService} from \"../../../../../services/trasteel/refractories/datasheets\";\n\n@Component({\n  tag: \"page-shapes\",\n  styleUrl: \"page-shapes.scss\",\n})\nexport class PageShapes {\n  @Element() el: HTMLElement;\n  @State() filteredShapesList: MapDataShape[] = [];\n  shapesList: MapDataShape[] = [];\n  nonFilteredShapesList: MapDataShape[] = [];\n  @State() loading = true;\n  @State() filter: ShapeFilter = new ShapeFilter();\n  searchToolbar: any;\n  @State() slider: Swiper;\n  @State() updateView = true;\n  @State() showDownload = true;\n  @State() activateDownload = false;\n  @State() basket: {shape: MapDataShape; datasheet: MapDataDatasheet}[] = [];\n  localDocName = \"shapeBasket\";\n\n  async componentWillLoad() {\n    const filter = await DatabaseService.getLocalDocument(\"shapesFilter\");\n    this.filter = new ShapeFilter(filter);\n    ShapesService.shapesList$.subscribe(async (list: MapDataShape[]) => {\n      this.updateList(list);\n      this.nonFilteredShapesList = list;\n      this.loading = false;\n      this.filterLists();\n    });\n    const basket = await DatabaseService.getLocalDocument(this.localDocName);\n    if (basket) {\n      this.basket = basket;\n      this.basket.forEach((basket) => {\n        if (basket.datasheet) {\n          this.activateDownload = true;\n        } else {\n          this.activateDownload = false;\n        }\n      });\n    }\n  }\n\n  componentDidLoad() {\n    this.searchToolbar = this.el.querySelector(\n      \"#searchToolbar\"\n    ) as HTMLAppSearchToolbarElement;\n    this.slider = new Swiper(\".slider-show-shape\", {\n      speed: 400,\n      spaceBetween: 0,\n      allowTouchMove: false,\n      autoHeight: true,\n      slidesPerView: 1,\n      on: {\n        slideChange: () => {\n          this.slider ? this.slider.updateAutoHeight() : null;\n        },\n      },\n    });\n    this.downloadShapes();\n  }\n\n  updateList(list) {\n    this.shapesList = list;\n    this.searchToolbar ? this.searchToolbar.forceFilter(list) : undefined;\n    this.updateSlider();\n  }\n\n  updateSlider() {\n    this.updateView = !this.updateView;\n    //wait for view to update and then reset slider height\n    setTimeout(() => {\n      this.slider ? this.slider.update() : undefined;\n    }, 100);\n  }\n\n  addShape() {\n    ShapesService.presentShapeUpdate();\n  }\n\n  getOptions() {\n    if (TrasteelService.isRefraDBAdmin()) {\n      return [\n        {\n          tag: \"delete\",\n          text: \"Delete\",\n          icon: \"trash\",\n          color: \"danger\",\n          func: (returnField) => ShapesService.deleteShape(returnField, false),\n        },\n        {\n          tag: \"duplicate\",\n          text: \"Duplicate\",\n          icon: \"duplicate\",\n          color: \"secondary\",\n          func: (returnField) => ShapesService.duplicateShape(returnField),\n        },\n        {\n          tag: \"edit\",\n          text: \"Edit\",\n          icon: \"create\",\n          color: \"primary\",\n          func: (returnField) => ShapesService.presentShapeUpdate(returnField),\n        },\n      ];\n    } else return null;\n  }\n\n  async openShapeFilter() {\n    DatabaseService.deleteLocalDocument(\"filteredShapesList\");\n    this.filter = await ShapesService.openShapeFilter(this.filter);\n    this.filterLists();\n  }\n\n  clearShapeFilter() {\n    this.filter = new ShapeFilter();\n    this.shapesList = cloneDeep(this.nonFilteredShapesList);\n    DatabaseService.deleteLocalDocument(\"filteredShapesList\");\n    this.filterLists();\n  }\n\n  async filterLists() {\n    DatabaseService.saveLocalDocument(\"shapesFilter\", this.filter);\n    if (this.filter.isActive()) {\n      const localShapesList =\n        await DatabaseService.getLocalDocument(\"filteredShapesList\");\n      if (!localShapesList) {\n        this.loading = true;\n        SystemService.presentLoading(\"searching\");\n        this.shapesList = await ShapesService.filterShapes(this.filter);\n        SystemService.dismissLoading();\n        this.filteredShapesList = cloneDeep(this.shapesList);\n        DatabaseService.saveLocalDocument(\n          \"filteredShapesList\",\n          this.filteredShapesList\n        );\n        this.loading = false;\n      } else {\n        this.filteredShapesList = localShapesList;\n      }\n    } else {\n      this.filteredShapesList = cloneDeep(this.nonFilteredShapesList);\n    }\n    this.searchToolbar\n      ? this.searchToolbar.forceFilter(this.shapesList)\n      : undefined;\n    this.slider ? this.updateSlider() : undefined;\n  }\n\n  downloadShapes() {\n    this.showDownload = !this.showDownload;\n    this.slider.params.slidesPerView = this.showDownload ? 2 : 1;\n    this.updateSlider();\n  }\n\n  openShape(shapeId) {\n    if (this.showDownload) {\n      const shape = ShapesService.getShapeById(shapeId);\n      if (!find(this.basket, {shape}))\n        this.basket.push({shape, datasheet: null});\n      this.basket = orderBy(this.basket, \"shape.shapeName\");\n      this.saveBasket();\n    } else {\n      ShapesService.presentShapeDetails(shapeId);\n    }\n  }\n\n  async openDataSheet(index) {\n    const ds = await DatasheetsService.openSelectDataSheet();\n    if (ds) {\n      this.basket[index].datasheet = ds;\n      //fill empty ds\n      this.basket.forEach((basket) => {\n        if (!basket.datasheet) basket.datasheet = ds;\n      });\n      this.activateDownload = true;\n      this.saveBasket();\n    }\n  }\n\n  async downloadShapesList() {\n    ShapesService.exportShapes(this.basket, \"en\");\n    this.downloadShapes();\n  }\n\n  emptyBasket() {\n    this.basket = [];\n    this.activateDownload = false;\n    this.saveBasket();\n  }\n\n  removeItemFromBasket(index) {\n    if (this.basket.length == 1) {\n      this.emptyBasket();\n    } else {\n      this.basket.splice(index, 1);\n      this.saveBasket();\n    }\n  }\n\n  saveBasket() {\n    this.updateSlider();\n    DatabaseService.saveLocalDocument(this.localDocName, this.basket);\n  }\n\n  render() {\n    return [\n      <ion-header>\n        <app-navbar tag=\"shapes\" text=\"Shapes\" color=\"trasteel\"></app-navbar>\n        <ion-grid class=\"ion-no-padding\">\n          <ion-row class=\"ion-no-padding\">\n            <ion-col size=\"1\" class=\"ion-no-padding\">\n              <ion-toolbar color=\"trasteel\">\n                <ion-button\n                  fill=\"clear\"\n                  expand=\"full\"\n                  icon-only\n                  onClick={() => this.openShapeFilter()}\n                >\n                  <ion-icon name=\"filter\" color=\"light\"></ion-icon>\n                </ion-button>\n              </ion-toolbar>\n            </ion-col>\n            <ion-col size=\"11\" class=\"ion-no-padding\">\n              <app-search-toolbar\n                id=\"searchToolbar\"\n                searchTitle=\"shapes\"\n                list={this.shapesList}\n                orderFields={[\"shapeName\"]}\n                color=\"trasteel\"\n                placeholder=\"Search by shape name\"\n                filterBy={[\"shapeName\", \"shapeTypeId\"]}\n                onFilteredList={(ev) => (this.filteredShapesList = ev.detail)}\n              ></app-search-toolbar>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n      </ion-header>,\n      <ion-content class=\"slides\">\n        {TrasteelService.isRefraDBAdmin() ? (\n          !this.showDownload ? (\n            <ion-fab vertical=\"top\" horizontal=\"end\" slot=\"fixed\" edge>\n              <ion-fab-button size=\"small\" color=\"trasteel\">\n                <ion-icon name=\"chevron-down\"></ion-icon>\n              </ion-fab-button>\n              <ion-fab-list side=\"bottom\">\n                <ion-fab-button\n                  onClick={() => this.addShape()}\n                  color=\"trasteel\"\n                >\n                  <ion-icon name=\"add\"></ion-icon>\n                </ion-fab-button>\n                <ion-fab-button\n                  onClick={() => this.downloadShapes()}\n                  color=\"trasteel\"\n                >\n                  <ion-icon name=\"download\"></ion-icon>\n                </ion-fab-button>\n              </ion-fab-list>\n            </ion-fab>\n          ) : (\n            <ion-fab vertical=\"top\" horizontal=\"end\" slot=\"fixed\" edge>\n              <ion-fab-button\n                onClick={() => this.downloadShapes()}\n                size=\"small\"\n                color=\"trasteel\"\n              >\n                <ion-icon name=\"close\"></ion-icon>\n              </ion-fab-button>\n            </ion-fab>\n          )\n        ) : undefined}\n        <swiper-container class=\"slider-show-shape swiper\">\n          <swiper-wrapper class=\"swiper-wrapper\">\n            <swiper-slide class=\"swiper-slide\">\n              {this.filter.isActive()\n                ? [\n                    <ion-breadcrumbs>\n                      <ion-button\n                        icon-only\n                        fill=\"clear\"\n                        onClick={() => this.clearShapeFilter()}\n                      >\n                        <ion-icon color=\"danger\" name=\"trash\"></ion-icon>\n                      </ion-button>\n                      <ion-breadcrumb>\n                        {this.filteredShapesList.length}\n                      </ion-breadcrumb>\n                      {Object.keys(this.filter).map((key) =>\n                        !key.includes(\"operator\") &&\n                        (this.filter[key] > 0 || this.filter[key] !== null) ? (\n                          <ion-breadcrumb>\n                            {key != \"shapeTypeId\"\n                              ? key +\n                                \" \" +\n                                this.filter[key + \"_operator\"] +\n                                \" \" +\n                                this.filter[key]\n                              : ShapesService.getShapeTypeName(\n                                    this.filter.shapeTypeId\n                                  )\n                                ? ShapesService.getShapeTypeName(\n                                    this.filter.shapeTypeId\n                                  ).en\n                                : null}\n                          </ion-breadcrumb>\n                        ) : undefined\n                      )}\n                      <ion-breadcrumb></ion-breadcrumb>\n                    </ion-breadcrumbs>,\n                  ]\n                : undefined}\n\n              <app-infinite-scroll\n                list={this.filteredShapesList}\n                loading={this.loading}\n                showFields={[\"shapeName\"]}\n                orderBy={[\"shapeName\"]}\n                options={this.getOptions()}\n                returnField=\"id\"\n                icon={\n                  TrasteelFilterService.getMapDocs(SHAPESCOLLECTION).icon.name\n                }\n                onItemClicked={(ev) => this.openShape(ev.detail)}\n                onListChanged={() => {\n                  this.updateSlider();\n                }}\n              ></app-infinite-scroll>\n            </swiper-slide>\n            {this.showDownload ? (\n              <swiper-slide class=\"swiper-slide\">\n                <ion-list>\n                  {this.basket.length == 0 ? (\n                    <ion-item>\n                      Click on the shapes on the left to add to basket\n                    </ion-item>\n                  ) : (\n                    <ion-grid>\n                      <ion-row>\n                        <ion-col>\n                          <ion-button\n                            onClick={() => this.downloadShapesList()}\n                            expand=\"block\"\n                            fill=\"outline\"\n                            color=\"trasteel\"\n                            disabled={!this.activateDownload}\n                          >\n                            <ion-icon name=\"download\" slot=\"start\"></ion-icon>\n                            <ion-label>\n                              {TranslationService.getTransl(\n                                \"download\",\n                                \"Download\"\n                              )}\n                            </ion-label>\n                            <ion-badge slot=\"end\" color=\"trasteel\">\n                              {this.basket.length}\n                            </ion-badge>\n                          </ion-button>\n                        </ion-col>\n                        <ion-col size=\"1\">\n                          <ion-button\n                            fill=\"clear\"\n                            icon-only\n                            onClick={() => this.emptyBasket()}\n                          >\n                            <ion-icon name=\"trash\" color=\"danger\"></ion-icon>\n                          </ion-button>\n                        </ion-col>\n                      </ion-row>\n                    </ion-grid>\n                  )}\n                  {this.basket.map((basket, index) => (\n                    <ion-grid class=\"ion-no-padding\">\n                      <ion-row class=\"ion-no-padding\">\n                        <ion-col class=\"ion-no-padding\">\n                          <ion-item color=\"light\">\n                            <ion-label>{basket.shape.shapeName}</ion-label>\n                            <ion-icon slot=\"end\" name=\"arrow-right\"></ion-icon>\n                          </ion-item>\n                        </ion-col>\n                        <ion-col class=\"ion-no-padding\">\n                          <ion-item\n                            button\n                            color=\"light\"\n                            onClick={() => this.openDataSheet(index)}\n                          >\n                            <ion-label>\n                              {basket.datasheet\n                                ? basket.datasheet.productName\n                                : \"insert datasheet\"}\n                            </ion-label>\n                          </ion-item>\n                        </ion-col>\n                        <ion-col size=\"2\" class=\"ion-no-padding\">\n                          <ion-item color=\"light\">\n                            <ion-button\n                              slot=\"end\"\n                              fill=\"clear\"\n                              icon-only\n                              onClick={() => this.removeItemFromBasket(index)}\n                            >\n                              <ion-icon name=\"trash\" color=\"danger\"></ion-icon>\n                            </ion-button>\n                          </ion-item>\n                        </ion-col>\n                      </ion-row>\n                    </ion-grid>\n                  ))}\n                </ion-list>\n              </swiper-slide>\n            ) : undefined}\n          </swiper-wrapper>\n        </swiper-container>\n      </ion-content>,\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]}