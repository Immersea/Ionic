{"version":3,"names":["modalDiveConfigurationCss","ModalDiveConfigurationStyle0","ModalDiveConfiguration","this","validForm","name","depth","time","bottom","componentWillLoad","screenWidth","window","screen","width","divePlan","diveDataToShare","diveConfig","configuration","orderTanks","ranges","getParamRanges","parameters","units","gases","DiveStandardsService","getStdGases","orderBy","bottomGases","filter","deco","decoGases","tanks","UserService","userSettings","userTanks","bottomTanks","forDeco","decoTanks","forEach","tank","push","getTank","stdConfigurations","getStdConfigurations","userStdConfigurations","cloneDeep","userConfigurations","componentDidLoad","validateAll","addTank","event","data","tanksList","stdGasesList","ccr","cssClass","undefined","isPlatform","popover","popoverController","create","component","translucent","backdropDismiss","componentProps","present","onDidDismiss","then","updatedTank","config","index","indexOf","splice","validateForm","deleteTank","updateView","updateParams","params","save","el","closest","dismiss","close","inputHandler","detail","value","stdName","length","maxDepth","maxTime","item","valid","showSave","copyConfiguration","conf","render","h","key","tag","text","color","Environment","getAppColor","modal","class","id","map","shape","onClick","onFormItemChanged","ev","validator","onIsValid","labelReplace","xxx","depthUnit","toString","options","min","isLabel","size","fill","i","gas","pressure","DiveToolsService","pressUnit","getGasVolume","volumeUnit","onUpdateParamsEvent","disableSave","onCancelEmit","onSaveEmit"],"sources":["src/components/udive/modals/dive-plan/modal-dive-configuration/modal-dive-configuration.scss?tag=modal-dive-configuration","src/components/udive/modals/dive-plan/modal-dive-configuration/modal-dive-configuration.tsx"],"sourcesContent":["modal-dive-configuration {\n  .scrollx {\n    display: flex;\n    flex-wrap: nowrap;\n    overflow-x: auto;\n\n    .item {\n      flex: 0 0 0 0;\n    }\n\n    ::-webkit-scrollbar {\n      display: none;\n    }\n  }\n\n  input {\n    text-align: right;\n  }\n  .fixedLabel {\n    min-width: 80% !important;\n    max-width: 80% !important;\n  }\n  ion-item .item-inner {\n    box-shadow: none !important;\n    border-bottom: 1px solid #dedede !important;\n  }\n\n  .item-input .label-md,\n  .item-select .label-md,\n  .item-datetime .label-md {\n    color: rgb(0, 0, 0);\n  }\n}\n","import {Component, h, Prop, Element, State} from \"@stencil/core\";\nimport {popoverController, isPlatform} from \"@ionic/core\";\nimport {DivePlan} from \"../../../../../services/udive/planner/dive-plan\";\nimport {DiveConfiguration} from \"../../../../../interfaces/udive/planner/dive-configuration\";\nimport {GasModel} from \"../../../../../interfaces/udive/planner/gas-model\";\nimport {Tank} from \"../../../../../interfaces/udive/planner/tank\";\nimport {cloneDeep, filter, indexOf, orderBy, toString} from \"lodash\";\nimport {DiveStandardsService} from \"../../../../../services/udive/planner/dive-standards\";\nimport {Environment} from \"../../../../../global/env\";\nimport {DiveToolsService} from \"../../../../../services/udive/planner/dive-tools\";\nimport {UserService} from \"../../../../../services/common/user\";\n//import { LicenceCheckProvider } from '../../../providers/licence-check';\n\n@Component({\n  tag: \"modal-dive-configuration\",\n  styleUrl: \"modal-dive-configuration.scss\",\n})\nexport class ModalDiveConfiguration {\n  @Element() el: HTMLElement;\n  @Prop() diveDataToShare: any;\n\n  userStdConfigurations: any;\n  diveConfig: DiveConfiguration;\n  divePlan: DivePlan;\n  ranges: any;\n  stdConfigurations: Array<DiveConfiguration>;\n  bottomTanks: Array<Tank>;\n  decoTanks: Array<Tank>;\n  bottomGases: Array<GasModel>;\n  decoGases: Array<GasModel>;\n  screenWidth: number;\n  @State() updateView = true;\n  validForm = {\n    name: false,\n    depth: false,\n    time: false,\n    bottom: false,\n  };\n  @State() showSave = false;\n\n  componentWillLoad() {\n    this.screenWidth = window.screen.width;\n    //set private configuration for users\n    this.divePlan = this.diveDataToShare.divePlan;\n    this.diveConfig = this.divePlan.configuration;\n    this.orderTanks();\n\n    this.ranges = this.divePlan.getParamRanges(\n      this.diveConfig.parameters.units\n    );\n\n    let gases = DiveStandardsService.getStdGases();\n    gases = orderBy(gases, \"fromDepth\", \"asc\");\n\n    this.bottomGases = filter(gases, {deco: false});\n    this.decoGases = filter(gases, {deco: true});\n\n    let tanks = UserService.userSettings.userTanks;\n    tanks = orderBy(tanks, \"volume\");\n    const bottomTanks = filter(tanks, {forDeco: false});\n    const decoTanks = filter(tanks, {forDeco: true});\n    this.bottomTanks = [];\n    bottomTanks.forEach((tank) => {\n      this.bottomTanks.push(tank.getTank());\n    });\n    this.decoTanks = [];\n    decoTanks.forEach((tank) => {\n      this.decoTanks.push(tank.getTank());\n    });\n    this.stdConfigurations = DiveStandardsService.getStdConfigurations();\n    this.userStdConfigurations = cloneDeep(\n      UserService.userSettings.userConfigurations\n    );\n  }\n\n  componentDidLoad() {\n    this.validateAll();\n  }\n\n  async addTank(event, bottom: boolean, tank?) {\n    let data = {\n      tank: tank,\n      tanksList: null,\n      stdGasesList: null,\n      ccr: this.diveConfig.parameters.configuration == \"CCR\",\n      parameters: this.diveConfig.parameters,\n      decoTanks: !bottom,\n    };\n    if (bottom) {\n      data.tanksList = this.bottomTanks;\n      data.stdGasesList = this.bottomGases;\n    } else {\n      data.tanksList = this.decoTanks;\n      data.stdGasesList = this.decoGases;\n    }\n    var cssClass = undefined;\n    //make custom popover for capacitor apps\n    if (isPlatform(\"capacitor\")) {\n      cssClass = \"custom-mobile-popover\";\n      event = null;\n    }\n    const popover = await popoverController.create({\n      component: \"popover-tank\",\n      event: event,\n      translucent: true,\n      backdropDismiss: false,\n      cssClass: cssClass,\n      componentProps: data,\n    });\n    popover.present();\n\n    popover.onDidDismiss().then((updatedTank: any) => {\n      updatedTank = updatedTank.data as Tank;\n      if (updatedTank) {\n        let config;\n        if (bottom) {\n          config = this.diveConfig.configuration.bottom;\n        } else {\n          config = this.diveConfig.configuration.deco;\n        }\n        if (!tank) {\n          config.push(updatedTank);\n        } else {\n          let index = indexOf(config, tank);\n          config.splice(index, 1, updatedTank);\n        }\n        this.orderTanks();\n        this.validateForm(\"tanks\");\n      }\n    });\n  }\n\n  deleteTank(bottom: boolean, index) {\n    let config;\n    if (bottom) {\n      config = this.diveConfig.configuration.bottom;\n    } else {\n      config = this.diveConfig.configuration.deco;\n    }\n    config.splice(index, 1);\n    this.orderTanks();\n  }\n\n  orderTanks() {\n    this.diveConfig.configuration.bottom = orderBy(\n      this.diveConfig.configuration.bottom,\n      \"gas.fromDepth\"\n    );\n\n    this.diveConfig.configuration.deco = orderBy(\n      this.diveConfig.configuration.deco,\n      \"gas.fromDepth\"\n    );\n\n    this.updateView = !this.updateView;\n  }\n\n  updateParams(params) {\n    this.divePlan.parameters = params;\n  }\n\n  save() {\n    this.el.closest(\"ion-modal\").dismiss(this.diveConfig);\n  }\n\n  close() {\n    this.el.closest(\"ion-modal\").dismiss();\n  }\n\n  inputHandler(event: any) {\n    this.diveConfig[event.detail.name] = event.detail.value;\n  }\n\n  validateAll() {\n    this.validForm.name = this.diveConfig.stdName.length >= 3;\n    this.validForm.depth = this.diveConfig.maxDepth > 1;\n    this.validForm.time = this.diveConfig.maxTime > 1;\n    this.validateForm(\"tanks\");\n    this.updateView = !this.updateView;\n  }\n\n  validateForm(item, valid?) {\n    if (item == \"name\") {\n      this.validForm.name = valid;\n    } else if (item == \"time\") {\n      this.validForm.time = valid;\n    } else if (item == \"depth\") {\n      this.validForm.depth = valid;\n    } else {\n      this.validForm.bottom = this.bottomTanks.length > 0;\n    }\n    this.showSave =\n      this.validForm.name &&\n      this.validForm.time &&\n      this.validForm.depth &&\n      this.validForm.bottom;\n  }\n\n  copyConfiguration(conf) {\n    this.diveConfig = conf;\n    this.validateAll();\n  }\n\n  render() {\n    return [\n      <app-navbar\n        tag=\"dive-configuration\"\n        text=\"Dive Configuration\"\n        color={Environment.getAppColor()}\n        modal={true}\n      ></app-navbar>,\n\n      <ion-content>\n        <ion-list>\n          <ion-list-header>Copy from standard configuration</ion-list-header>\n          <ion-row class=\"scrollx\" id=\"scrollTankGas\">\n            {this.userStdConfigurations\n              ? this.userStdConfigurations.map((conf) => (\n                  <ion-col class=\"item\">\n                    <ion-button\n                      shape=\"round\"\n                      color={Environment.getAppColor()}\n                      onClick={() => this.copyConfiguration(conf)}\n                    >\n                      {conf.stdName}\n                    </ion-button>\n                  </ion-col>\n                ))\n              : undefined}\n            {this.stdConfigurations\n              ? this.stdConfigurations.map((conf) => (\n                  <ion-col class=\"item\">\n                    <ion-button\n                      shape=\"round\"\n                      color=\"success\"\n                      onClick={() => this.copyConfiguration(conf)}\n                    >\n                      DP-{conf.stdName}\n                    </ion-button>\n                  </ion-col>\n                ))\n              : undefined}\n          </ion-row>\n          <app-form-item\n            label-tag=\"configuration-name\"\n            label-text=\"Configuration Name\"\n            value={this.diveConfig.stdName}\n            name=\"stdName\"\n            input-type=\"text\"\n            onFormItemChanged={(ev) => this.inputHandler(ev)}\n            validator={[\"required\"]}\n            onIsValid={(ev) => this.validateForm(\"name\", ev.detail)}\n          ></app-form-item>\n          <app-form-item\n            label-tag=\"max-depth\"\n            label-text=\"Max Depth (xxx)\"\n            labelReplace={{xxx: this.diveConfig.parameters.depthUnit}}\n            value={toString(this.diveConfig.maxDepth)}\n            name=\"maxDepth\"\n            input-type=\"number\"\n            onFormItemChanged={(ev) => this.inputHandler(ev)}\n            validator={[\n              \"required\",\n              {\n                name: \"minvalue\",\n                options: {min: 1},\n              },\n            ]}\n            onIsValid={(ev) => this.validateForm(\"depth\", ev.detail)}\n          ></app-form-item>\n          <app-form-item\n            label-tag=\"max-time\"\n            label-text=\"Max Time (min)\"\n            value={toString(this.diveConfig.maxTime)}\n            name=\"maxTime\"\n            input-type=\"number\"\n            onFormItemChanged={(ev) => this.inputHandler(ev)}\n            validator={[\n              \"required\",\n              {\n                name: \"minvalue\",\n                options: {min: 1},\n              },\n            ]}\n            onIsValid={(ev) => this.validateForm(\"time\", ev.detail)}\n          ></app-form-item>\n          <ion-list-header>\n            <my-transl\n              tag=\"tanks-configuration\"\n              text=\"Tank(s) Configuration\"\n              isLabel\n            />\n          </ion-list-header>\n          <ion-list-header>\n            <ion-grid class=\"ion-no-padding\">\n              <ion-row>\n                <ion-col>\n                  <my-transl tag=\"bottom\" text=\"Bottom\" isLabel />\n                </ion-col>\n                <ion-col size=\"1\">\n                  <ion-row class=\"ion-text-center\">\n                    <ion-button\n                      icon-only\n                      fill=\"clear\"\n                      color=\"primary\"\n                      onClick={(ev) =>\n                        this.addTank(this.screenWidth >= 500 ? ev : null, true)\n                      }\n                    >\n                      <ion-icon name=\"add-circle\"></ion-icon>\n                    </ion-button>\n                  </ion-row>\n                </ion-col>\n              </ion-row>\n            </ion-grid>\n          </ion-list-header>\n          {this.diveConfig.configuration.bottom.length > 0 ? (\n            <ion-grid>\n              <ion-row class=\"ion-text-center\">\n                {this.diveConfig.configuration.bottom.map((tank, i) => (\n                  <ion-col size=\"12\" size-sm>\n                    {tank.name ? (\n                      <ion-card>\n                        <ion-card-header class=\"ion-text-center\">\n                          {tank.name}\n                        </ion-card-header>\n                        <ion-card-content class=\"ion-text-center\">\n                          <p>{tank.gas.toString()}</p>\n                          <p>\n                            {tank.pressure}\n                            {DiveToolsService.pressUnit} / {tank.getGasVolume()}\n                            {DiveToolsService.volumeUnit}\n                          </p>\n                        </ion-card-content>\n                        <ion-grid class=\"ion-no-padding\">\n                          <ion-row>\n                            <ion-col>\n                              <ion-button\n                                icon-left\n                                fill=\"clear\"\n                                size=\"small\"\n                                onClick={(ev) =>\n                                  this.addTank(\n                                    this.screenWidth >= 500 ? ev : null,\n                                    true,\n                                    tank\n                                  )\n                                }\n                              >\n                                <ion-icon name=\"create\"></ion-icon>\n                                <my-transl tag=\"edit\" text=\"Edit\" />\n                              </ion-button>\n                            </ion-col>\n                            <ion-col>\n                              <ion-button\n                                icon-left\n                                fill=\"clear\"\n                                size=\"small\"\n                                onClick={() => this.deleteTank(true, i)}\n                              >\n                                <ion-icon name=\"trash\"></ion-icon>\n                                <my-transl tag=\"delete\" text=\"Delete\" />\n                              </ion-button>\n                            </ion-col>\n                          </ion-row>\n                        </ion-grid>\n                      </ion-card>\n                    ) : undefined}\n                  </ion-col>\n                ))}\n              </ion-row>\n            </ion-grid>\n          ) : undefined}\n\n          <ion-list-header>\n            <ion-grid class=\"ion-no-padding\">\n              <ion-row>\n                <ion-col>\n                  <my-transl tag=\"deco\" text=\"Deco\" isLabel />\n                </ion-col>\n                <ion-col size=\"1\">\n                  <ion-row class=\"ion-text-center\">\n                    <ion-button\n                      icon-only\n                      fill=\"clear\"\n                      color=\"primary\"\n                      onClick={(ev) =>\n                        this.addTank(this.screenWidth >= 500 ? ev : null, false)\n                      }\n                    >\n                      <ion-icon name=\"add-circle\"></ion-icon>\n                    </ion-button>\n                  </ion-row>\n                </ion-col>\n              </ion-row>\n            </ion-grid>\n          </ion-list-header>\n          {this.diveConfig.configuration.deco.length > 0 ? (\n            <ion-grid class=\"ion-no-padding\">\n              <ion-row class=\"ion-text-center\">\n                {this.diveConfig.configuration.deco.map((tank, i) => (\n                  <ion-col size=\"12\" size-sm>\n                    {tank.name ? (\n                      <ion-card>\n                        <ion-card-header class=\"ion-text-center\">\n                          {tank.name}\n                        </ion-card-header>\n                        <ion-card-content class=\"ion-text-center\">\n                          <p>{tank.gas.toString()}</p>\n                          <p>\n                            {tank.pressure}\n                            {DiveToolsService.pressUnit} / {tank.getGasVolume()}\n                            {DiveToolsService.volumeUnit}\n                          </p>\n                        </ion-card-content>\n                        <ion-grid class=\"ion-no-padding\">\n                          <ion-row>\n                            <ion-col>\n                              <ion-button\n                                icon-left\n                                fill=\"clear\"\n                                size=\"small\"\n                                onClick={(ev) =>\n                                  this.addTank(\n                                    this.screenWidth >= 500 ? ev : null,\n                                    false,\n                                    tank\n                                  )\n                                }\n                              >\n                                <ion-icon name=\"create\"></ion-icon>\n                                <my-transl tag=\"edit\" text=\"Edit\" />\n                              </ion-button>\n                            </ion-col>\n                            <ion-col>\n                              <ion-button\n                                icon-left\n                                fill=\"clear\"\n                                size=\"small\"\n                                onClick={() => this.deleteTank(false, i)}\n                              >\n                                <ion-icon name=\"trash\"></ion-icon>\n                                <my-transl tag=\"delete\" text=\"Delete\" />\n                              </ion-button>\n                            </ion-col>\n                          </ion-row>\n                        </ion-grid>\n                      </ion-card>\n                    ) : undefined}\n                  </ion-col>\n                ))}\n              </ion-row>\n            </ion-grid>\n          ) : undefined}\n          <app-decoplanner-settings\n            diveDataToShare={this.diveDataToShare}\n            onUpdateParamsEvent={(params) => this.updateParams(params)}\n          />\n        </ion-list>\n      </ion-content>,\n      <app-modal-footer\n        disableSave={!this.showSave}\n        onCancelEmit={() => this.close()}\n        onSaveEmit={() => this.save()}\n      />,\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]}