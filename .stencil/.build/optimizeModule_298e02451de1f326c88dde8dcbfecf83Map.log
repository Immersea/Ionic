{"version":3,"names":["MapDataImmerseaLocation","constructor","data","this","public","Object","keys","forEach","key","position","MapService","setPosition","ImmerseaLocation","id","order","displayName","photoURL","coverURL","address","lat","lon","getPosition","sections","region","area","shortDescription","en","topics","article","media","users","setAddress","getMediaArray","array","map","push","sortBy","ImmerseaFilterController","searchFilters","init","TranslationService","mapData","getMapDocs","mapDataSub$","BehaviorSubject","downloadMapData","collections","immerseaLocations","name","getTransl","icon","type","color","collection","undefined","collectionSub$","createMapData","filteredCollection","fieldsToQuery","query","sendMapData","next","DatabaseService","getDocument","MAPDATACOLLECTION","then","IMMERSEALOCATIONSCOLLECTION","ImmerseaLocationsService","getMapData","refreshFilterDocuments","filterDocuments","filters","resetDocumentsQuery","find","item","filter","async","collectionId","length","field","each","document","toLowerCase","search","getCollectionArray","getSortedLocations","collectionArray","orderBy","section","items","value","ImmerseaFilterService","ImmerseaLocationsController","immerseaLocationsList","immerseaLocationsList$","subscribe","result","presentLocationUpdate","RouterService","openModal","locationId","presentLocationDetails","getLocation","location","updateLocation","userId","addDocument","updateDocument","deleteLocation","confirm","alertController","create","header","message","buttons","text","role","handler","deleteDocument","present","updatePhotoURL","uid","file","StorageService","getSections","tag","getTopics"],"sources":["src/interfaces/immersea/immerseaLocation.ts","src/services/immersea/db-filter.ts","src/services/immersea/immerseaLocations.ts"],"sourcesContent":["import {ArticleMultilanguage, TextMultilanguage} from \"../interfaces\";\nimport {Media} from \"../common/media/media\";\nimport {LocationIQ, MapService, Position} from \"../../services/common/map\";\nimport {sortBy} from \"lodash\";\n\nexport class MapDataImmerseaLocation {\n  id: string;\n  order: {[sectionId: string]: number};\n  public: boolean = false;\n  displayName: string;\n  photoURL: string;\n  coverURL: string;\n  position: Position;\n  sections: string[];\n  region: string;\n  area: string;\n  topics: string[];\n  shortDescription: TextMultilanguage;\n\n  constructor(data) {\n    Object.keys(data).forEach((key) => {\n      if (key == \"position\") {\n        this.position = null;\n        if (data.position)\n          this.position = MapService.setPosition(data.position);\n      } else {\n        this[key] = data[key];\n      }\n    });\n  }\n}\n\nexport class ImmerseaLocation {\n  id: string;\n  order: {[sectionId: string]: number};\n  public: boolean = false;\n  displayName: string;\n  photoURL: string;\n  coverURL: string;\n  position: Position;\n  address: LocationIQ;\n  sections: string[]; //getSections()\n  region: string; //Sicilia Tirrenica, Sicilia ...\n  area: string; //Capo san vito, etc.\n  topics: string[]; //getTopics()\n  shortDescription: TextMultilanguage; //text multilanguage\n  article: ArticleMultilanguage; //editorjs multilanguage\n  media: {[id: string]: Media};\n  users: {\n    [id: string]: string[]; //[\"owner\", \"editor\", etc.]\n  };\n\n  constructor(data?) {\n    this.id = data && data.id ? data.id : null;\n    this.order = data && data.order ? data.order : {};\n    this.public = data && data.public ? data.public : false;\n    this.displayName = data && data.displayName ? data.displayName : null;\n    this.photoURL = data && data.photoURL ? data.photoURL : null;\n    this.coverURL = data && data.coverURL ? data.coverURL : null;\n    this.position = null;\n    if (data && data.position) {\n      if (data.position) this.position = MapService.setPosition(data.position);\n    } else if (this.address && this.address.lat && this.address.lon) {\n      //get position from address\n      this.position = MapService.getPosition(\n        this.address.lat,\n        this.address.lon\n      );\n    }\n    this.sections = data && data.sections ? data.sections : [];\n    this.region = data && data.region ? data.region : null;\n    this.area = data && data.area ? data.area : null;\n    this.shortDescription =\n      data && data.shortDescription ? data.shortDescription : {en: \"\"};\n    this.topics = data && data.topics ? data.topics : [];\n    this.address = data && data.address ? data.address : null;\n    this.article = data && data.article ? data.article : {};\n    this.media = data && data.media ? data.media : {};\n    this.users = {};\n    if (data && data.users) {\n      Object.keys(data.users).forEach((key) => {\n        this.users[key] = data.users[key];\n      });\n    }\n  }\n\n  setAddress(address: LocationIQ) {\n    this.address = address;\n  }\n\n  getMediaArray() {\n    let array = [];\n    Object.keys(this.media).map((id) => {\n      array.push(this.media[id]);\n    });\n    return sortBy(array, [\"type\", \"order\", \"title\"]);\n  }\n}\n","import {DatabaseService, MAPDATACOLLECTION} from \"../common/database\";\nimport {SearchTag, CollectionGroup} from \"../../interfaces/interfaces\";\nimport {TranslationService} from \"../common/translations\";\nimport {each, orderBy, sortBy} from \"lodash\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {\n  IMMERSEALOCATIONSCOLLECTION,\n  ImmerseaLocationsService,\n} from \"./immerseaLocations\";\n\nclass ImmerseaFilterController {\n  database: any;\n  mapData: CollectionGroup;\n  user: any;\n  searchFilters: any[] = [];\n  mapDataSub$: BehaviorSubject<CollectionGroup>;\n\n  async init() {\n    await TranslationService.init();\n    this.mapData = this.getMapDocs();\n    this.mapDataSub$ = new BehaviorSubject(this.mapData);\n    this.downloadMapData();\n  }\n\n  getMapDocs(): CollectionGroup {\n    let collections = {\n      immerseaLocations: {\n        name: TranslationService.getTransl(\"location\", \"Location\"),\n        icon: {\n          type: \"ionicon\",\n          name: \"location\",\n          color: \"immersea\",\n        },\n        collection: undefined,\n        collectionSub$: new BehaviorSubject(<any>[]),\n        createMapData: null,\n        filteredCollection: {},\n        fieldsToQuery: [\"displayName\"],\n        query: true,\n      },\n    };\n\n    return collections;\n  }\n\n  sendMapData() {\n    this.mapDataSub$ ? this.mapDataSub$.next(this.mapData) : undefined;\n  }\n\n  //updates collections of map data from database - updated at each system update from app-root\n  downloadMapData() {\n    //create all promises to get collection documents\n    if (this.mapData)\n      Object.keys(this.mapData).map((key) => {\n        DatabaseService.getDocument(MAPDATACOLLECTION, key).then(\n          (collection) => {\n            switch (key) {\n              case IMMERSEALOCATIONSCOLLECTION:\n                collection = ImmerseaLocationsService.getMapData(collection);\n                break;\n            }\n            this.refreshFilterDocuments(key, collection);\n          }\n        );\n      });\n  }\n\n  filterDocuments(filters: SearchTag[] = []) {\n    //check if there is any query filter\n    //reset query to all collections\n    this.resetDocumentsQuery(\n      filters.find((item) => item.type == \"filter\") == undefined\n    );\n    this.searchFilters = [];\n    if (filters) {\n      filters.forEach((filter) => {\n        if (filter.type == \"filter\") {\n          //query collections\n          this.mapData[filter.name].query = true;\n        } else {\n          this.searchFilters.push(filter.name);\n        }\n      });\n      Object.keys(this.mapData).map(async (key) => {\n        this.refreshFilterDocuments(key);\n      });\n    }\n  }\n\n  //refresh documents after each update of the data\n  refreshFilterDocuments(collectionId, data?) {\n    const collection = this.mapData[collectionId];\n    data ? (collection.collection = data) : undefined;\n    if (collection.query) {\n      if (this.searchFilters.length > 0) {\n        collection.filteredCollection = {};\n        collection.fieldsToQuery.forEach((field) => {\n          each(collection.collection, (document, key) => {\n            //search field inside document and filter\n            this.searchFilters.forEach((filter) => {\n              //string filters\n              if (field == \"displayName\" || field == \"email\") {\n                if (\n                  document[field] &&\n                  document[field].toLowerCase().search(filter.toLowerCase()) !=\n                    -1\n                ) {\n                  collection.filteredCollection[key] = document;\n                }\n              }\n            });\n          });\n        });\n      } else {\n        collection.filteredCollection = collection.collection;\n      }\n    } else {\n      //reset previous search\n      collection.filteredCollection = {};\n    }\n    this.sendMapData();\n  }\n\n  getCollectionArray(collection): any {\n    if (\n      this.mapData &&\n      this.mapData[collection] &&\n      this.mapData[collection].collection\n    ) {\n      if (collection == IMMERSEALOCATIONSCOLLECTION) {\n        return this.getSortedLocations();\n      } else {\n        let collectionArray = [];\n        Object.keys(this.mapData[collection].collection).forEach((id) => {\n          let item = this.mapData[collection].collection[id];\n          item.id = id;\n          collectionArray.push(item);\n        });\n        collectionArray = orderBy(collectionArray, \"displayName\");\n        return collectionArray;\n      }\n    } else {\n      return [];\n    }\n  }\n\n  getSortedLocations(): any {\n    if (\n      this.mapData &&\n      this.mapData[\"immerseaLocations\"] &&\n      this.mapData[\"immerseaLocations\"].collection\n    ) {\n      const sections = {};\n      const collection = this.mapData[\"immerseaLocations\"].collection;\n      Object.keys(collection).forEach((id) => {\n        const item = collection[id];\n        item.sections.map((section) => {\n          if (!sections[section]) sections[section] = {};\n          sections[section][item.id] = item;\n        });\n      });\n      //order items in array\n      Object.keys(sections).forEach((section) => {\n        const items = sections[section];\n        const array = [];\n        Object.keys(items).forEach((id) => {\n          array.push(items[id]);\n        });\n        //overwrite with array\n        sections[section] = sortBy(array, \"order\");\n      });\n      return sections;\n    }\n  }\n\n  resetDocumentsQuery(value: boolean) {\n    this.mapData = each(this.mapData, (collection) => {\n      collection.query = value;\n    });\n  }\n\n  /*async filterCollections(filters: SearchTag[]) {\n    //check if there is any query filter\n    //reset query to all collections\n    this.resetCollectionsQuery(\n      filters.find(item => item.type == \"filter\") == undefined\n    );\n    var searchFilters = [];\n    filters.forEach(filter => {\n      if (filter.type == \"filter\") {\n        //query collections\n        this.collectionsToQuery[filter.name].query = true;\n      } else {\n        searchFilters.push(filter.name);\n      }\n    });\n    var snapshots = [];\n    //filter collections\n    each(this.collectionsToQuery, collection => {\n      if (collection.query) {\n        if (searchFilters.length > 0) {\n          collection.fieldsToQuery.forEach(field => {\n            searchFilters.forEach(filter => {\n              const snapshot = collection.collection\n                .orderBy(field)\n                .startAt(filter)\n                .endAt(\"\\uf8ff\")\n                .get();\n              snapshots.push(snapshot);\n            });\n          });\n        } else {\n          const snapshot = collection.collection.get();\n          snapshots.push(snapshot);\n        }\n      }\n    });\n    var queryDB = await Promise.all(snapshots);\n    var queryResults = {};\n    queryDB.forEach(snapshot => {\n      snapshot.forEach(doc => {\n        queryResults[doc.id] = doc.data();\n      });\n    });\n    return console.log(\"queryResults\", queryResults);\n  }\n\n  resetCollectionsQuery(value: boolean) {\n    this.collectionsToQuery = each(this.collectionsToQuery, collection => {\n      collection.query = value;\n    });\n  }*/\n}\n\nexport const ImmerseaFilterService = new ImmerseaFilterController();\n","import {StorageService} from \"../common/storage\";\nimport {alertController} from \"@ionic/core\";\nimport {DatabaseService} from \"../common/database\";\n\nimport {TranslationService} from \"../common/translations\";\nimport {RouterService} from \"../common/router\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {\n  ImmerseaLocation,\n  MapDataImmerseaLocation,\n} from \"../../interfaces/immersea/immerseaLocation\";\nimport {ImmerseaFilterService} from \"./db-filter\";\n\nexport const IMMERSEALOCATIONSCOLLECTION = \"immerseaLocations\";\n\nexport class ImmerseaLocationsController {\n  immerseaLocationsList: {[section: string]: MapDataImmerseaLocation[]} = {};\n  immerseaLocationsList$: BehaviorSubject<{\n    [section: string]: MapDataImmerseaLocation[];\n  }> = new BehaviorSubject({});\n\n  init() {\n    ImmerseaFilterService.mapDataSub$.subscribe(() => {\n      const collection = ImmerseaFilterService.getCollectionArray(\n        IMMERSEALOCATIONSCOLLECTION\n      );\n      if (collection && Object.keys(collection).length > 0) {\n        this.immerseaLocationsList = collection;\n        this.immerseaLocationsList$.next(this.immerseaLocationsList);\n      }\n    });\n  }\n\n  getMapData(collection) {\n    const result = {};\n    if (collection && Object.keys(collection))\n      Object.keys(collection).forEach((item) => {\n        result[item] = new MapDataImmerseaLocation(collection[item]);\n      });\n    return result;\n  }\n\n  async presentLocationUpdate(id?) {\n    await RouterService.openModal(\"modal-immersea-location-update\", {\n      locationId: id,\n    });\n  }\n\n  async presentLocationDetails(id) {\n    RouterService.push(\"/location/\" + id, \"forward\");\n  }\n\n  async getLocation(id) {\n    const location = await DatabaseService.getDocument(\n      IMMERSEALOCATIONSCOLLECTION,\n      id\n    );\n    return new ImmerseaLocation(location);\n  }\n\n  async updateLocation(id, location, userId) {\n    if (!id) {\n      //set owner of new site\n      location.users[userId] = [\"owner\"];\n      await DatabaseService.addDocument(IMMERSEALOCATIONSCOLLECTION, location);\n    } else {\n      await DatabaseService.updateDocument(\n        IMMERSEALOCATIONSCOLLECTION,\n        id,\n        location\n      );\n    }\n    return true;\n  }\n\n  async deleteLocation(id) {\n    const confirm = await alertController.create({\n      header: TranslationService.getTransl(\n        \"delete-immersea-location-header\",\n        \"Delete Location?\"\n      ),\n      message: TranslationService.getTransl(\n        \"delete-immersea-location-message\",\n        \"This location will be deleted! Are you sure?\"\n      ),\n      buttons: [\n        {\n          text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n          role: \"cancel\",\n          handler: () => {},\n        },\n        {\n          text: TranslationService.getTransl(\"ok\", \"OK\"),\n          handler: () => {\n            DatabaseService.deleteDocument(IMMERSEALOCATIONSCOLLECTION, id);\n            RouterService.push(\"/\", \"root\");\n          },\n        },\n      ],\n    });\n    confirm.present();\n  }\n\n  async updatePhotoURL(type: string, uid: string, file: any) {\n    return StorageService.updatePhotoURL(\n      IMMERSEALOCATIONSCOLLECTION,\n      type,\n      uid,\n      file\n    );\n  }\n\n  getSections() {\n    return [\n      {\n        tag: \"nature\",\n        text: \"Nature\",\n        icon: {\n          type: \"ionicon\",\n          name: \"fish\",\n          color: \"immersea-culture\",\n        },\n      },\n      {\n        tag: \"culture\",\n        text: \"Culture\",\n        icon: {\n          type: \"mapicon\",\n          name: \"map-icon-museum\",\n          color: \"immersea-community\",\n        },\n      },\n      {\n        tag: \"sustainability\",\n        text: \"Sustainability\",\n        icon: {\n          type: \"ionicon\",\n          name: \"earth\",\n          color: \"immersea\",\n        },\n      },\n      {\n        tag: \"insights\",\n        text: \"Insights\",\n        icon: {\n          type: \"ionicon\",\n          name: \"book\",\n          color: \"immersea\",\n        },\n      },\n    ];\n  }\n\n  getTopics() {\n    return [\n      {tag: \"elements_history\", text: \"Elements of history\"},\n      {tag: \"uai\", text: \"Underwater Archaeological Itineraries\"},\n      {tag: \"museums\", text: \"Museums\"},\n      {\n        tag: \"archeo_parks\",\n        text: \"Archaeological parks and cultural curiosities\",\n      },\n    ];\n  }\n}\nexport const ImmerseaLocationsService = new ImmerseaLocationsController();\n"],"mappings":"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","ignoreList":[]}