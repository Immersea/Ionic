{"version":3,"names":["appUserManageNotificationsCss","AppUserManageNotificationsStyle0","AppUserManageNotifications","this","notificationsArray","topicsArray","componentWillLoad","deviceToken","NotificationsService","getLocalNotificationToken","updateNotifications","notificationDoc","getUserTokensDoc","loadNotifications","topics","Object","keys","forEach","devicetoken","map","topicId","activeOnAllDevices","token","activeTopic","isBoolean","push","id","activeOnDevice","name","getTopicName","orderBy","info","updateView","console","log","changeTopicSubscription","topic","removeFromDevice","text","TranslationService","getTransl","handler","async","SystemService","presentLoading","unsubscribeUserDeviceFromTopic","then","data","dismissLoading","catch","err","showErrors","addToDevice","subscribeUserDeviceToTopic","removeFromAllDevices","unsubscribeUserFromTopic","addToAllDevices","subscribeUserToTopic","actionSheet","actionSheetController","create","header","buttons","role","deleteUserFromTopic","present","errors","presentAlertError","JSON","stringify","render","h","key","length","undefined","device","model","operatingSystem","osVersion","button","detail","onClick","slot","fill","color"],"sources":["src/components/common/app/user/app-user-manage-notifications/app-user-manage-notifications.scss?tag=app-user-manage-notifications","src/components/common/app/user/app-user-manage-notifications/app-user-manage-notifications.tsx"],"sourcesContent":["app-user-manage-notifications {\n  width: 100%;\n  /* Component styles go here */\n}\n","import {Component, h, State} from \"@stencil/core\";\nimport {NotificationsService} from \"../../../../../services/common/notifications\";\nimport {\n  TopicsList,\n  NotificationDoc,\n} from \"../../../../../interfaces/common/notifications/notifications\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {actionSheetController} from \"@ionic/core\";\nimport {SystemService} from \"../../../../../services/common/system\";\nimport {isBoolean, orderBy} from \"lodash\";\n\n@Component({\n  tag: \"app-user-manage-notifications\",\n  styleUrl: \"app-user-manage-notifications.scss\",\n})\nexport class AppUserManageNotifications {\n  topics: TopicsList;\n  notificationDoc: NotificationDoc;\n  deviceToken: string;\n  notificationsArray = [];\n  topicsArray: {\n    id: string;\n    name: string;\n    activeOnDevice: boolean;\n    activeOnAllDevices: boolean;\n  }[] = [];\n  @State() updateView = false;\n\n  async componentWillLoad() {\n    this.deviceToken = await NotificationsService.getLocalNotificationToken();\n    this.updateNotifications();\n  }\n\n  async updateNotifications() {\n    this.notificationDoc = await NotificationsService.getUserTokensDoc();\n    this.loadNotifications();\n  }\n\n  async loadNotifications() {\n    if (this.notificationDoc && this.notificationDoc[this.deviceToken]) {\n      this.topics = this.notificationDoc[this.deviceToken].topics;\n    } else {\n      this.topics = null;\n    }\n    this.notificationsArray = [];\n    Object.keys(this.notificationDoc).forEach((devicetoken) => {\n      const notificationDoc = this.notificationDoc[devicetoken];\n      let topicsArray = [];\n      if (notificationDoc.topics) {\n        Object.keys(notificationDoc.topics).map((topicId) => {\n          //search same topic on all other devices and check if active on all\n          let activeOnAllDevices = true;\n          Object.keys(this.notificationDoc).map((token) => {\n            const activeTopic = this.notificationDoc[token].topics[topicId];\n            if (isBoolean(activeTopic)) {\n              activeOnAllDevices = activeOnAllDevices && activeTopic;\n            }\n          });\n          topicsArray.push({\n            id: topicId,\n            devicetoken: devicetoken,\n            activeOnDevice: this.topics ? this.topics[topicId] : false,\n            activeOnAllDevices: activeOnAllDevices,\n            name: this.getTopicName(topicId),\n          });\n        });\n        topicsArray = orderBy(topicsArray, \"name\");\n      }\n      this.notificationsArray.push({\n        devicetoken: devicetoken,\n        info: notificationDoc.info,\n        topics: topicsArray,\n      });\n    });\n    this.notificationsArray = orderBy(this.notificationsArray, \"devicetoken\");\n    this.updateView = !this.updateView;\n  }\n\n  getTopicName(topicId: string) {\n    console.log(\"getTopicName\", topicId);\n    /*const array = topicId.split(\"_\");\n    let name = null;\n    let beachKioskName = null;\n    const collection = array[0];\n    const area = array[array.length - 1];\n    if (area === \"bookings\" || area === \"orders\") {\n      //get kiosk or beach name\n      const nameArray = [];\n      for (let i = 1; i < array.length - 1; i++) {\n        nameArray.push(array[i]);\n      }\n      beachKioskName = nameArray.join(\"-\");\n    }\n\n    return name;*/\n  }\n\n  async changeTopicSubscription(topic) {\n    const removeFromDevice = {\n      text: TranslationService.getTransl(\n        \"remove-notification-from-device\",\n        \"Remove from this device only\"\n      ),\n      handler: async () => {\n        SystemService.presentLoading(\"updating\");\n        NotificationsService.unsubscribeUserDeviceFromTopic(\n          topic.id,\n          topic.deviceToken\n        )\n          .then((data) => {\n            this.notificationDoc = data;\n            this.loadNotifications();\n            SystemService.dismissLoading();\n          })\n          .catch((err) => {\n            this.showErrors(err);\n            this.updateNotifications();\n            SystemService.dismissLoading();\n          });\n        return true;\n      },\n    };\n    const addToDevice = {\n      text: TranslationService.getTransl(\n        \"add-notification-to-device\",\n        \"Add to this device only\"\n      ),\n      handler: async () => {\n        SystemService.presentLoading(\"updating\");\n        NotificationsService.subscribeUserDeviceToTopic(\n          topic.id,\n          topic.deviceToken\n        )\n          .then((data) => {\n            this.notificationDoc = data;\n            this.loadNotifications();\n            SystemService.dismissLoading();\n          })\n          .catch((err) => {\n            this.showErrors(err);\n            this.updateNotifications();\n            SystemService.dismissLoading();\n          });\n        return true;\n      },\n    };\n    const removeFromAllDevices = {\n      text: TranslationService.getTransl(\n        \"remove-notification-from-all-devices\",\n        \"Remove from all my devices\"\n      ),\n      handler: async () => {\n        SystemService.presentLoading(\"updating\");\n        NotificationsService.unsubscribeUserFromTopic(topic.id)\n          .then((data) => {\n            this.notificationDoc = data;\n            this.loadNotifications();\n            SystemService.dismissLoading();\n          })\n          .catch((err) => {\n            this.showErrors(err);\n            this.updateNotifications();\n            SystemService.dismissLoading();\n          });\n        return true;\n      },\n    };\n    const addToAllDevices = {\n      text: TranslationService.getTransl(\n        \"add-notification-to-all-devices\",\n        \"Add to all my devices\"\n      ),\n      handler: async () => {\n        SystemService.presentLoading(\"updating\");\n        NotificationsService.subscribeUserToTopic(topic.id)\n          .then((data) => {\n            this.notificationDoc = data;\n            this.loadNotifications();\n            SystemService.dismissLoading();\n          })\n          .catch((err) => {\n            this.showErrors(err);\n            this.updateNotifications();\n            SystemService.dismissLoading();\n          });\n        return true;\n      },\n    };\n    const actionSheet = await actionSheetController.create({\n      header: topic.name,\n      buttons: [\n        topic.activeOnDevice ? removeFromDevice : addToDevice,\n        topic.activeOnAllDevices ? removeFromAllDevices : addToAllDevices,\n        {\n          text: TranslationService.getTransl(\"delete\", \"Delete\"),\n          role: \"destructive\",\n          handler: async () => {\n            NotificationsService.deleteUserFromTopic(topic.id)\n              .then((data) => {\n                this.notificationDoc = data;\n                this.loadNotifications();\n              })\n              .catch((err) => {\n                this.showErrors(err);\n                this.updateNotifications();\n              });\n            return true;\n          },\n        },\n        {\n          text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n          role: \"cancel\",\n        },\n      ],\n    });\n    await actionSheet.present();\n  }\n\n  async showErrors(errors) {\n    SystemService.presentAlertError(JSON.stringify(errors));\n  }\n\n  render() {\n    return (\n      <div>\n        {this.notificationsArray.length == 0 ? (\n          <ion-item>No notifications set</ion-item>\n        ) : undefined}\n\n        {this.notificationsArray.map((device) => (\n          <ion-item-group>\n            <ion-item-divider>\n              <ion-label>\n                {device.info.model +\n                  \": \" +\n                  device.info.operatingSystem +\n                  \"-\" +\n                  device.info.osVersion +\n                  (device.devicetoken == this.deviceToken\n                    ? \" (this device)\"\n                    : \"\")}\n              </ion-label>\n            </ion-item-divider>\n\n            {device.topics.length == 0 ? (\n              <ion-item>No notifications for this device</ion-item>\n            ) : undefined}\n            {device.topics.map((topic) => (\n              <ion-item\n                button\n                detail={false}\n                onClick={() => this.changeTopicSubscription(topic)}\n              >\n                <ion-label>{topic.name}</ion-label>\n                <ion-button\n                  slot=\"end\"\n                  icon-only\n                  fill=\"clear\"\n                  color={topic.activeOnDevice ? \"success\" : \"danger\"}\n                >\n                  <ion-icon\n                    name={topic.activeOnDevice ? \"checkmark\" : \"close\"}\n                  />\n                </ion-button>\n                <ion-button\n                  slot=\"end\"\n                  icon-only\n                  fill=\"clear\"\n                  color={topic.activeOnAllDevices ? \"success\" : \"danger\"}\n                >\n                  <ion-icon\n                    name={topic.activeOnAllDevices ? \"checkmark-done\" : \"close\"}\n                  />\n                </ion-button>\n              </ion-item>\n            ))}\n          </ion-item-group>\n        ))}\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}