{"version":3,"names":["popoverGasBlenderCss","PopoverGasBlenderStyle0","PopoverGasBlender","this","maxPressure","DiveToolsService","isMetric","maxTemperature","GasSupply","Cylinder","Gas","componentWillLoad","hasTrimixlicence","UserService","checkLicence","gasProp","getFO2","gas","setForm","updateStdGasList","componentDidLoad","scrollGas","el","querySelector","disconnectedCallback","save","popoverController","dismiss","form","getForm","stdGases","isStandardGas","i","n","stdGasesList","forEach","selected","mMix","O2","He","push","getGas","setTimeout","width","scrollWidth","clientWidth","pagination","scrollLeft","selectStdGas","setMix","round","fO2","fHe","fromDepth","ppO2","units","inputHandler","event","detail","name","value","blurHandler","updateGas","setPressure","toNumber","bar","setTemperature","temp","input","setFO2","o2","setFHe","he","render","h","Host","key","class","size","onFormItemChanged","ev","onFormItemBlur","validator","options","min","max","onClick","appendText","pressUnit","id","map","shape","color","GasBlenderService","getGasName","expand","fill","tag","text"],"sources":["src/components/udive/popovers/popover-gas-blender/popover-gas-blender.scss?tag=popover-gas-blender","src/components/udive/popovers/popover-gas-blender/popover-gas-blender.tsx"],"sourcesContent":["popover-gas-blender {\n  /* Component styles go here */\n  .scrollx {\n    display: flex;\n    flex-wrap: nowrap;\n    overflow-x: auto;\n\n    .item {\n      flex: 0 0 0 0;\n    }\n\n    ::-webkit-scrollbar {\n      display: none;\n    }\n  }\n}\n","import {Component, h, Host, Prop, Element, State} from \"@stencil/core\";\n\nimport {Gas} from \"../../../../interfaces/udive/planner/gas\";\nimport {Cylinder} from \"../../../../interfaces/udive/planner/cylinder\";\nimport {GasSupply} from \"../../../../interfaces/udive/planner/gas-supply\";\nimport {GasModel} from \"../../../../interfaces/udive/planner/gas-model\";\nimport {GasBlenderService} from \"../../../../services/udive/planner/gas-blender\";\nimport {UserService} from \"../../../../services/common/user\";\nimport {DiveToolsService} from \"../../../../services/udive/planner/dive-tools\";\nimport {popoverController} from \"@ionic/core\";\nimport {round, toNumber} from \"lodash\";\n\n@Component({\n  tag: \"popover-gas-blender\",\n  styleUrl: \"popover-gas-blender.scss\",\n})\nexport class PopoverGasBlender {\n  @Element() el: HTMLElement;\n\n  @Prop() gasProp: any;\n  @Prop() stdGasesList: Array<GasModel>;\n  @Prop() showBar: boolean = true;\n  @Prop() hasTrimixlicence: boolean = true;\n\n  scrollGas: HTMLElement;\n\n  @State() gas: GasSupply = new GasSupply(\n    new Cylinder(10, DiveToolsService.isMetric() ? 200 : 3000),\n    new Gas(0.21, 0),\n    DiveToolsService.isMetric() ? 200 : 3000,\n    false,\n    DiveToolsService.isMetric() ? 20 : 68\n  );\n  @State() form: any;\n  stdGases: Array<any>;\n\n  maxPressure = DiveToolsService.isMetric() ? 300 : 4300;\n  maxTemperature = DiveToolsService.isMetric() ? 60 : 140;\n\n  async componentWillLoad() {\n    this.hasTrimixlicence = await UserService.checkLicence(\"trimix\");\n    if (this.gasProp && this.gasProp.getFO2()) {\n      this.gas = this.gasProp;\n    }\n    this.setForm();\n    this.updateStdGasList();\n  }\n\n  componentDidLoad() {\n    this.scrollGas = this.el.querySelector(\"#scrollGas\");\n    this.updateStdGasList();\n  }\n\n  disconnectedCallback() {\n    //check valid gases\n    this.setForm();\n  }\n\n  save() {\n    popoverController.dismiss(this.gas);\n  }\n\n  async setForm() {\n    this.form = this.gas.getForm();\n    this.hasTrimixlicence = await UserService.checkLicence(\"trimix\");\n  }\n\n  updateStdGasList() {\n    //create gas list\n    this.stdGases = [];\n    var isStandardGas = false;\n    var i = 0;\n    var n = 0;\n    this.stdGasesList.forEach((gas) => {\n      i++;\n      let selected =\n        this.gas.mMix.O2 === gas.O2 && this.gas.mMix.He === gas.He\n          ? true\n          : false;\n      if (selected) {\n        isStandardGas = true;\n        n = i;\n      }\n      this.stdGases.push({\n        selected: selected,\n        gas: gas.getGas(),\n      });\n    });\n    setTimeout(() => {\n      if (isStandardGas && this.scrollGas) {\n        //scroll list to the left at the selected gas\n        let width = this.scrollGas.scrollWidth;\n        let clientWidth = this.scrollGas.clientWidth;\n        let pagination = i / (width / clientWidth);\n        n = n - pagination;\n        n = n < 0 ? 0 : n;\n        this.scrollGas.scrollLeft = ((width * n) / i) * 1.15;\n      }\n    });\n  }\n\n  selectStdGas(gas) {\n    if (!this.hasTrimixlicence && gas.He > 0) {\n      UserService.checkLicence(\"trimix\", true);\n      return;\n    }\n    this.gas.setMix(\n      new Gas(\n        round(gas.fO2, 3),\n        round(gas.fHe, 3),\n        gas.fromDepth,\n        gas.ppO2,\n        gas.units\n      )\n    );\n    this.setForm();\n    this.updateStdGasList();\n  }\n\n  inputHandler(event: any) {\n    this.form[event.detail.name] = event.detail.value;\n  }\n\n  blurHandler(event: any) {\n    this.updateGas(event.detail.name);\n    if (event.detail.name == \"bar\") {\n      this.gas.setPressure(\n        toNumber(this.form.bar) > this.maxPressure\n          ? this.maxPressure\n          : toNumber(this.form.bar)\n      );\n    } else if (event.detail.name == \"temp\") {\n      this.gas.setTemperature(\n        toNumber(this.form.temp) > this.maxTemperature\n          ? this.maxTemperature\n          : toNumber(this.form.temp)\n      );\n    }\n    this.setForm();\n  }\n\n  updateGas(input: string) {\n    if (input == \"o2\") {\n      this.gas.mMix.setFO2(round(toNumber(this.form.o2), 2) / 100);\n    } else if (input == \"he\") {\n      this.gas.mMix.setFHe(round(toNumber(this.form.he), 2) / 100);\n    } else if (input == \"bar\") {\n      this.gas.setPressure(toNumber(this.form.bar));\n    } else if (input == \"temp\") {\n      this.gas.setTemperature(toNumber(this.form.temp));\n    }\n    this.updateStdGasList();\n  }\n\n  render() {\n    return (\n      <Host>\n        <ion-list>\n          <ion-grid class=\"ion-no-padding\">\n            <ion-row>\n              <ion-col size=\"6\">\n                <app-form-item\n                  label-tag=\"o2\"\n                  label-text=\"O2\"\n                  value={this.form.o2}\n                  name=\"o2\"\n                  input-type=\"number\"\n                  onFormItemChanged={(ev) => this.inputHandler(ev)}\n                  onFormItemBlur={(ev) => this.blurHandler(ev)}\n                  validator={[\n                    \"required\",\n                    {\n                      name: \"minmaxvalue\",\n                      options: {min: 0, max: 100 - this.form.he},\n                    },\n                  ]}\n                ></app-form-item>\n              </ion-col>\n              <ion-col size=\"6\">\n                {this.hasTrimixlicence ? (\n                  <app-form-item\n                    label-text=\"He\"\n                    value={this.form.he}\n                    name=\"he\"\n                    input-type=\"number\"\n                    onFormItemChanged={(ev) => this.inputHandler(ev)}\n                    onFormItemBlur={(ev) => this.blurHandler(ev)}\n                    validator={[\n                      \"required\",\n                      {\n                        name: \"minmaxvalue\",\n                        options: {min: 0, max: 100 - this.form.o2},\n                      },\n                    ]}\n                  ></app-form-item>\n                ) : (\n                  <app-form-item\n                    label-text=\"He\"\n                    value={this.form.he}\n                    onClick={() => UserService.checkLicence(\"trimix\", true)}\n                  ></app-form-item>\n                )}\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col size=\"6\">\n                <app-form-item\n                  label-tag=\"pressure\"\n                  label-text=\"Pressure\"\n                  appendText={\" (\" + DiveToolsService.pressUnit + \")\"}\n                  value={this.form.bar}\n                  name=\"bar\"\n                  input-type=\"number\"\n                  onFormItemChanged={(ev) => this.inputHandler(ev)}\n                  onFormItemBlur={(ev) => this.blurHandler(ev)}\n                  validator={[\n                    \"required\",\n                    {\n                      name: \"minmaxvalue\",\n                      options: {min: 1, max: this.maxPressure},\n                    },\n                  ]}\n                ></app-form-item>\n              </ion-col>\n              <ion-col size=\"6\">\n                <app-form-item\n                  label-tag=\"temperature\"\n                  label-text=\"Temperature\"\n                  appendText={\n                    \" (\" + (DiveToolsService.isMetric() ? \"°C\" : \"°F\") + \")\"\n                  }\n                  value={this.form.temp}\n                  name=\"temp\"\n                  input-type=\"number\"\n                  onFormItemChanged={(ev) => this.inputHandler(ev)}\n                  onFormItemBlur={(ev) => this.blurHandler(ev)}\n                  validator={[\n                    \"required\",\n                    {\n                      name: \"minmaxvalue\",\n                      options: {min: 0, max: this.maxTemperature},\n                    },\n                  ]}\n                ></app-form-item>\n              </ion-col>\n            </ion-row>\n\n            <ion-row class=\"scrollx\" id=\"scrollGas\">\n              {this.stdGases.map((gas) => (\n                <ion-col class=\"item\">\n                  <ion-button\n                    shape=\"round\"\n                    color={gas.selected ? \"secondary\" : \"primary\"}\n                    onClick={() => this.selectStdGas(gas.gas)}\n                  >\n                    {GasBlenderService.getGasName(gas.gas)}\n                  </ion-button>\n                </ion-col>\n              ))}\n            </ion-row>\n            <ion-row>\n              <ion-col class=\"item\">\n                <ion-button\n                  expand=\"block\"\n                  fill=\"outline\"\n                  size=\"small\"\n                  color=\"success\"\n                  onClick={() => this.save()}\n                >\n                  <my-transl tag=\"save\" text=\"Save\" />\n                </ion-button>\n              </ion-col>\n            </ion-row>\n          </ion-grid>\n        </ion-list>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}