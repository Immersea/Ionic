{"version":3,"names":["appUploadCoversCss","AppUploadCoversStyle0","AppUploadCovers","componentWillLoad","this","item","photoURL","coverURL","updatePhotoURL","type","options","aspectRatio","maxDimensions","round","uploadModal","RouterService","openModal","onDidDismiss","then","async","canvasImg","data","uploading","toBlob","blob","update","uploadImage","coverUploaded","emit","url","present","collection","USERPROFILECOLLECTION","UserService","id","DIVESITESCOLLECTION","DiveSitesService","DIVECENTERSSCOLLECTION","DivingCentersService","DIVECOMMUNITIESCOLLECTION","DiveCommunitiesService","DIVESCHOOLSSCOLLECTION","DivingSchoolsService","SERVICECENTERSCOLLECTION","ServiceCentersService","SYSTEMCOLLECTION","StorageService","render","h","undefined","class","style","backgroundImage","fill","onClick","disabled","name","color","tag","text","isLabel","showPhotoURL","src"],"sources":["src/components/common/app/common/app-upload-covers/app-upload-covers.scss?tag=app-upload-covers","src/components/common/app/common/app-upload-covers/app-upload-covers.tsx"],"sourcesContent":["app-upload-covers {\n  width: 100%;\n  ion-thumbnail {\n    position: relative;\n    margin-top: -100px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-bottom: 0;\n    width: 100px;\n    height: 100px;\n    img {\n      border-radius: 50%;\n      padding: 0.08em;\n      border: solid 0.25em lightsteelblue;\n      background-color: white;\n    }\n    ion-button {\n      top: 50%;\n      left: 50%;\n      margin-right: -50%;\n      transform: translate(-50%, -50%);\n      position: absolute !important;\n      color: #141414; // add a theme for better looks\n      font-size: 24px;\n    }\n  }\n  .cover {\n    position: relative;\n    height: var(--coverHeightModal);\n    background-color: lightblue;\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n    width: 100%;\n    ion-button {\n      bottom: 5%;\n      left: 10%;\n      margin-right: -50%;\n      transform: translate(-50%, -50%);\n      position: absolute;\n      color: #141414; // add a theme for better looks\n      font-size: 24px;\n    }\n  }\n\n  .save-item {\n    top: -150px;\n    text-align: center;\n    position: relative;\n    color: #494848;\n    font-size: 20px;\n  }\n}\n","import { Component, State, h, Prop, Event, EventEmitter } from \"@stencil/core\";\nimport {\n  UserService,\n  USERPROFILECOLLECTION,\n} from \"../../../../../services/common/user\";\nimport {\n  DiveSitesService,\n  DIVESITESCOLLECTION,\n} from \"../../../../../services/udive/diveSites\";\nimport {\n  DivingCentersService,\n  DIVECENTERSSCOLLECTION,\n} from \"../../../../../services/udive/divingCenters\";\nimport {\n  DivingSchoolsService,\n  DIVESCHOOLSSCOLLECTION,\n} from \"../../../../../services/udive/divingSchools\";\nimport {\n  ServiceCentersService,\n  SERVICECENTERSCOLLECTION,\n} from \"../../../../../services/udive/serviceCenters\";\nimport { RouterService } from \"../../../../../services/common/router\";\nimport { SYSTEMCOLLECTION } from \"../../../../../services/common/system\";\nimport { StorageService } from \"../../../../../services/common/storage\";\nimport {\n  DIVECOMMUNITIESCOLLECTION,\n  DiveCommunitiesService,\n} from \"../../../../../services/udive/diveCommunities\";\n\n@Component({\n  tag: \"app-upload-covers\",\n  styleUrl: \"app-upload-covers.scss\",\n})\nexport class AppUploadCovers {\n  @State() uploading = false;\n  @Event() coverUploaded: EventEmitter;\n\n  @Prop() item: {\n    collection: string;\n    id: string;\n    photoURL: string;\n    coverURL: string | { [coverId: string]: string };\n  };\n\n  @Prop() showPhotoURL = true;\n\n  @State() photoURL: string;\n  @State() coverURL: string | { [coverId: string]: string };\n\n  @State() addressText: string;\n\n  componentWillLoad() {\n    if (this.item) {\n      this.photoURL = this.item.photoURL;\n      this.coverURL = this.item.coverURL;\n    }\n  }\n\n  async updatePhotoURL(type: string) {\n    var options = null;\n    if (type == \"photo\") {\n      options = {\n        aspectRatio: 1,\n        maxDimensions: 300,\n        round: true,\n      };\n    } else {\n      options = {\n        aspectRatio: 16 / 6,\n        maxDimensions: 2000,\n        round: false,\n      };\n    }\n\n    const uploadModal = await RouterService.openModal(\n      \"modal-upload-image\",\n      options\n    );\n    uploadModal.onDidDismiss().then(async (canvasImg: any) => {\n      if (canvasImg && canvasImg.data) {\n        this.uploading = true;\n        canvasImg.data.toBlob(\n          async (blob) => {\n            const update = await this.uploadImage(blob, type);\n            if (update) {\n              if (type == \"photo\") {\n                this.photoURL = update;\n                this.item.photoURL = this.photoURL;\n              } else {\n                this.coverURL = update;\n                this.item.coverURL = this.coverURL;\n              }\n            }\n            this.coverUploaded.emit({ type: type, url: update });\n            this.uploading = false;\n          },\n          \"image/jpeg\",\n          50 //jpeg quality\n        );\n      }\n    });\n    await uploadModal.present();\n  }\n\n  async uploadImage(blob, type) {\n    switch (this.item.collection) {\n      case USERPROFILECOLLECTION:\n        return await UserService.updatePhotoURL(type, this.item.id, blob);\n      case DIVESITESCOLLECTION:\n        return await DiveSitesService.updatePhotoURL(type, this.item.id, blob);\n      case DIVECENTERSSCOLLECTION:\n        return await DivingCentersService.updatePhotoURL(\n          type,\n          this.item.id,\n          blob\n        );\n      case DIVECOMMUNITIESCOLLECTION:\n        return await DiveCommunitiesService.updatePhotoURL(\n          type,\n          this.item.id,\n          blob\n        );\n      case DIVESCHOOLSSCOLLECTION:\n        return await DivingSchoolsService.updatePhotoURL(\n          type,\n          this.item.id,\n          blob\n        );\n      case SERVICECENTERSCOLLECTION:\n        return await ServiceCentersService.updatePhotoURL(\n          type,\n          this.item.id,\n          blob\n        );\n      case SYSTEMCOLLECTION:\n        return await StorageService.updatePhotoURL(\n          SERVICECENTERSCOLLECTION,\n          type,\n          this.item.id,\n          blob\n        );\n    }\n  }\n\n  render() {\n    return [\n      this.uploading ? <ion-progress-bar type='indeterminate' /> : undefined,\n      this.item\n        ? [\n            <div\n              class='cover'\n              style={\n                this.item.coverURL\n                  ? {\n                      backgroundImage: \"url(\" + this.item.coverURL + \")\",\n                    }\n                  : undefined\n              }\n            >\n              <ion-button\n                fill='clear'\n                icon-only\n                onClick={() => this.updatePhotoURL(\"cover\")}\n                disabled={!this.item.id}\n              >\n                <ion-icon name='camera' color='light' />\n              </ion-button>\n            </div>,\n            !this.item.id ? (\n              <div class='save-item'>\n                <my-transl\n                  tag='save-item-error'\n                  text='Please save the item to upload pictures'\n                  isLabel\n                />\n              </div>\n            ) : undefined,\n            this.showPhotoURL ? (\n              <ion-thumbnail>\n                <img\n                  src={\n                    this.item.photoURL\n                      ? this.item.photoURL\n                      : \"assets/images/avatar.png\"\n                  }\n                />\n                <ion-button\n                  fill='clear'\n                  icon-only\n                  onClick={() => this.updatePhotoURL(\"photo\")}\n                  disabled={!this.item.id}\n                >\n                  <ion-icon name='camera' color='light' />\n                </ion-button>\n              </ion-thumbnail>\n            ) : undefined,\n          ]\n        : undefined,\n    ];\n  }\n}\n"],"mappings":"waAAA,MAAMA,EAAqB,+7BAC3B,MAAAC,EAAeD,E,MCgCFE,EAAe,M,qFACL,M,sCAUE,K,2EAOvB,iBAAAC,GACE,GAAIC,KAAKC,KAAM,CACbD,KAAKE,SAAWF,KAAKC,KAAKC,SAC1BF,KAAKG,SAAWH,KAAKC,KAAKE,Q,EAI9B,oBAAMC,CAAeC,GACnB,IAAIC,EAAU,KACd,GAAID,GAAQ,QAAS,CACnBC,EAAU,CACRC,YAAa,EACbC,cAAe,IACfC,MAAO,K,KAEJ,CACLH,EAAU,CACRC,YAAa,GAAK,EAClBC,cAAe,IACfC,MAAO,M,CAIX,MAAMC,QAAoBC,EAAcC,UACtC,qBACAN,GAEFI,EAAYG,eAAeC,MAAKC,MAAOC,IACrC,GAAIA,GAAaA,EAAUC,KAAM,CAC/BjB,KAAKkB,UAAY,KACjBF,EAAUC,KAAKE,QACbJ,MAAOK,IACL,MAAMC,QAAerB,KAAKsB,YAAYF,EAAMf,GAC5C,GAAIgB,EAAQ,CACV,GAAIhB,GAAQ,QAAS,CACnBL,KAAKE,SAAWmB,EAChBrB,KAAKC,KAAKC,SAAWF,KAAKE,Q,KACrB,CACLF,KAAKG,SAAWkB,EAChBrB,KAAKC,KAAKE,SAAWH,KAAKG,Q,EAG9BH,KAAKuB,cAAcC,KAAK,CAAEnB,KAAMA,EAAMoB,IAAKJ,IAC3CrB,KAAKkB,UAAY,KAAK,GAExB,aACA,G,WAIAR,EAAYgB,S,CAGpB,iBAAMJ,CAAYF,EAAMf,GACtB,OAAQL,KAAKC,KAAK0B,YAChB,KAAKC,EACH,aAAaC,EAAYzB,eAAeC,EAAML,KAAKC,KAAK6B,GAAIV,GAC9D,KAAKW,EACH,aAAaC,EAAiB5B,eAAeC,EAAML,KAAKC,KAAK6B,GAAIV,GACnE,KAAKa,EACH,aAAaC,EAAqB9B,eAChCC,EACAL,KAAKC,KAAK6B,GACVV,GAEJ,KAAKe,EACH,aAAaC,EAAuBhC,eAClCC,EACAL,KAAKC,KAAK6B,GACVV,GAEJ,KAAKiB,EACH,aAAaC,EAAqBlC,eAChCC,EACAL,KAAKC,KAAK6B,GACVV,GAEJ,KAAKmB,EACH,aAAaC,EAAsBpC,eACjCC,EACAL,KAAKC,KAAK6B,GACVV,GAEJ,KAAKqB,EACH,aAAaC,EAAetC,eAC1BmC,EACAlC,EACAL,KAAKC,KAAK6B,GACVV,G,CAKR,MAAAuB,GACE,MAAO,CACL3C,KAAKkB,UAAY0B,EAAA,oBAAkBvC,KAAK,kBAAqBwC,UAC7D7C,KAAKC,KACD,CACE2C,EAAA,OACEE,MAAM,QACNC,MACE/C,KAAKC,KAAKE,SACN,CACE6C,gBAAiB,OAAShD,KAAKC,KAAKE,SAAW,KAEjD0C,WAGND,EAAA,cACEK,KAAK,QAAO,iBAEZC,QAAS,IAAMlD,KAAKI,eAAe,SACnC+C,UAAWnD,KAAKC,KAAK6B,IAErBc,EAAA,YAAUQ,KAAK,SAASC,MAAM,aAGjCrD,KAAKC,KAAK6B,GACTc,EAAA,OAAKE,MAAM,aACTF,EAAA,aACEU,IAAI,kBACJC,KAAK,0CACLC,QAAO,QAGTX,UACJ7C,KAAKyD,aACHb,EAAA,qBACEA,EAAA,OACEc,IACE1D,KAAKC,KAAKC,SACNF,KAAKC,KAAKC,SACV,6BAGR0C,EAAA,cACEK,KAAK,QAAO,iBAEZC,QAAS,IAAMlD,KAAKI,eAAe,SACnC+C,UAAWnD,KAAKC,KAAK6B,IAErBc,EAAA,YAAUQ,KAAK,SAASC,MAAM,YAGhCR,WAENA,U","ignoreList":[]}