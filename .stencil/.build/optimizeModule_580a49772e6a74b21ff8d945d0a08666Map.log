{"version":3,"names":["modalContactUpdateCss","ModalContactUpdateStyle0","ModalContactUpdate","undefined","componentWillLoad","this","userProfileSub$","UserService","userProfile$","subscribe","userProfile","UserProfile","segmentTitles","information","TranslationService","getTransl","loadContact","contactId","res","ContactsService","getContact","contact","Contact","users","userRoles","uid","componentDidLoad","slider","Swiper","speed","spaceBetween","allowTouchMove","autoHeight","on","slideChange","updateAutoHeight","validateContact","disconnectedCallback","unsubscribe","handleChange","ev","detail","name","value","handleInformationChange","selectCustomer","customerId","CustomersService","getCustomer","then","customer","customerLocations","locations","setLocationsSelect","selectCustomerLocation","customerLocationId","selectLocationElement","el","querySelector","customPopoverOptions","header","interfaceOptions","selectLocationOptions","Array","from","getElementsByTagName","map","option","removeChild","placeholder","location","selectOption","document","createElement","type","textContent","getLocationsTypes","locationName","appendChild","updateSlider","updateParam","segmentChanged","segment","update","slideTo","updateImageUrls","imageType","url","photoURL","coverURL","save","validContact","isString","firstName","lastName","updateView","setTimeout","deleteContact","modalController","dismiss","error","SystemService","presentAlertError","doc","updateContact","id","cancel","render","h","Host","key","item","collection","CONTACTSCOLLECTION","onCoverUploaded","mode","color","Environment","getAppColor","scrollable","onIonChange","layout","class","tag","text","isLabel","lines","interface","label","customersList","fullName","onFormItemChanged","validator","workPosition","officePhone","mobilePhone","email","expand","fill","onClick","slot","disableSave","onCancelEmit","onSaveEmit"],"sources":["src/components/trasteel/modals/modal-contact-update/modal-contact-update.scss?tag=modal-contact-update","src/components/trasteel/modals/modal-contact-update/modal-contact-update.tsx"],"sourcesContent":["modal-contact-update {\n  ion-list {\n    width: 100%;\n  }\n}\n","import {Component, h, Host, Prop, State, Element} from \"@stencil/core\";\nimport {modalController} from \"@ionic/core\";\nimport {Subscription} from \"rxjs\";\nimport Swiper from \"swiper\";\nimport {Contact} from \"../../../../interfaces/trasteel/contact/contact\";\nimport {UserProfile} from \"../../../../interfaces/common/user/user-profile\";\nimport {UserService} from \"../../../../services/common/user\";\nimport {TranslationService} from \"../../../../services/common/translations\";\nimport {\n  CONTACTSCOLLECTION,\n  ContactsService,\n} from \"../../../../services/trasteel/crm/contacts\";\nimport {Environment} from \"../../../../global/env\";\nimport {SystemService} from \"../../../../services/common/system\";\nimport {CustomersService} from \"../../../../services/trasteel/crm/customers\";\nimport {Customer} from \"../../../../interfaces/trasteel/customer/customer\";\nimport {CustomerLocation} from \"../../../../components\";\nimport {isString} from \"lodash\";\n\n@Component({\n  tag: \"modal-contact-update\",\n  styleUrl: \"modal-contact-update.scss\",\n})\nexport class ModalContactUpdate {\n  @Element() el: HTMLElement;\n  @Prop() contactId: string = undefined;\n  @State() contact: Contact;\n  customer: Customer;\n  @State() customerLocations: CustomerLocation[] = [];\n  @State() segment = \"information\";\n  @State() updateView = true;\n  @State() validContact = false;\n\n  segmentTitles: {\n    information: string;\n  };\n  @State() slider: Swiper;\n  userProfile: UserProfile;\n  userProfileSub$: Subscription;\n\n  async componentWillLoad() {\n    this.userProfileSub$ = UserService.userProfile$.subscribe(\n      (userProfile: UserProfile) => {\n        this.userProfile = new UserProfile(userProfile);\n      }\n    );\n    this.segmentTitles = {\n      information: TranslationService.getTransl(\"information\", \"Information\"),\n    };\n    await this.loadContact();\n  }\n\n  async loadContact() {\n    if (this.contactId) {\n      const res = await ContactsService.getContact(this.contactId);\n      this.contact = res;\n    } else {\n      this.contact = new Contact();\n      this.contact.users = {\n        [UserService.userRoles.uid]: [\"owner\"],\n      };\n    }\n  }\n\n  async componentDidLoad() {\n    this.slider = new Swiper(\".slider-edit-contact\", {\n      speed: 400,\n      spaceBetween: 100,\n      allowTouchMove: false,\n      autoHeight: true,\n      on: {\n        slideChange: () => {\n          this.slider ? this.slider.updateAutoHeight() : null;\n        },\n      },\n    });\n    this.validateContact();\n  }\n\n  disconnectedCallback() {\n    this.userProfileSub$.unsubscribe();\n  }\n\n  handleChange(ev) {\n    this.contact[ev.detail.name] = ev.detail.value;\n    this.validateContact();\n  }\n\n  handleInformationChange() {\n    this.validateContact();\n  }\n\n  selectCustomer(ev) {\n    this.contact.customerId = ev.detail.value;\n    CustomersService.getCustomer(ev.detail.value).then((customer) => {\n      this.customer = customer;\n      this.customerLocations = customer.locations;\n      this.setLocationsSelect();\n    });\n    this.validateContact();\n  }\n\n  selectCustomerLocation(ev) {\n    this.contact.customerLocationId = ev.detail.value;\n    this.validateContact();\n  }\n\n  setLocationsSelect() {\n    const selectLocationElement: HTMLIonSelectElement =\n      this.el.querySelector(\"#selectLocation\");\n    const customPopoverOptions = {\n      header: TranslationService.getTransl(\"location\", \"Locations\"),\n    };\n    selectLocationElement.interfaceOptions = customPopoverOptions;\n    //remove previously defined options\n    const selectLocationOptions = Array.from(\n      selectLocationElement.getElementsByTagName(\"ion-select-option\")\n    );\n    selectLocationOptions.map((option) => {\n      selectLocationElement.removeChild(option);\n    });\n    selectLocationElement.placeholder = TranslationService.getTransl(\n      \"select\",\n      \"Select\"\n    );\n    this.customerLocations.map((location) => {\n      const selectOption = document.createElement(\"ion-select-option\");\n      selectOption.value = location.type;\n\n      selectOption.textContent = TranslationService.getTransl(\n        location.type,\n        CustomersService.getLocationsTypes(location.type)[0].locationName\n      );\n      selectLocationElement.appendChild(selectOption);\n    });\n    this.updateSlider();\n  }\n\n  updateParam() {\n    this.validateContact();\n  }\n\n  segmentChanged(ev) {\n    if (ev.detail.value) {\n      this.segment = ev.detail.value;\n      this.slider.update();\n      switch (this.segment) {\n        case \"information\":\n          this.slider.slideTo(0);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  updateImageUrls(ev) {\n    const imageType = ev.detail.type;\n    const url = ev.detail.url;\n    if (imageType == \"photo\") {\n      this.contact.photoURL = url;\n    } else {\n      this.contact.coverURL = url;\n    }\n    this.save(false);\n  }\n\n  validateContact() {\n    let checkLocations = true;\n\n    this.validContact =\n      checkLocations &&\n      isString(this.contact.firstName) &&\n      isString(this.contact.lastName) &&\n      isString(this.contact.customerId);\n  }\n\n  updateSlider() {\n    this.updateView = !this.updateView;\n    //wait for view to update and then reset slider height\n    setTimeout(() => {\n      this.slider ? this.slider.update() : undefined;\n    }, 100);\n  }\n\n  async deleteContact() {\n    try {\n      await ContactsService.deleteContact(this.contactId);\n      modalController.dismiss();\n    } catch (error) {\n      SystemService.presentAlertError(error);\n    }\n  }\n\n  async save(dismiss = true) {\n    const doc = await ContactsService.updateContact(\n      this.contactId,\n      this.contact,\n      this.userProfile.uid\n    );\n    if (this.contactId) {\n      return dismiss ? modalController.dismiss() : true;\n    } else {\n      this.contactId = doc.id;\n      return true;\n    }\n  }\n\n  async cancel() {\n    modalController.dismiss();\n  }\n\n  render() {\n    return (\n      <Host>\n        <ion-header>\n          <app-upload-cover\n            item={{\n              collection: CONTACTSCOLLECTION,\n              id: this.contactId,\n              photoURL: this.contact.photoURL,\n              coverURL: this.contact.coverURL,\n            }}\n            onCoverUploaded={(ev) => this.updateImageUrls(ev)}\n          ></app-upload-cover>\n        </ion-header>\n        <ion-header>\n          <ion-toolbar>\n            <ion-segment\n              mode=\"md\"\n              color={Environment.getAppColor()}\n              scrollable\n              onIonChange={(ev) => this.segmentChanged(ev)}\n              value={this.segment}\n            >\n              <ion-segment-button value=\"information\" layout=\"icon-start\">\n                <ion-label>{this.segmentTitles.information}</ion-label>\n              </ion-segment-button>\n            </ion-segment>\n          </ion-toolbar>\n        </ion-header>\n        <ion-content class=\"slides\">\n          <swiper-container class=\"slider-edit-contact swiper\">\n            <swiper-wrapper class=\"swiper-wrapper\">\n              <swiper-slide class=\"swiper-slide\">\n                <ion-list class=\"ion-no-padding\">\n                  <ion-list-header>\n                    <my-transl\n                      tag=\"general-information\"\n                      text=\"General Information\"\n                      isLabel\n                    />\n                  </ion-list-header>\n                  <ion-item lines=\"none\">\n                    <ion-select\n                      color=\"trasteel\"\n                      id=\"selectCustomer\"\n                      interface=\"action-sheet\"\n                      label={TranslationService.getTransl(\n                        \"customer\",\n                        \"Customer\"\n                      )}\n                      label-placement=\"floating\"\n                      onIonChange={(ev) => this.selectCustomer(ev)}\n                      value={\n                        this.contact && this.contact.customerId\n                          ? this.contact.customerId\n                          : null\n                      }\n                    >\n                      {CustomersService.customersList.map((customer) => (\n                        <ion-select-option value={customer.id}>\n                          {customer.fullName}\n                        </ion-select-option>\n                      ))}\n                    </ion-select>\n                  </ion-item>\n                  <ion-item lines=\"none\">\n                    <ion-select\n                      color=\"trasteel\"\n                      id=\"selectLocation\"\n                      interface=\"action-sheet\"\n                      label={TranslationService.getTransl(\n                        \"location\",\n                        \"Location\"\n                      )}\n                      label-placement=\"floating\"\n                      onIonChange={(ev) => this.selectCustomerLocation(ev)}\n                      value={\n                        this.contact && this.contact.customerLocationId\n                          ? this.contact.customerLocationId\n                          : null\n                      }\n                    ></ion-select>\n                  </ion-item>\n                  <app-form-item\n                    label-tag=\"name\"\n                    label-text=\"Name\"\n                    value={this.contact.firstName}\n                    name=\"firstName\"\n                    input-type=\"text\"\n                    onFormItemChanged={(ev) => this.handleChange(ev)}\n                    validator={[\"required\"]}\n                  ></app-form-item>\n                  <app-form-item\n                    label-tag=\"surname\"\n                    label-text=\"Surname\"\n                    value={this.contact.lastName}\n                    name=\"lastName\"\n                    input-type=\"text\"\n                    onFormItemChanged={(ev) => this.handleChange(ev)}\n                    validator={[\"required\"]}\n                  ></app-form-item>\n                  <app-form-item\n                    label-tag=\"work-position\"\n                    label-text=\"Work Position\"\n                    value={this.contact.workPosition}\n                    name=\"workPosition\"\n                    input-type=\"text\"\n                    onFormItemChanged={(ev) => this.handleChange(ev)}\n                    validator={[\"required\"]}\n                  ></app-form-item>\n                  <app-form-item\n                    label-tag=\"office-phone\"\n                    label-text=\"Office Phone\"\n                    value={this.contact.officePhone}\n                    name=\"officePhone\"\n                    input-type=\"tel\"\n                    onFormItemChanged={(ev) => this.handleChange(ev)}\n                  ></app-form-item>\n                  <app-form-item\n                    label-tag=\"mobile-phone\"\n                    label-text=\"Mobile Phone\"\n                    value={this.contact.mobilePhone}\n                    name=\"mobilePhone\"\n                    input-type=\"tel\"\n                    onFormItemChanged={(ev) => this.handleChange(ev)}\n                  ></app-form-item>\n                  <app-form-item\n                    label-tag=\"email\"\n                    label-text=\"Email\"\n                    value={this.contact.email}\n                    name=\"email\"\n                    input-type=\"email\"\n                    input-form-mode=\"email\"\n                    onFormItemChanged={(ev) => this.handleChange(ev)}\n                  ></app-form-item>\n                </ion-list>\n                {this.contactId ? (\n                  <ion-footer class=\"ion-no-border\">\n                    <ion-toolbar>\n                      <ion-button\n                        expand=\"block\"\n                        fill=\"outline\"\n                        color=\"danger\"\n                        onClick={() => this.deleteContact()}\n                      >\n                        <ion-icon slot=\"start\" name=\"trash\"></ion-icon>\n                        <my-transl\n                          tag=\"delete\"\n                          text=\"Delete\"\n                          isLabel\n                        ></my-transl>\n                      </ion-button>\n                    </ion-toolbar>\n                  </ion-footer>\n                ) : undefined}\n              </swiper-slide>\n            </swiper-wrapper>\n          </swiper-container>\n        </ion-content>\n        <app-modal-footer\n          color={Environment.getAppColor()}\n          disableSave={!this.validContact}\n          onCancelEmit={() => this.cancel()}\n          onSaveEmit={() => this.save()}\n        />\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}