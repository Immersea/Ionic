{"version":3,"names":["UsersTeams","constructor","data","this","usersTeams","length","forEach","team","push","UserTeams","users","Object","keys","key","uid","email","teams","USERSTEAMSDOC","TrasteelServicesController","getUserRoles","isTeamAdmin","line","ret","isRefraTeamAdmin","isElecTeamAdmin","isRawTeamAdmin","isEngTeamAdmin","undefined","isCustomerDBAdmin","UserService","userRoles","roles","indexOf","isSuperAdmin","isRefraDBAdmin","isElecDBAdmin","isRawDBAdmin","isEngDBAdmin","getUsersTeams","DatabaseService","getDocument","SYSTEMCOLLECTION","updateUsersTeams","updateDocument","setUserTeams","user","RouterService","openModal","TrasteelService"],"sources":["src/interfaces/trasteel/users/users-teams.ts","src/services/trasteel/common/services.ts"],"sourcesContent":["export class UsersTeams {\n  usersTeams: UserTeams[];\n  users: {\n    [id: string]: string[]; //[\"owner\", \"editor\", etc.]\n  };\n  constructor(data?) {\n    this.usersTeams = [];\n    if (data && data.usersTeams && data.usersTeams.length > 0) {\n      data.usersTeams.forEach((team) => {\n        this.usersTeams.push(new UserTeams(team));\n      });\n    }\n    this.users = {};\n    if (data && data.users) {\n      Object.keys(data.users).forEach((key) => {\n        this.users[key] = data.users[key];\n      });\n    }\n  }\n}\n\nexport class UserTeams {\n  uid: string;\n  email: string;\n  teams: string[];\n  constructor(data?) {\n    this.uid = data && data.uid ? data.uid : null;\n    this.email = data && data.email ? data.email : null;\n    this.teams = data && data.teams && data.teams.length > 0 ? data.teams : [];\n  }\n}\n","import {DatabaseService} from \"../../common/database\";\nimport {SYSTEMCOLLECTION} from \"../../common/system\";\nimport {UserPubicProfile} from \"../../../components\";\nimport {UsersTeams} from \"../../../interfaces/trasteel/users/users-teams\";\nimport {RouterService} from \"../../common/router\";\nimport {UserService} from \"../../common/user\";\n\nconst USERSTEAMSDOC = \"usersTeams\";\n\nexport class TrasteelServicesController {\n  getUserRoles() {\n    return [\n      \"registered\",\n      \"customerDBAdmin\",\n      \"refraDBAdmin\",\n      \"refraTeamAdmin\",\n      \"electDBAdmin\",\n      \"electTeamAdmin\",\n      \"rawDBAdmin\",\n      \"rawTeamAdmin\",\n      \"engDBAdmin\",\n      \"engTeamAdmin\",\n      \"translator\",\n      \"superAdmin\",\n    ];\n  }\n\n  isTeamAdmin(line?): boolean {\n    let ret = false;\n    switch (line) {\n      case \"refractories\":\n        ret = this.isRefraTeamAdmin();\n        break;\n      case \"electrodes\":\n        ret = this.isElecTeamAdmin();\n        break;\n      case \"rawmaterials\":\n        ret = this.isRawTeamAdmin();\n        break;\n      case \"engineering\":\n        ret = this.isEngTeamAdmin();\n        break;\n      case \"longterm\":\n        ret = false;\n        break;\n      case undefined:\n        ret =\n          this.isRefraTeamAdmin() ||\n          this.isElecTeamAdmin() ||\n          this.isRawTeamAdmin() ||\n          this.isEngTeamAdmin();\n    }\n    return ret;\n  }\n\n  isCustomerDBAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"customerDBAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n\n  isRefraDBAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"refraDBAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isRefraTeamAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"refraTeamAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isElecDBAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"elecDBAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isElecTeamAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"elecTeamAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isRawDBAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"rawDBAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isRawTeamAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"rawTeamAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isEngDBAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"engDBAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isEngTeamAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"engTeamAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n\n  async getUsersTeams(): Promise<UsersTeams> {\n    let usersTeams = await DatabaseService.getDocument(\n      SYSTEMCOLLECTION,\n      USERSTEAMSDOC\n    );\n    if (usersTeams) {\n      usersTeams = new UsersTeams(usersTeams);\n    } else {\n      usersTeams = new UsersTeams();\n    }\n    return usersTeams;\n  }\n\n  async updateUsersTeams(usersTeams: UsersTeams) {\n    await DatabaseService.updateDocument(\n      SYSTEMCOLLECTION,\n      USERSTEAMSDOC,\n      usersTeams\n    );\n  }\n\n  setUserTeams(user: UserPubicProfile) {\n    RouterService.openModal(\"modal-user-teams-update\", {user: user});\n  }\n}\nexport const TrasteelService = new TrasteelServicesController();\n"],"mappings":"+DAAaA,EAKX,WAAAC,CAAYC,GACVC,KAAKC,WAAa,GAClB,GAAIF,GAAQA,EAAKE,YAAcF,EAAKE,WAAWC,OAAS,EAAG,CACzDH,EAAKE,WAAWE,SAASC,IACvBJ,KAAKC,WAAWI,KAAK,IAAIC,EAAUF,GAAM,G,CAG7CJ,KAAKO,MAAQ,GACb,GAAIR,GAAQA,EAAKQ,MAAO,CACtBC,OAAOC,KAAKV,EAAKQ,OAAOJ,SAASO,IAC/BV,KAAKO,MAAMG,GAAOX,EAAKQ,MAAMG,EAAI,G,SAM5BJ,EAIX,WAAAR,CAAYC,GACVC,KAAKW,IAAMZ,GAAQA,EAAKY,IAAMZ,EAAKY,IAAM,KACzCX,KAAKY,MAAQb,GAAQA,EAAKa,MAAQb,EAAKa,MAAQ,KAC/CZ,KAAKa,MAAQd,GAAQA,EAAKc,OAASd,EAAKc,MAAMX,OAAS,EAAIH,EAAKc,MAAQ,E,ECrB5E,MAAMC,EAAgB,a,MAETC,EACX,YAAAC,GACE,MAAO,CACL,aACA,kBACA,eACA,iBACA,eACA,iBACA,aACA,eACA,aACA,eACA,aACA,a,CAIJ,WAAAC,CAAYC,GACV,IAAIC,EAAM,MACV,OAAQD,GACN,IAAK,eACHC,EAAMnB,KAAKoB,mBACX,MACF,IAAK,aACHD,EAAMnB,KAAKqB,kBACX,MACF,IAAK,eACHF,EAAMnB,KAAKsB,iBACX,MACF,IAAK,cACHH,EAAMnB,KAAKuB,iBACX,MACF,IAAK,WACHJ,EAAM,MACN,MACF,KAAKK,UACHL,EACEnB,KAAKoB,oBACLpB,KAAKqB,mBACLrB,KAAKsB,kBACLtB,KAAKuB,iBAEX,OAAOJ,C,CAGT,iBAAAM,GACE,OACEC,EAAYC,UAAUC,MAAMC,QAAQ,qBAAuB,GAC3DH,EAAYC,UAAUG,c,CAI1B,cAAAC,GACE,OACEL,EAAYC,UAAUC,MAAMC,QAAQ,kBAAoB,GACxDH,EAAYC,UAAUG,c,CAG1B,gBAAAV,GACE,OACEM,EAAYC,UAAUC,MAAMC,QAAQ,oBAAsB,GAC1DH,EAAYC,UAAUG,c,CAG1B,aAAAE,GACE,OACEN,EAAYC,UAAUC,MAAMC,QAAQ,iBAAmB,GACvDH,EAAYC,UAAUG,c,CAG1B,eAAAT,GACE,OACEK,EAAYC,UAAUC,MAAMC,QAAQ,mBAAqB,GACzDH,EAAYC,UAAUG,c,CAG1B,YAAAG,GACE,OACEP,EAAYC,UAAUC,MAAMC,QAAQ,gBAAkB,GACtDH,EAAYC,UAAUG,c,CAG1B,cAAAR,GACE,OACEI,EAAYC,UAAUC,MAAMC,QAAQ,kBAAoB,GACxDH,EAAYC,UAAUG,c,CAG1B,YAAAI,GACE,OACER,EAAYC,UAAUC,MAAMC,QAAQ,gBAAkB,GACtDH,EAAYC,UAAUG,c,CAG1B,cAAAP,GACE,OACEG,EAAYC,UAAUC,MAAMC,QAAQ,kBAAoB,GACxDH,EAAYC,UAAUG,c,CAI1B,mBAAMK,GACJ,IAAIlC,QAAmBmC,EAAgBC,YACrCC,EACAxB,GAEF,GAAIb,EAAY,CACdA,EAAa,IAAIJ,EAAWI,E,KACvB,CACLA,EAAa,IAAIJ,C,CAEnB,OAAOI,C,CAGT,sBAAMsC,CAAiBtC,SACfmC,EAAgBI,eACpBF,EACAxB,EACAb,E,CAIJ,YAAAwC,CAAaC,GACXC,EAAcC,UAAU,0BAA2B,CAACF,KAAMA,G,QAGjDG,EAAkB,IAAI9B,S","ignoreList":[]}