{"version":3,"names":["popoverSearchDivingCourseCss","PopoverSearchDivingCourseStyle0","PopoverSearchDivingCourse","componentWillLoad","this","agencies","SystemService","getDivingAgencies","localAgencies","DiveStandardsService","item","agencyId","agencyName","certificationId","undefined","componentDidLoad","popover","el","closest","setSelectAgency","selectElement","querySelector","customPopoverOptions","header","TranslationService","getTransl","interfaceOptions","placeholder","each","val","selectOption","document","createElement","value","ag_name","textContent","appendChild","updateView","updateAgency","ev","detail","findIndex","x","updateCertification","dismiss","certSelected","emit","render","h","Host","key","tag","text","label","id","onIonChange","lines","name","onFormItemChanged","validator"],"sources":["src/components/udive/popovers/popover-search-diving-course/popover-search-diving-course.scss?tag=popover-search-diving-course","src/components/udive/popovers/popover-search-diving-course/popover-search-diving-course.tsx"],"sourcesContent":["popover-search-diving-course {\n  /* Component styles go here */\n  ion-list {\n    min-height: 300px;\n  }\n}\n","import {\n  Component,\n  h,\n  Host,\n  Prop,\n  State,\n  Element,\n  Event,\n  EventEmitter,\n} from \"@stencil/core\";\nimport { TranslationService } from \"../../../../services/common/translations\";\nimport { DivingCourse } from \"../../../../interfaces/udive/diving-school/divingSchool\";\nimport { SystemService } from \"../../../../services/common/system\";\nimport { each, findIndex } from \"lodash\";\nimport { DiveStandardsService } from \"../../../../services/udive/planner/dive-standards\";\n\n@Component({\n  tag: \"popover-search-diving-course\",\n  styleUrl: \"popover-search-diving-course.scss\",\n})\nexport class PopoverSearchDivingCourse {\n  @Element() el: HTMLElement;\n  @Prop() item: DivingCourse;\n  @State() popover: HTMLIonPopoverElement;\n  agencies: any;\n  localAgencies: any;\n  @Event() certSelected: EventEmitter<DivingCourse>;\n  @State() updateView = false;\n\n  async componentWillLoad() {\n    this.agencies = await SystemService.getDivingAgencies();\n    this.localAgencies = DiveStandardsService.agencies;\n    !this.item\n      ? (this.item = {\n          agencyId: null,\n          agencyName: null,\n          certificationId: null,\n        })\n      : undefined;\n  }\n\n  componentDidLoad() {\n    this.popover = this.el.closest(\"ion-popover\");\n    this.setSelectAgency();\n    //if (this.item.agencyId) this.setSelectCertification();\n  }\n\n  setSelectAgency() {\n    const selectElement: HTMLIonSelectElement =\n      this.el.querySelector(\"#selectAgency\");\n    const customPopoverOptions = {\n      header: TranslationService.getTransl(\"diving-agency\", \"Diving Agency\"),\n    };\n    selectElement.interfaceOptions = customPopoverOptions;\n    selectElement.placeholder = TranslationService.getTransl(\n      \"select\",\n      \"Select\"\n    );\n    each(this.localAgencies, (val) => {\n      let selectOption = document.createElement(\"ion-select-option\");\n      selectOption.value = val.ag_name;\n      selectOption.textContent = val.ag_name;\n      selectElement.appendChild(selectOption);\n    });\n    this.updateView = !this.updateView;\n  }\n\n  /*setSelectCertification() {\n    if (this.agencies[this.item.agencyId]) {\n      const selectElement: HTMLIonSelectElement = this.el.querySelector(\n        \"#selectCertification\"\n      );\n      const customPopoverOptions = {\n        header: TranslationService.getTransl(\n          \"diving-certification\",\n          \"Diving Certification\"\n        ),\n      };\n\n      selectElement.interfaceOptions = customPopoverOptions;\n      selectElement.placeholder = TranslationService.getTransl(\n        \"select\",\n        \"Select\"\n      );\n      each(this.agencies[this.item.agencyId].certifications, (val, i) => {\n        let selectOption = document.createElement(\"ion-select-option\");\n        selectOption.value = i;\n        selectOption.textContent = val.name;\n        selectElement.appendChild(selectOption);\n      });\n      selectElement.disabled = false;\n      this.enableCertificationsField = false;\n    } else {\n      this.enableCertificationsField = true;\n    }\n    this.updateView = !this.updateView;\n  }*/\n\n  updateAgency(ev) {\n    this.item.agencyName = ev.detail.value;\n    const agencyId = findIndex(\n      this.agencies,\n      (x) => x[\"id\"] == this.item.agencyName\n    );\n    this.item.agencyId = agencyId > 0 ? ev.detail.value : \"\";\n    //this.setSelectCertification();\n  }\n\n  updateCertification(ev) {\n    this.item.certificationId = ev.detail.value;\n    if (this.popover) {\n      this.popover.dismiss(this.item);\n    }\n    this.certSelected.emit(this.item);\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.popover ? (\n          <ion-toolbar>\n            <ion-title>\n              <my-transl tag='diving-course' text='Diving Course' />\n            </ion-title>\n          </ion-toolbar>\n        ) : undefined}\n        <ion-item>\n          <ion-select\n            label={TranslationService.getTransl(\n              \"diving-agency\",\n              \"Diving Agency\"\n            )}\n            id='selectAgency'\n            onIonChange={(ev) => this.updateAgency(ev)}\n            value={this.item.agencyName}\n          ></ion-select>\n        </ion-item>\n        <app-form-item\n          label-tag='certification'\n          label-text='Certification'\n          lines='inset'\n          value={this.item.certificationId}\n          name='certification'\n          input-type='text'\n          onFormItemChanged={(ev) => this.updateCertification(ev)}\n          validator={[\"required\"]}\n        ></app-form-item>\n        {/***\n           * <ion-item>\n          <ion-select\n            label={TranslationService.getTransl(\n              \"diving-certification\",\n              \"Diving Certification\"\n            )}\n            id=\"selectCertification\"\n            onIonChange={(ev) => this.updateCertification(ev)}\n            disabled={true}\n            value={this.item.certificationId}\n          ></ion-select>\n        </ion-item>\n           */}\n      </Host>\n    );\n  }\n}\n"],"mappings":"uYAAA,MAAMA,EAA+B,wFACrC,MAAAC,EAAeD,E,MCmBFE,EAAyB,M,+HAOd,K,CAEtB,uBAAMC,GACJC,KAAKC,eAAiBC,EAAcC,oBACpCH,KAAKI,cAAgBC,EAAqBJ,UACzCD,KAAKM,KACDN,KAAKM,KAAO,CACXC,SAAU,KACVC,WAAY,KACZC,gBAAiB,MAEnBC,S,CAGN,gBAAAC,GACEX,KAAKY,QAAUZ,KAAKa,GAAGC,QAAQ,eAC/Bd,KAAKe,iB,CAIP,eAAAA,GACE,MAAMC,EACJhB,KAAKa,GAAGI,cAAc,iBACxB,MAAMC,EAAuB,CAC3BC,OAAQC,EAAmBC,UAAU,gBAAiB,kBAExDL,EAAcM,iBAAmBJ,EACjCF,EAAcO,YAAcH,EAAmBC,UAC7C,SACA,UAEFG,eAAKxB,KAAKI,eAAgBqB,IACxB,IAAIC,EAAeC,SAASC,cAAc,qBAC1CF,EAAaG,MAAQJ,EAAIK,QACzBJ,EAAaK,YAAcN,EAAIK,QAC/Bd,EAAcgB,YAAYN,EAAa,IAEzC1B,KAAKiC,YAAcjC,KAAKiC,U,CAkC1B,YAAAC,CAAaC,GACXnC,KAAKM,KAAKE,WAAa2B,EAAGC,OAAOP,MACjC,MAAMtB,EAAW8B,oBACfrC,KAAKC,UACJqC,GAAMA,EAAE,OAAStC,KAAKM,KAAKE,aAE9BR,KAAKM,KAAKC,SAAWA,EAAW,EAAI4B,EAAGC,OAAOP,MAAQ,E,CAIxD,mBAAAU,CAAoBJ,GAClBnC,KAAKM,KAAKG,gBAAkB0B,EAAGC,OAAOP,MACtC,GAAI7B,KAAKY,QAAS,CAChBZ,KAAKY,QAAQ4B,QAAQxC,KAAKM,K,CAE5BN,KAAKyC,aAAaC,KAAK1C,KAAKM,K,CAG9B,MAAAqC,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACF9C,KAAKY,QACJgC,EAAA,mBACEA,EAAA,iBACEA,EAAA,aAAWG,IAAI,gBAAgBC,KAAK,oBAGtCtC,UACJkC,EAAA,YAAAE,IAAA,4CACEF,EAAA,cAAAE,IAAA,2CACEG,MAAO7B,EAAmBC,UACxB,gBACA,iBAEF6B,GAAG,eACHC,YAAchB,GAAOnC,KAAKkC,aAAaC,GACvCN,MAAO7B,KAAKM,KAAKE,cAGrBoC,EAAA,iBAAAE,IAAA,uDACY,gBAAe,aACd,gBACXM,MAAM,QACNvB,MAAO7B,KAAKM,KAAKG,gBACjB4C,KAAK,gBAAe,aACT,OACXC,kBAAoBnB,GAAOnC,KAAKuC,oBAAoBJ,GACpDoB,UAAW,CAAC,c","ignoreList":[]}