{"version":3,"names":["appAdminDivingClassesCss","AppAdminDivingClassesStyle0","AppAdminDivingClasses","this","userPublicProfilesList","divingCentersList","divingSchoolsList","componentWillLoad","loadingDivingClasses$","DivingClassesService","creatingNewDivingClass$","subscribe","value","creatingNewDivingClass","editingDivingClass$","editingDivingClassId$","editingDivingClass","filterByOrganisierId","DivingSchoolsService","selectedDivingSchoolId","userDivingClasses$","selectedDivingSchoolClasses$","sub","loadDivingClasses","UserService","userPublicProfilesList$","collection","filter","divingCentersList$","DivingCentersService","divingSchoolsList$","userRoles$","roles","userRoles","disconnectedCallback","unsubscribe","userDivingClasses","resetSkeletons","loadingDivingClasses","adminDivingClassesArray","Object","keys","forEach","key","adminClass","id","organiser","push","orderBy","length","map","diveTrip","collectionId","USERPROFILECOLLECTION","item","find","user","uid","DIVECENTERSSCOLLECTION","dc","DIVESCHOOLSSCOLLECTION","school","role","editorOf","editor","owner","includes","filterByClasses","tripsArray","trip","updateView","update","event","stopPropagation","presentDivingClassUpdate","deleteDivingClass","render","h","Host","skeleton","undefined","diveClass","button","onClick","pushDivingClass","detail","photoURL","slot","src","displayName","format","date","tag","text","fill","color","ev","delete","name","TranslationService","getTransl"],"sources":["src/components/udive/app/admin/app-admin-diving-classes/app-admin-diving-classes.scss?tag=app-admin-diving-classes","src/components/udive/app/admin/app-admin-diving-classes/app-admin-diving-classes.tsx"],"sourcesContent":["app-admin-diving-classes {\n  /* Component styles go here */\n}\n","import {Component, h, State, Host, Prop} from \"@stencil/core\";\nimport {Subscription} from \"rxjs\";\nimport {\n  UserService,\n  USERPROFILECOLLECTION,\n} from \"../../../../../services/common/user\";\nimport {orderBy} from \"lodash\";\nimport {UserRoles} from \"../../../../../interfaces/common/user/user-roles\";\nimport {UserPubicProfile} from \"../../../../../interfaces/common/user/user-public-profile\";\nimport {\n  DivingCentersService,\n  DIVECENTERSSCOLLECTION,\n} from \"../../../../../services/udive/divingCenters\";\nimport {MapDataDivingCenter} from \"../../../../../interfaces/udive/diving-center/divingCenter\";\nimport {MapDataDivingSchool} from \"../../../../../interfaces/udive/diving-school/divingSchool\";\nimport {\n  DivingSchoolsService,\n  DIVESCHOOLSSCOLLECTION,\n} from \"../../../../../services/udive/divingSchools\";\nimport {DivingClassesService} from \"../../../../../services/udive/divingClasses\";\nimport {ClassSummary} from \"../../../../../interfaces/udive/diving-class/divingClass\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {format} from \"date-fns\";\n\n@Component({\n  tag: \"app-admin-diving-classes\",\n  styleUrl: \"app-admin-diving-classes.scss\",\n})\nexport class AppAdminDivingClasses {\n  @Prop() filterByOrganisierId: string;\n  @Prop() filterByClasses: any;\n  @State() adminDivingClassesArray: any[] = [];\n  @State() updateView = false;\n  @State() creatingNewDivingClass = false;\n  @State() loadingDivingClasses = true;\n  loadingDivingClasses$: Subscription;\n  @State() editingDivingClass = \"\";\n  editingDivingClass$: Subscription;\n\n  userRoles: UserRoles;\n  userRoles$: Subscription;\n  userDivingClasses: ClassSummary;\n  userDivingClasses$: Subscription;\n  userPublicProfilesList: UserPubicProfile[] = [];\n  userPublicProfilesList$: Subscription;\n  divingCentersList: MapDataDivingCenter[] = [];\n  divingCentersList$: Subscription;\n  divingSchoolsList: MapDataDivingSchool[] = [];\n  divingSchoolsList$: Subscription;\n\n  async componentWillLoad() {\n    this.loadingDivingClasses$ =\n      DivingClassesService.creatingNewDivingClass$.subscribe((value) => {\n        this.creatingNewDivingClass = value;\n      });\n    this.editingDivingClass$ =\n      DivingClassesService.editingDivingClassId$.subscribe((value) => {\n        this.editingDivingClass = value;\n      });\n    //load classes\n    //if filterbyorganiserId  ==  loaded school -> load classes from school\n    if (\n      this.filterByOrganisierId &&\n      this.filterByOrganisierId === DivingSchoolsService.selectedDivingSchoolId\n    ) {\n      this.userDivingClasses$ =\n        DivingSchoolsService.selectedDivingSchoolClasses$.subscribe((sub) =>\n          this.loadDivingClasses(sub)\n        );\n    } else {\n      this.userDivingClasses$ = UserService.userDivingClasses$.subscribe(\n        (sub) => this.loadDivingClasses(sub)\n      );\n    }\n\n    //load all users list\n    this.userPublicProfilesList$ =\n      UserService.userPublicProfilesList$.subscribe((collection) => {\n        //update dive sites\n        this.userPublicProfilesList = collection;\n        this.filter();\n      });\n    //load all diving centers list\n    this.divingCentersList$ = DivingCentersService.divingCentersList$.subscribe(\n      (collection) => {\n        //update dive sites\n        this.divingCentersList = collection;\n        this.filter();\n      }\n    );\n    //load all diving schools list\n    this.divingSchoolsList$ = DivingSchoolsService.divingSchoolsList$.subscribe(\n      (collection) => {\n        //update dive sites\n        this.divingSchoolsList = collection;\n        this.filter();\n      }\n    );\n    this.userRoles$ = UserService.userRoles$.subscribe((roles) => {\n      this.userRoles = roles;\n      this.filter();\n    });\n  }\n\n  disconnectedCallback() {\n    this.userRoles$.unsubscribe();\n    this.userDivingClasses$.unsubscribe();\n    this.userPublicProfilesList$.unsubscribe();\n    this.divingCentersList$.unsubscribe();\n    this.divingSchoolsList$.unsubscribe();\n    this.editingDivingClass$.unsubscribe();\n    this.loadingDivingClasses$.unsubscribe();\n  }\n\n  async loadDivingClasses(userDivingClasses: ClassSummary) {\n    DivingClassesService.resetSkeletons();\n    this.loadingDivingClasses = false;\n    if (userDivingClasses) {\n      let adminDivingClassesArray = [];\n      Object.keys(userDivingClasses).forEach((key) => {\n        let adminClass = userDivingClasses[key] as any;\n        adminClass.id = key;\n        if (\n          this.filterByOrganisierId &&\n          adminClass.organiser.id == this.filterByOrganisierId\n        ) {\n          adminDivingClassesArray.push(adminClass);\n        } else if (!this.filterByOrganisierId) {\n          adminDivingClassesArray.push(adminClass);\n        }\n      });\n\n      adminDivingClassesArray = orderBy(\n        adminDivingClassesArray,\n        \"date\",\n        \"desc\"\n      );\n      this.adminDivingClassesArray = adminDivingClassesArray;\n      this.filter();\n    }\n  }\n\n  filter() {\n    if (this.adminDivingClassesArray.length > 0) {\n      //load organiser data\n      this.adminDivingClassesArray.map((diveTrip) => {\n        const organiser = diveTrip.organiser;\n        switch (organiser.collectionId) {\n          case USERPROFILECOLLECTION:\n            organiser.item = this.userPublicProfilesList.find(\n              (user) => user.uid === organiser.id\n            );\n            break;\n          case DIVECENTERSSCOLLECTION:\n            organiser.item = this.divingCentersList.find(\n              (dc) => dc.id === organiser.id\n            );\n            break;\n          case DIVESCHOOLSSCOLLECTION:\n            organiser.item = this.divingSchoolsList.find(\n              (school) => school.id === organiser.id\n            );\n            break;\n        }\n        if (this.userRoles) {\n          const role = this.userRoles.editorOf[diveTrip.id];\n          diveTrip.editor = role && role.roles && role.roles.length > 0;\n          diveTrip.owner = role && role.roles && role.roles.includes(\"owner\");\n        }\n      });\n\n      //filter by trips id for clients visualisation\n      if (this.filterByClasses) {\n        const tripsArray = Object.keys(this.filterByClasses);\n        this.adminDivingClassesArray = this.adminDivingClassesArray.filter(\n          (trip) => tripsArray.includes(trip.id)\n        );\n      }\n      this.updateView = !this.updateView;\n    }\n  }\n\n  update(event, id) {\n    event.stopPropagation();\n    DivingClassesService.presentDivingClassUpdate(null, null, id);\n  }\n\n  delete(event, id) {\n    event.stopPropagation();\n    DivingClassesService.deleteDivingClass(id);\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.loadingDivingClasses\n          ? [\n              <app-skeletons skeleton=\"diveTrip\" />,\n              <app-skeletons skeleton=\"diveTrip\" />,\n              <app-skeletons skeleton=\"diveTrip\" />,\n              <app-skeletons skeleton=\"diveTrip\" />,\n              <app-skeletons skeleton=\"diveTrip\" />,\n            ]\n          : undefined}\n        {this.creatingNewDivingClass ? (\n          <app-skeletons skeleton=\"diveTrip\" />\n        ) : undefined}\n        {this.adminDivingClassesArray.map((diveClass) =>\n          this.editingDivingClass == diveClass.id ? (\n            <app-skeletons skeleton=\"diveTrip\" />\n          ) : (\n            <ion-item\n              button\n              onClick={() => DivingClassesService.pushDivingClass(diveClass.id)}\n              detail\n            >\n              {diveClass.organiser &&\n              diveClass.organiser.item &&\n              diveClass.organiser.item.photoURL ? (\n                <ion-avatar slot=\"start\">\n                  <ion-img src={diveClass.organiser.item.photoURL} />\n                </ion-avatar>\n              ) : undefined}\n              <ion-label>\n                <h2>{diveClass.displayName}</h2>\n                <h4>{format(diveClass.date, \"PP\")}</h4>\n                {diveClass.organiser &&\n                diveClass.organiser.item &&\n                diveClass.organiser.item.displayName ? (\n                  <p>\n                    <my-transl tag=\"organiser\" text=\"Organiser\" />\n                    {\": \" + diveClass.organiser.item.displayName}\n                  </p>\n                ) : undefined}\n              </ion-label>\n              {diveClass.owner ? (\n                <ion-button\n                  fill=\"clear\"\n                  color=\"danger\"\n                  icon-only\n                  slot=\"end\"\n                  onClick={(ev) => this.delete(ev, diveClass.id)}\n                >\n                  <ion-icon name=\"trash\" slot=\"end\"></ion-icon>\n                </ion-button>\n              ) : undefined}\n              {diveClass.editor ? (\n                <ion-button\n                  fill=\"clear\"\n                  color=\"divingclass\"\n                  icon-only\n                  slot=\"end\"\n                  onClick={(ev) => this.update(ev, diveClass.id)}\n                >\n                  <ion-icon name=\"create\" slot=\"end\"></ion-icon>\n                </ion-button>\n              ) : undefined}\n            </ion-item>\n          )\n        )}\n\n        {this.adminDivingClassesArray.length == 0 ? (\n          <ion-item>\n            <ion-label>\n              <h2>\n                {TranslationService.getTransl(\n                  \"no-dive-classes\",\n                  \"No diving classes yet. Look for your next class with our diving schools and instructors!\"\n                )}\n              </h2>\n            </ion-label>\n          </ion-item>\n        ) : undefined}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}