{"version":3,"names":["pageCustomerDetailsCss","PageCustomerDetailsStyle0","PageCustomerDetails","this","markers","titles","tag","text","disabled","componentWillLoad","loadCustomer","SystemService","presentLoading","customer","CustomersService","getCustomer","itemId","dismissLoading","locations","length","forEach","location","position","geopoint","marker","latitude","longitude","icon","type","name","color","size","push","loadMap","conditions","EAF","LF","CCM","error","RouterService","goBack","presentAlertError","componentDidLoad","slider","Swiper","speed","spaceBetween","allowTouchMove","autoHeight","on","slideChange","updateAutoHeight","customElements","whenDefined","mapElement","el","querySelector","mapContainer","setAttribute","mapHeight","setTimeout","triggerMapResize","fitToBounds","updateSlider","editCustomer","modal","presentCustomerUpdate","onDidDismiss","then","locationTypeSegmentChanged","ev","locationTypeSegment","detail","value","openOperatingCondition","condition","conditionData","openModal","editable","update","undefined","render","coverURL","photoURL","h","item","key","fullName","backButton","rightButtonText","TrasteelService","isCustomerDBAdmin","fill","rightButtonFc","Environment","getAppColor","swiper","class","vertical","horizontal","slot","style","marginTop","fabButtonTopMarginString","onClick","lines","labelTag","labelText","detailText","getCustomerTypes","typeId","typeName","fullNameOther","otherPlantName","otherPlantNameOther","shortName","group","map","index","groupName","groupOwnershipPerc","owner","mode","scrollable","onIonChange","layout","getLocationsTypes","locationName","button","Date","date","toLocaleDateString","id","pageId","center"],"sources":["src/components/trasteel/pages/crm/page-customer-details/page-customer-details.scss?tag=page-customer-details","src/components/trasteel/pages/crm/page-customer-details/page-customer-details.tsx"],"sourcesContent":["page-customer-details {\n  /* Component styles go here */\n}\n","import {Component, Element, Prop, State, h} from \"@stencil/core\";\nimport {Customer} from \"../../../../../interfaces/trasteel/customer/customer\";\nimport {CustomersService} from \"../../../../../services/trasteel/crm/customers\";\nimport Swiper from \"swiper\";\nimport {\n  CustomerConditionCCM,\n  CustomerConditionEAF,\n  CustomerConditionLF,\n  Marker,\n} from \"../../../../../components\";\nimport {\n  fabButtonTopMarginString,\n  mapHeight,\n} from \"../../../../../helpers/utils\";\nimport {RouterService} from \"../../../../../services/common/router\";\nimport {SystemService} from \"../../../../../services/common/system\";\nimport {TrasteelService} from \"../../../../../services/trasteel/common/services\";\nimport {Environment} from \"../../../../../global/env\";\n\n@Component({\n  tag: \"page-customer-details\",\n  styleUrl: \"page-customer-details.scss\",\n})\nexport class PageCustomerDetails {\n  @Element() el: HTMLElement;\n  @Prop() itemId: string;\n  @State() customer: Customer;\n  @State() locationTypeSegment: number = 0;\n  markers: Marker[] = [];\n  mapElement: HTMLAppMapElement;\n  titles = [\n    {tag: \"information\", text: \"Information\", disabled: false},\n    {tag: \"locations\", text: \"Locations\", disabled: false},\n    {\n      tag: \"operating-conditions\",\n      text: \"Operating Conditions\",\n      disabled: false,\n    },\n    {tag: \"map\", text: \"Map\", disabled: false},\n  ];\n  @State() slider: Swiper;\n\n  async componentWillLoad() {\n    await this.loadCustomer();\n  }\n\n  async loadCustomer() {\n    await SystemService.presentLoading(\"loading\");\n    try {\n      this.customer = await CustomersService.getCustomer(this.itemId);\n      SystemService.dismissLoading();\n      this.markers = [];\n      if (this.customer.locations.length > 0) {\n        this.customer.locations.forEach((location) => {\n          if (location.position && location.position.geopoint) {\n            const marker = {\n              latitude: location.position.geopoint.latitude,\n              longitude: location.position.geopoint.longitude,\n              icon: {\n                type: \"ionicon\",\n                name: \"location\", //CustomersService.locationsTypes(location.type)[0].locationName,\n                color: \"secondary\",\n                size: \"large\",\n              },\n            };\n            this.markers.push(marker);\n          }\n        });\n        if (this.markers.length > 0) this.loadMap();\n        this.titles[1].disabled = this.customer.locations.length == 0;\n        this.titles[2].disabled = !(\n          this.customer.conditions.EAF.length > 0 ||\n          this.customer.conditions.LF.length > 0 ||\n          this.customer.conditions.CCM.length > 0\n        );\n        this.titles[3].disabled =\n          this.customer.locations.length == 0 || this.markers.length == 0;\n      }\n    } catch (error) {\n      SystemService.dismissLoading();\n      RouterService.goBack();\n      SystemService.presentAlertError(error);\n    }\n  }\n\n  async componentDidLoad() {\n    this.slider = new Swiper(\".slider-customer\", {\n      speed: 400,\n      spaceBetween: 100,\n      allowTouchMove: false,\n      autoHeight: true,\n      on: {\n        slideChange: () => {\n          this.slider ? this.slider.updateAutoHeight() : null;\n        },\n      },\n    });\n    if (this.markers.length > 0) this.loadMap();\n  }\n\n  async loadMap() {\n    //reset map height inside slide\n    await customElements.whenDefined(\"app-map\");\n    this.mapElement = this.el.querySelector(\"#map\");\n    if (this.mapElement) {\n      const mapContainer = this.el.querySelector(\"#map-container\");\n      mapContainer.setAttribute(\n        \"style\",\n        \"height: \" + (mapHeight(this.customer) + 20) + \"px\"\n      ); //-cover photo -slider  - title\n      setTimeout(() => {\n        this.mapElement.triggerMapResize();\n        this.mapElement.fitToBounds(this.markers);\n      });\n    }\n    this.updateSlider();\n  }\n\n  async editCustomer() {\n    const modal = await CustomersService.presentCustomerUpdate(this.itemId);\n    //update customer data after modal dismiss\n    modal.onDidDismiss().then(() => this.loadCustomer());\n  }\n\n  locationTypeSegmentChanged(ev) {\n    this.locationTypeSegment = ev.detail.value;\n    this.updateSlider();\n  }\n\n  async openOperatingCondition(\n    condition: \"EAF\" | \"LF\" | \"CCM\",\n    conditionData?:\n      | CustomerConditionEAF\n      | CustomerConditionLF\n      | CustomerConditionCCM\n  ) {\n    await RouterService.openModal(\"modal-operating-conditions-questionnaire\", {\n      condition,\n      conditionData: conditionData,\n      editable: false,\n    });\n  }\n\n  updateSlider() {\n    setTimeout(() => {\n      //reset slider height to show address\n      this.slider ? this.slider.update() : undefined;\n    }, 100);\n  }\n\n  render() {\n    return [\n      this.customer.coverURL || this.customer.photoURL ? (\n        <ion-header>\n          <app-item-cover item={this.customer}></app-item-cover>\n        </ion-header>\n      ) : undefined,\n      <ion-header>\n        <app-navbar\n          text={this.customer.fullName}\n          color=\"trasteel\"\n          backButton={\n            this.customer && !this.customer.coverURL && !this.customer.photoURL\n          }\n          rightButtonText={\n            TrasteelService.isCustomerDBAdmin()\n              ? {\n                  icon: \"create\",\n                  fill: \"outline\",\n                  tag: \"edit\",\n                  text: \"Edit\",\n                }\n              : null\n          }\n          rightButtonFc={() => this.editCustomer()}\n        ></app-navbar>\n      </ion-header>,\n      <app-header-segment-toolbar\n        color={Environment.getAppColor()}\n        swiper={this.slider}\n        titles={this.titles}\n      ></app-header-segment-toolbar>,\n      <ion-content class=\"slides\">\n        <ion-fab\n          vertical=\"top\"\n          horizontal=\"start\"\n          slot=\"fixed\"\n          style={{marginTop: fabButtonTopMarginString(2)}}\n        >\n          <ion-fab-button\n            onClick={() => RouterService.goBack()}\n            class=\"fab-icon\"\n          >\n            <ion-icon name=\"arrow-back-circle-outline\"></ion-icon>\n          </ion-fab-button>\n        </ion-fab>\n        <swiper-container class=\"slider-customer swiper\">\n          <swiper-wrapper class=\"swiper-wrapper\">\n            <swiper-slide class=\"swiper-slide\">\n              <ion-list class=\"ion-no-padding\">\n                <app-item-detail\n                  lines=\"none\"\n                  labelTag=\"plant_type\"\n                  labelText=\"Plant Type\"\n                  detailText={\n                    CustomersService.getCustomerTypes(this.customer.typeId)[0]\n                      .typeName\n                  }\n                ></app-item-detail>\n                <app-item-detail\n                  lines=\"none\"\n                  labelTag=\"name\"\n                  labelText=\"Name\"\n                  detailText={this.customer.fullName}\n                ></app-item-detail>\n                <app-item-detail\n                  lines=\"none\"\n                  labelTag=\"local_name\"\n                  labelText=\"Local Name\"\n                  detailText={this.customer.fullNameOther}\n                ></app-item-detail>\n                <app-item-detail\n                  lines=\"none\"\n                  labelTag=\"other_name\"\n                  labelText=\"Other Name\"\n                  detailText={this.customer.otherPlantName}\n                ></app-item-detail>\n                <app-item-detail\n                  lines=\"none\"\n                  labelTag=\"other_name\"\n                  labelText=\"Other Local Name\"\n                  detailText={this.customer.otherPlantNameOther}\n                ></app-item-detail>\n                <app-item-detail\n                  lines=\"none\"\n                  labelTag=\"short_name\"\n                  labelText=\"Short Name\"\n                  detailText={this.customer.shortName}\n                ></app-item-detail>\n                {this.customer.group.map((group, index) => (\n                  <app-item-detail\n                    lines=\"none\"\n                    labelTag={index == 0 ? \"group\" : null}\n                    labelText={index == 0 ? \"Group\" : null}\n                    detailText={\n                      group.groupName + \" [\" + group.groupOwnershipPerc + \"%]\"\n                    }\n                  ></app-item-detail>\n                ))}\n                <app-item-detail\n                  lines=\"none\"\n                  labelTag=\"owner\"\n                  labelText=\"Owner\"\n                  detailText={this.customer.owner.groupName}\n                ></app-item-detail>\n                <app-customer-plant-production\n                  customer={this.customer}\n                ></app-customer-plant-production>\n              </ion-list>\n            </swiper-slide>\n            <swiper-slide class=\"swiper-slide\">\n              <div>\n                {this.customer.locations.length > 0\n                  ? [\n                      <ion-toolbar>\n                        <ion-segment\n                          mode=\"ios\"\n                          scrollable\n                          onIonChange={(ev) =>\n                            this.locationTypeSegmentChanged(ev)\n                          }\n                          value={this.locationTypeSegment}\n                        >\n                          {this.customer.locations.map((location, index) => (\n                            <ion-segment-button\n                              value={index}\n                              layout=\"icon-start\"\n                            >\n                              <ion-label>\n                                {\n                                  CustomersService.getLocationsTypes(\n                                    location.type\n                                  )[0].locationName\n                                }\n                              </ion-label>\n                            </ion-segment-button>\n                          ))}\n                        </ion-segment>\n                      </ion-toolbar>,\n                      this.customer.locations.map((location, index) => (\n                        <div>\n                          {this.locationTypeSegment == index ? (\n                            <div>\n                              <app-location\n                                locations={CustomersService.getLocationsTypes()}\n                                location={location}\n                                slider={this.slider}\n                                editable={false}\n                              ></app-location>\n                            </div>\n                          ) : undefined}\n                        </div>\n                      )),\n                    ]\n                  : undefined}\n              </div>\n            </swiper-slide>\n            <swiper-slide class=\"swiper-slide\">\n              <ion-list>\n                <ion-item-divider>EAF</ion-item-divider>\n                {this.customer.conditions.EAF.map((condition) => (\n                  <ion-item\n                    button\n                    detail={true}\n                    onClick={() =>\n                      this.openOperatingCondition(\"EAF\", condition)\n                    }\n                  >\n                    <ion-label>\n                      {new Date(condition.date).toLocaleDateString()}\n                    </ion-label>\n                  </ion-item>\n                ))}\n                <ion-item-divider>LF</ion-item-divider>\n                {this.customer.conditions.LF.map((condition) => (\n                  <ion-item\n                    button\n                    detail={true}\n                    onClick={() =>\n                      this.openOperatingCondition(\"EAF\", condition)\n                    }\n                  >\n                    <ion-label>\n                      {new Date(condition.date).toLocaleDateString()}\n                    </ion-label>\n                  </ion-item>\n                ))}\n                <ion-item-divider>CCM</ion-item-divider>\n                {this.customer.conditions.CCM.map((condition) => (\n                  <ion-item>\n                    <ion-label>\n                      {new Date(condition.date).toLocaleDateString()}\n                    </ion-label>\n                  </ion-item>\n                ))}\n              </ion-list>\n            </swiper-slide>\n            <swiper-slide class=\"swiper-slide\">\n              {this.customer.locations.length > 0 && this.markers.length > 0 ? (\n                <div id=\"map-container\">\n                  <app-map\n                    id=\"map\"\n                    pageId=\"customer-details\"\n                    center={this.customer.locations[0]}\n                    markers={this.markers}\n                  ></app-map>\n                </div>\n              ) : (\n                <div>\n                  <ion-item>NO MAP AVAILABLE</ion-item>\n                </div>\n              )}\n            </swiper-slide>\n          </swiper-wrapper>\n        </swiper-container>\n      </ion-content>,\n    ];\n  }\n}\n"],"mappings":"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","ignoreList":[]}