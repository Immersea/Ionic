{"file":"app-decoplanner-charts.entry.esm.js","mappings":"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","names":["orderBy","toString"],"sources":["src/components/udive/app/decoplanner/app-decoplanner-charts/app-decoplanner-charts.scss?tag=app-decoplanner-charts","src/components/udive/app/decoplanner/app-decoplanner-charts/app-decoplanner-charts.tsx"],"sourcesContent":["app-decoplanner-charts {\n  width: 100%;\n  height: 100%;\n\n  #chart-container {\n    width: 100%;\n    height: 100%;\n  }\n}\n","import {Component, h, Prop, State, Watch, Element} from \"@stencil/core\";\n\nimport {DivePlan} from \"../../../../../services/udive/planner/dive-plan\";\nimport {DecoplannerParameters} from \"../../../../../interfaces/udive/planner/decoplanner-parameters\";\nimport {orderBy, toString} from \"lodash\";\nimport {GasBlenderService} from \"../../../../../services/udive/planner/gas-blender\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\n\nimport {DecoplannerDive} from \"../../../../../interfaces/udive/planner/decoplanner-dive\";\nimport {Environment} from \"../../../../../global/env\";\nimport FusionCharts from \"fusioncharts\";\nimport {FusionchartsService} from \"../../../../../services/common/fusioncharts\";\nimport {slideHeight} from \"../../../../../helpers/utils\";\nimport {DiveToolsService} from \"../../../../../services/udive/planner/dive-tools\";\n\n@Component({\n  tag: \"app-decoplanner-charts\",\n  styleUrl: \"app-decoplanner-charts.scss\",\n})\nexport class AppDecoplannerCharts {\n  @Element() el: HTMLElement;\n  @Prop() diveDataToShare: any;\n  @State() dive: DecoplannerDive = new DecoplannerDive();\n  @State() updateView = true;\n  @Prop() isShown: boolean;\n  @Watch(\"isShown\")\n  update() {\n    if (this.isShown) {\n      this.createCharts();\n    }\n  }\n  @Watch(\"diveDataToShare\")\n  updateDiveDataToShare() {\n    this.updateViewParams();\n  }\n\n  chartElement: any;\n  createThumbNail: any;\n  renderedChart = \"profile-chart\";\n  runtimeChartDataSource: any;\n  runtimeChartData: any;\n  runtimeChart: any;\n  profileChartDataSource: any;\n  profileChartData: any;\n  profileChart: any;\n  depthChartDataSet: any;\n  depthChartDataSource: any;\n  depthChartData: any;\n  depthChart: any;\n  heatMapDataSet: any;\n  heatMapChartData: any;\n  heatMapChartDataSource: any;\n  heatMapChart: any;\n  selectedCCRChart = \"CCR\";\n  showChartFilters = false;\n\n  dives: Array<DecoplannerDive>;\n  index: number;\n  divePlan: DivePlan;\n  parameters: DecoplannerParameters = new DecoplannerParameters();\n  tissueData: any;\n  resolution = 3;\n  chartsData: any;\n  selectedCompartments = [\"1\", \"4\", \"7\", \"10\", \"13\", \"16\"]; //,\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\"];\n  showCompartments = [];\n  selectedSeries = [\"ppN2\", \"ppHe\"]; //\"maxAmb\",\"mValue\"\n  showSeries = {\n    ppN2: null,\n    ppHe: null,\n    maxAmb: null,\n    mValue: null,\n  };\n  selectedGas = \"N2\";\n  selectedChartModel = \"BUHL\";\n\n  screenWidth: number;\n  screenHeight: number;\n\n  segmentTitles: {\n    profiles: string;\n    runtime: string;\n    depth: string;\n    heatmap: string;\n  };\n\n  editPlan = true;\n\n  componentWillLoad() {\n    this.screenWidth = window.screen.width;\n    this.screenHeight = window.screen.height;\n    this.segmentTitles = {\n      profiles: TranslationService.getTransl(\"profiles\", \"Profiles\"),\n      runtime: TranslationService.getTransl(\"runtime\", \"Runtime\"),\n      depth: TranslationService.getTransl(\"depth\", \"Depth\"),\n      heatmap: TranslationService.getTransl(\"heatmap\", \"Heatmap\"),\n    };\n    this.updateViewParams();\n  }\n\n  refreshChartElement() {\n    this.chartElement = this.el.querySelector(\"#chart-container\");\n  }\n\n  componentDidLoad() {\n    if (this.dive && this.dive.profilePoints.length > 0) {\n      this.refreshChartElement();\n      this.createCharts();\n    }\n  }\n\n  async createCharts() {\n    this.profileChart = FusionchartsService.createChart(this.profileChartData);\n    this.runtimeChart = FusionchartsService.createChart(this.runtimeChartData);\n    this.depthChart = FusionchartsService.createChart(this.depthChartData);\n    this.heatMapChart = FusionchartsService.createChart(this.heatMapChartData);\n\n    this.filterCharts(true);\n  }\n\n  disconnectedCallback() {\n    //clear created FusionCharts\n    FusionchartsService.disposeChart(this.profileChartData);\n    FusionchartsService.disposeChart(this.runtimeChartData);\n    FusionchartsService.disposeChart(this.depthChartData);\n    FusionchartsService.disposeChart(this.heatMapChartData);\n  }\n\n  updateViewParams() {\n    const params = this.diveDataToShare;\n    this.editPlan = params.editPlan == false ? false : true;\n    this.divePlan = params.divePlan;\n    this.index = params.index;\n    this.dives = this.divePlan.dives;\n    this.dive = this.divePlan.dives[this.index];\n    this.parameters = this.divePlan.configuration.parameters;\n    this.selectedCCRChart = this.parameters.configuration;\n    this.resetChartData();\n  }\n\n  /*\n   * create charts\n   */\n  resetChartData() {\n    let oc = this.getTissueData();\n    let chartWidth = \"100%\";\n    let chartHeight = slideHeight(null, 4, true);\n    let runtimeData = this.divePlan.getCompartmentChart(\n      this.tissueData,\n      \"runtime\",\n      this.index,\n      this.resolution,\n      oc,\n      this.showCompartments,\n      this.showSeries\n    );\n    let vtrendLines = [];\n    let trendLines = [];\n    let colors = [\n      \"1abc9c\",\n      \"3498db\",\n      \"e67e22\",\n      \"c0392b\",\n      \"f39c12\",\n      \"2980b9\",\n      \"16a085\",\n      \"27ae60\",\n      \"e74c3c\",\n      \"d35400\",\n      \"2ecc71\",\n    ];\n    let color_selected = 0,\n      diveIndex = 0;\n    let previousRuntime = 0,\n      alpha = 15;\n    let model =\n      this.selectedChartModel == \"BUHL\" ? this.dive.BUHL : this.dive.VPM;\n    let diveProfile = model.profile;\n    if (diveIndex > 0) {\n      vtrendLines.push({\n        startvalue: previousRuntime,\n        endvalue: previousRuntime + this.dive.surfaceInterval * 60,\n        alpha: alpha,\n        displayValue: TranslationService.getTransl(\n          \"surface-interval\",\n          \"Surface Interval\"\n        ),\n        color: colors[color_selected++],\n      });\n      color_selected = 0;\n      previousRuntime += this.dive.surfaceInterval * 60;\n    }\n    let runtime = model.runtime;\n    let gas,\n      newgas,\n      previousEnd = 0,\n      end = 0,\n      maxdepth = 0,\n      maxruntime = 0;\n    diveProfile.forEach((profile) => {\n      if (!gas) gas = profile.gas;\n      newgas = GasBlenderService.getGasName(profile.gas);\n      if (newgas !== gas || profile.runtime >= runtime) {\n        vtrendLines.push({\n          startvalue: previousEnd + previousRuntime,\n          endvalue:\n            (profile.runtime < runtime ? end : runtime) + previousRuntime,\n          alpha: alpha,\n          displayValue: gas,\n          color: colors[color_selected],\n        });\n        if (colors.length == color_selected) {\n          color_selected = 0;\n        } else {\n          color_selected++;\n        }\n        previousEnd = end;\n        gas = GasBlenderService.getGasName(profile.gas);\n        if (profile.runtime >= runtime) {\n          //repetitive dives\n          diveIndex++;\n          previousRuntime += model.runtime;\n        } else {\n          trendLines.push({\n            startvalue: -profile.depth,\n            linethickness: 2,\n            displayvalue: newgas,\n            color: colors[color_selected],\n            valueonright: \"1\",\n            dashed: 0,\n          });\n        }\n      }\n      end = profile.runtime;\n      if (profile.depth > maxdepth) maxdepth = profile.depth;\n    });\n\n    //round maxdepth to next multiple of 3\n    let maxdepthDecimals = maxdepth % 3 != 0;\n    if (maxdepthDecimals) {\n      maxdepth = Math.ceil(maxdepth / 3.0) * 3;\n    } else {\n      maxdepth = Math.ceil((maxdepth + 3) / 3.0) * 3;\n    }\n    let divLines = Math.ceil(maxdepth / 3) - 1;\n\n    //add avergage depth trendLines\n    trendLines.push({\n      startvalue: -model.average_bottom_depth,\n      linethickness: 1,\n      displayvalue:\n        TranslationService.getTransl(\"avg\", \"Avg.\") +\n        \" \" +\n        TranslationService.getTransl(\"bottom\", \"bottom\"),\n      color: colors[8],\n      valueonright: \"0\",\n      dashed: 1,\n      dashgap: 5,\n    });\n    trendLines.push({\n      startvalue: -this.dive.BUHL.average_dive_depth,\n      linethickness: 1,\n      displayvalue: TranslationService.getTransl(\"avg\", \"Avg.\") + \" BUHL\",\n      color: colors[9],\n      valueonright: \"0\",\n      dashed: 1,\n      dashgap: 5,\n    });\n    trendLines.push({\n      startvalue: -this.dive.VPM.average_dive_depth,\n      linethickness: 1,\n      displayvalue: TranslationService.getTransl(\"avg\", \"Avg.\") + \" VPM\",\n      color: colors[10],\n      valueonright: \"0\",\n      dashed: 1,\n      dashgap: 5,\n    });\n    let profileData = this.divePlan.getDecoChart(this.index, true, true);\n\n    maxruntime = profileData[\"maxruntime\"];\n    //round maxdepth to next multiple of 5\n    let steps = 5;\n    if (maxruntime > 90) steps = 10;\n    let maxruntimeDecimals = maxruntime % steps != 0;\n    if (maxruntimeDecimals) {\n      maxruntime = Math.ceil(maxruntime / steps) * steps;\n    } else {\n      maxruntime = Math.ceil((maxruntime + steps) / steps) * steps;\n    }\n    let divVLines = Math.ceil(maxruntime / steps) - 1;\n\n    this.profileChartDataSource = {\n      chart: {\n        theme: \"fint\",\n        caption: TranslationService.getTransl(\"dive-profiles\", \"Dive Profiles\"),\n        subcaption: TranslationService.getTransl(\n          \"for-diff-models\",\n          \"for different models\"\n        ),\n        yaxisname:\n          TranslationService.getTransl(\"depth\", \"Depth\") +\n          \", \" +\n          DiveToolsService.depthUnit,\n        xaxisname: TranslationService.getTransl(\"runtime\", \"Runtime\") + \", min\",\n        rotateYAxisName: \"1\",\n        exportEnabled: 0,\n        showBorder: \"0\",\n        bgColor: \"#ffffff\",\n        baseFont: \"Helvetica Neue,Arial\",\n        showCanvasBorder: \"0\",\n        showShadow: \"0\",\n        showAlternateHGridColor: \"0\",\n        canvasBgColor: \"#ffffff\",\n        yaxismaxValue: 0,\n        yAxisMinValue: -maxdepth,\n        xAxisMaxValue: maxruntime,\n        numDivLines: divLines,\n        numVDivLines: divVLines,\n        labelStep: 5,\n        pixelsPerPoint: \"0\",\n        pixelsPerLabel: \"30\",\n        lineThickness: \"1\",\n        compactdatamode: \"1\",\n        dataseparator: \"|\",\n        labelHeight: \"30\",\n        scrollheight: \"10\",\n        flatScrollBars: \"1\",\n        scrollShowButtons: \"0\",\n        scrollColor: \"#cccccc\",\n        legendBgAlpha: \"0\",\n        legendBorderAlpha: \"0\",\n        legendShadow: \"0\",\n        legendItemFontSize: \"10\",\n        legendItemFontColor: \"#666666\",\n        export: {enabled: false},\n      },\n      categories: [\n        {\n          category: profileData[\"categories\"],\n        },\n      ],\n      dataset: profileData[\"dataset\"],\n      trendLines: [\n        {\n          line: trendLines,\n        },\n      ],\n    };\n    this.profileChartData = {\n      id: \"profile-chart\",\n      type: \"zoomline\",\n      renderAt: \"chart-container\",\n      width: chartWidth,\n      height: chartHeight,\n      dataSource: this.profileChartDataSource,\n    };\n\n    this.runtimeChartDataSource = {\n      chart: {\n        theme: \"fint\",\n        caption: TranslationService.getTransl(\n          \"tissue-saturation-runtime\",\n          \"Tissue saturation based on the dive runtime\"\n        ),\n        subcaption:\n          \"(\" + this.selectedChartModel + \"-\" + this.selectedCCRChart + \")\",\n        yaxisname:\n          TranslationService.getTransl(\"depth\", \"Depth\") +\n          \", \" +\n          DiveToolsService.depthUnit,\n        xaxisname: TranslationService.getTransl(\"runtime\", \"Runtime\") + \", min\",\n        rotateYAxisName: \"1\",\n        adjustDiv: 0,\n        adjustVDiv: 0,\n        numDivLines: divLines,\n        numVDivLines: divVLines,\n        yAxisMaxValue: maxdepth,\n        xAxisMaxValue: maxruntime,\n        exportEnabled: 0,\n        plotTooltext:\n          \"<div id='valueDiv'><b>$seriesName</b>, \" +\n          TranslationService.getTransl(\"time\", \"Time\") +\n          \" (min) : <b>$xDataValue</b>, \" +\n          TranslationService.getTransl(\"pressure\", \"Pressure\") +\n          \" (\" +\n          DiveToolsService.pressUnit +\n          \") :<b>$yDataValue</b></div>\",\n      },\n      dataset: runtimeData,\n      vtrendLines: [\n        {\n          line: oc ? vtrendLines : [],\n        },\n      ],\n    };\n    this.runtimeChartData = {\n      id: \"runtime-chart\",\n      type: \"zoomscatter\",\n      renderAt: \"chart-container\",\n      width: chartWidth,\n      height: chartHeight,\n      dataFormat: \"json\",\n      dataSource: this.runtimeChartDataSource,\n    };\n\n    this.depthChartDataSet = this.divePlan.getCompartmentChart(\n      this.tissueData,\n      \"depth\",\n      this.index,\n      this.resolution,\n      oc,\n      this.showCompartments,\n      this.showSeries\n    );\n    //reverse order dataset\n    this.depthChartDataSet.map((data) => {\n      data.data = orderBy(data.data, \"item\", \"desc\");\n      return data;\n    });\n    this.depthChartDataSource = {\n      chart: {\n        theme: \"fint\",\n        caption: TranslationService.getTransl(\n          \"tissue-saturation-depth\",\n          \"Tissue saturation based on the dive depth\"\n        ),\n        subcaption:\n          \"(\" + this.selectedChartModel + \"-\" + this.selectedCCRChart + \")\",\n        yaxisname:\n          TranslationService.getTransl(\"pressure\", \"Pressure\") +\n          \", \" +\n          DiveToolsService.pressUnit,\n        xaxisname:\n          TranslationService.getTransl(\"depth\", \"Depth\") +\n          \", \" +\n          DiveToolsService.depthUnit,\n        rotateYAxisName: 1,\n        exportEnabled: 0,\n        adjustDiv: 0,\n        adjustVDiv: 0,\n        numDivLines: divLines - (maxdepthDecimals ? 0 : 1),\n        numVDivLines: divLines - (maxdepthDecimals ? 0 : 1),\n        yAxisMaxValue: maxdepth - (maxdepthDecimals ? 0 : 3),\n        xAxisMaxValue: maxdepth - (maxdepthDecimals ? 0 : 3),\n        plotTooltext:\n          \"<div id='valueDiv'><b>$seriesName</b>, \" +\n          TranslationService.getTransl(\"depth\", \"Depth\") +\n          \" (\" +\n          DiveToolsService.depthUnit +\n          \") : <b>$xDataValue</b>, \" +\n          TranslationService.getTransl(\"pressure\", \"Pressure\") +\n          \" (\" +\n          DiveToolsService.pressUnit +\n          \") :<b>$yDataValue</b></div>\",\n      },\n      dataset: this.depthChartDataSet,\n    };\n    this.depthChartData = {\n      id: \"depth-chart\",\n      type: \"zoomscatter\",\n      renderAt: \"chart-container\",\n      width: chartWidth,\n      height: chartHeight,\n      dataFormat: \"json\",\n      dataSource: this.depthChartDataSource,\n    };\n\n    this.heatMapDataSet = this.divePlan.getCompartmentChart(\n      this.tissueData,\n      \"heatmap\" + this.selectedGas,\n      this.index,\n      this.resolution,\n      oc\n    );\n    let rowIds = [];\n    for (let i = 0; i <= 15; i++) {\n      rowIds.push({\n        id: i.toString(),\n        label: \"Tissue #\" + (i + 1),\n      });\n    }\n    let columnIds = [];\n    for (let i = 1; i < this.heatMapDataSet[0].columns; i++) {\n      columnIds.push({\n        id: this.heatMapDataSet[i].columnid.toString(),\n        label: this.heatMapDataSet[i].depth.toString(),\n      });\n    }\n    this.heatMapChartDataSource = {\n      chart: {\n        theme: \"fint\",\n        caption:\n          TranslationService.getTransl(\n            \"heatmap-tissues\",\n            \"HeatMap of tissues supersaturation\"\n          ) +\n          \" (\" +\n          this.selectedGas +\n          \")\",\n        subcaption:\n          \"(\" + this.selectedChartModel + \"-\" + this.selectedCCRChart + \")\",\n        xAxisName:\n          TranslationService.getTransl(\"depth\", \"Depth\") +\n          \" (\" +\n          DiveToolsService.depthUnit +\n          \")\",\n        yAxisName: TranslationService.getTransl(\n          \"tissues\",\n          \"Tissues (Slow -> Fast)\"\n        ),\n        showPlotBorder: 0,\n        exportEnabled: 0,\n      },\n      rows: {\n        row: rowIds,\n      },\n      columns: {\n        column: columnIds,\n      },\n      dataset: [{data: this.heatMapDataSet}],\n      colorRange: {\n        gradient: \"1\",\n        minValue: \"-100\",\n        code: \"#00ffff\",\n        startLabel: TranslationService.getTransl(\"ongassing\", \"On-Gassing\"),\n        endLabel: TranslationService.getTransl(\"offgassing\", \"Off-Gassing\"),\n        color: [\n          {\n            code: \"#00ffff\",\n            minValue: \"-100\",\n            maxValue: \"-80\",\n            //\"label\": \"60%\"\n          },\n          {\n            code: \"#0000ff\",\n            minValue: \"-80\",\n            maxValue: \"-40\",\n            //\"label\": \"30%\"\n          },\n          {\n            code: \"#7f00ff\",\n            minValue: \"-40\",\n            maxValue: \"-10\",\n            //\"label\": \"10%\"\n          },\n          {\n            code: \"#000\",\n            minValue: \"-10\",\n            maxValue: \"-2\",\n          },\n          {\n            code: \"#000\",\n            minValue: \"-2\",\n            maxValue: \"-1\",\n          },\n          {\n            code: \"#00ff00\",\n            minValue: \"-1\",\n            maxValue: \"0\",\n            label: TranslationService.getTransl(\"saturated\", \"Saturated\"),\n            //\"label\": \"20%\"\n          },\n          {\n            code: \"#00ff00\",\n            minValue: \"0\",\n            maxValue: \"10\",\n            //\"label\": \"20%\"\n          },\n          {\n            code: \"#ffff00\",\n            minValue: \"10\",\n            maxValue: \"30\",\n            //\"label\": \"50%\"\n          },\n          {\n            code: \"#ff0000\",\n            minValue: \"30\",\n            maxValue: \"70\",\n            //\"label\": \"100%\"\n          },\n          {\n            code: \"#b30000\",\n            minValue: \"70\",\n            maxValue: \"100\",\n            //\"label\": \"100%\"\n          },\n          {\n            code: \"#ffffff\",\n            minValue: \"100\",\n            maxValue: \"120\",\n            //\"label\": \"120%\"\n          },\n        ],\n      },\n    };\n    this.heatMapChartData = {\n      id: \"heatmap-chart\",\n      type: \"heatmap\",\n      renderAt: \"chart-container\",\n      width: chartWidth,\n      height: chartHeight,\n      dataFormat: \"json\",\n      dataSource: this.heatMapChartDataSource,\n    };\n  }\n\n  filterCharts(render = false) {\n    if (this.dive.BUHL) {\n      let oc = this.getTissueData();\n      //update chart data and filter\n      this.chartsData = this.divePlan.getCompartmentsChartsData(\n        this.tissueData,\n        oc,\n        this.index\n      );\n      for (let i = 0; i < 16; i++) {\n        if (this.selectedCompartments.indexOf((i + 1).toString()) !== -1) {\n          this.showCompartments[i] = true;\n        } else {\n          this.showCompartments[i] = false;\n        }\n      }\n      if (this.selectedSeries.indexOf(\"ppN2\") !== -1) {\n        this.showSeries.ppN2 = true;\n      } else {\n        this.showSeries.ppN2 = false;\n      }\n      if (this.selectedSeries.indexOf(\"ppHe\") !== -1) {\n        this.showSeries.ppHe = true;\n      } else {\n        this.showSeries.ppHe = false;\n      }\n      if (this.selectedSeries.indexOf(\"maxAmb\") !== -1) {\n        this.showSeries.maxAmb = true;\n      } else {\n        this.showSeries.maxAmb = false;\n      }\n      if (this.selectedSeries.indexOf(\"mValue\") !== -1) {\n        this.showSeries.mValue = true;\n      } else {\n        this.showSeries.mValue = false;\n      }\n      this.resetChartData();\n      this.profileChart.setJSONData(this.profileChartDataSource);\n      this.runtimeChart.setJSONData(this.runtimeChartDataSource);\n      this.depthChart.setJSONData(this.depthChartDataSource);\n      this.heatMapChart.setJSONData(this.heatMapChartDataSource);\n\n      if (render && this.runtimeChart) {\n        this.renderChart();\n      }\n    }\n  }\n\n  renderChart(chart?) {\n    this.refreshChartElement();\n    if (this.chartElement) {\n      if (chart) this.renderedChart = chart;\n      let chartObj = FusionCharts(this.renderedChart);\n      setTimeout(() => {\n        chartObj.render();\n      });\n      this.updateView = !this.updateView;\n    }\n  }\n\n  fullscreenChart() {\n    /*this.showChartFilters = false;\n      let cloned_chart = FusionCharts(this.renderedChart).clone();\n      //let chartObj = new FusionCharts(cloned_chart);\n      let modal = this.modalCtrl.create(\"ModalChartFullscreen\",cloned_chart,{\n          enableBackdropDismiss: false\n      });\n      modal.present();*/\n  }\n\n  switchCharts(type) {\n    if (type == \"CCR\") {\n      if (this.selectedCCRChart != \"OC\") {\n        this.selectedCCRChart = \"OC\";\n      } else {\n        this.selectedCCRChart = this.parameters.configuration;\n      }\n    } else {\n      if (this.selectedChartModel == \"VPM\") {\n        this.selectedChartModel = \"BUHL\";\n      } else {\n        this.selectedChartModel = \"VPM\";\n      }\n    }\n    this.updateView = !this.updateView;\n    this.filterCharts(false);\n  }\n\n  private getTissueData() {\n    let tissuesBUHL,\n      tissuesVPM,\n      oc = true;\n    if (this.selectedCCRChart == \"CCR\" || this.selectedCCRChart == \"pSCR\") {\n      oc = false;\n    } else {\n      oc = true;\n    }\n    tissuesVPM = this.divePlan.createVPMTissuesFromDives();\n    tissuesBUHL = this.divePlan.BUHL.tissues;\n    this.tissueData =\n      this.selectedChartModel == \"BUHL\" ? tissuesBUHL : tissuesVPM;\n    return oc;\n  }\n\n  presentFiltersPopover() {\n    this.showChartFilters = false;\n    /*let params = {\n        renderedChart: this.renderedChart,\n        selectedCompartments: this.selectedCompartments,\n        selectedSeries: this.selectedSeries,\n        selectedGas: this.selectedGas,\n        resolution: this.resolution\n    }\n    let popover = this.popoverCtrl.create(\"PopoverChartsFilters\",params,{enableBackdropDismiss:false});\n    popover.present({ ev: event});\n    popover.onDidDismiss(updatedData => {\n        if (updatedData) {\n            this.renderedChart = updatedData.renderedChart;\n            this.selectedCompartments = updatedData.selectedCompartments;\n            this.selectedSeries = updatedData.selectedSeries;\n            this.selectedGas = updatedData.selectedGas;\n            this.resolution = updatedData.resolution;\n            this.filterCharts();\n        }\n    });*/\n  }\n\n  segmentChartChanged(ev) {\n    this.renderedChart = ev.detail.value;\n    this.renderChart(this.renderedChart);\n  }\n\n  render() {\n    return [\n      <div class=\"ion-no-padding\">\n        <ion-row>\n          <ion-col>\n            <ion-segment\n              onIonChange={(ev) => this.segmentChartChanged(ev)}\n              color={Environment.getAppColor()}\n              mode=\"ios\"\n              value={this.renderedChart}\n            >\n              <ion-segment-button value=\"profile-chart\">\n                <ion-label>{this.segmentTitles.profiles}</ion-label>\n              </ion-segment-button>\n              <ion-segment-button value=\"runtime-chart\">\n                <ion-label>{this.segmentTitles.runtime}</ion-label>\n              </ion-segment-button>\n              <ion-segment-button value=\"depth-chart\">\n                <ion-label>{this.segmentTitles.depth}</ion-label>\n              </ion-segment-button>\n              <ion-segment-button value=\"heatmap-chart\">\n                <ion-label>{this.segmentTitles.heatmap}</ion-label>\n              </ion-segment-button>\n            </ion-segment>\n          </ion-col>\n        </ion-row>\n      </div>,\n      <ion-fab\n        vertical=\"top\"\n        horizontal=\"start\"\n        slot=\"fixed\"\n        style={{paddingTop: \"50px\"}}\n      >\n        <ion-fab-button size=\"small\">\n          <ion-icon name=\"funnel\"></ion-icon>\n        </ion-fab-button>\n        <ion-fab-list side=\"end\" style={{paddingTop: \"55px\"}}>\n          {this.parameters.configuration != \"OC\" &&\n          this.renderedChart !== \"profile-chart\" ? (\n            <ion-fab-button onClick={() => this.switchCharts(\"CCR\")}>\n              {this.selectedCCRChart}\n            </ion-fab-button>\n          ) : undefined}\n          {this.renderedChart !== \"profile-chart\" ? (\n            <ion-fab-button onClick={() => this.switchCharts(\"model\")}>\n              {this.selectedChartModel == \"BUHL\" ? \"VPM\" : \"BUHL\"}\n            </ion-fab-button>\n          ) : undefined}\n\n          <ion-fab-button onClick={() => this.presentFiltersPopover()}>\n            <ion-icon name=\"options\"></ion-icon>\n          </ion-fab-button>\n        </ion-fab-list>\n      </ion-fab>,\n      <div\n        id=\"chart-container\"\n        style={{height: toString(this.screenHeight - 150) + \"px\"}}\n      ></div>,\n    ];\n  }\n}\n"],"version":3}