{"version":3,"names":["appDiveClassBookingsCss","AppDiveClassBookingsStyle0","AppDiveClassBookings","this","availableSpots","updateStudentsList","studentsList","usersList","students","divingClass","student","listItem","Object","assign","user","UserService","getMapDataUserDetails","uid","editable","push","status","userId","userBooking","registeredStudents","map","index","numberOfStudents","updateView","componentWillLoad","userProfile","userSub","userProfile$","subscribe","segmentTitles","cancelled","TranslationService","getTransl","applied","registered","denied","disconnectedCallback","unsubscribe","segmentChanged","ev","detail","value","segment","toNumber","applyToClass","alert","alertController","create","header","message","buttons","text","handler","async","evaluations","saveBooking","role","present","booking","waitingRequest","bookings","DivingClassesService","sendBookingRequest","divingClassId","error","updateBooking","i","search","item","find","editStudents","isEditing","saveStudents","render","h","key","lines","xxx","length","slot","onClick","tag","undefined","expand","color","skeleton","k","photoURL","src","displayName","style","maxWidth","marginLeft","mode","Environment","getAppColor","onIonChange","name","appDivingClassScheduleCss","AppDivingClassScheduleStyle0","AppDivingClassSchedule","updateClassSchedule","scheduleArray","activities","schedule","activity","day","keys","dayNum","activityPreviousDate","Date","date","activityDate","differenceInDays","addDays","formattedDate","format","orderBy","forEach","parseISO","saveDatesToDives","scheduleEmit","emit","updateActivities","updateDate","dateString","divePlan","addHours","dives","size","presentation","max","readonly","toISOString","onScheduleEmit"],"sources":["src/components/udive/app/diving-classes/app-dive-class-bookings/app-dive-class-bookings.scss?tag=app-dive-class-bookings","src/components/udive/app/diving-classes/app-dive-class-bookings/app-dive-class-bookings.tsx","src/components/udive/app/diving-classes/app-diving-class-schedule/app-diving-class-schedule.scss?tag=app-diving-class-schedule","src/components/udive/app/diving-classes/app-diving-class-schedule/app-diving-class-schedule.tsx"],"sourcesContent":["app-dive-class-bookings {\n  /* Component styles go here */\n  width: 100%;\n  height: 100%;\n}\n","import {Component, h, Prop, State, Element, Method} from \"@stencil/core\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {\n  DivingClass,\n  Student,\n} from \"../../../../../interfaces/udive/diving-class/divingClass\";\nimport {UserService} from \"../../../../../services/common/user\";\nimport {DivingClassesService} from \"../../../../../services/udive/divingClasses\";\nimport {Subscription} from \"rxjs\";\nimport {alertController} from \"@ionic/core\";\nimport {toNumber} from \"lodash\";\nimport {Environment} from \"../../../../../global/env\";\n\n@Component({\n  tag: \"app-dive-class-bookings\",\n  styleUrl: \"app-dive-class-bookings.scss\",\n})\nexport class AppDiveClassBookings {\n  @Element() el: HTMLElement;\n  @Prop({mutable: true}) divingClass: DivingClass;\n  @Prop() divingClassId: string;\n  @Prop() editable = false;\n  @State() isEditing = false;\n  @State() segment: number = 0;\n  @State() studentsList: any[];\n  availableSpots = [];\n  @State() waitingRequest = false;\n  @State() updateView = false;\n  segmentTitles: {\n    cancelled: string;\n    applied: string;\n    registered: string;\n    denied: string;\n  };\n  @State() userBooking: Student;\n  userSub: Subscription;\n  userId: string;\n  usersList: any[];\n  loogBookButton: boolean;\n\n  @Method()\n  async updateStudentsList() {\n    this.studentsList = [];\n    this.availableSpots = [];\n    this.usersList = [];\n    let students = this.divingClass.students;\n    for (let student of students) {\n      let listItem = {\n        ...student,\n        user: await UserService.getMapDataUserDetails(student.uid),\n      };\n      //show all students only to organiser\n      if (this.editable) {\n        this.studentsList.push(listItem);\n      } else if (\n        listItem.status == \"applied\" ||\n        listItem.status == \"registered\"\n      ) {\n        this.studentsList.push(listItem);\n      }\n\n      if (this.userId && student.uid === this.userId) {\n        this.userBooking = student;\n      }\n    }\n    if (this.divingClass.status == \"active\") {\n      let registeredStudents = 0;\n      this.divingClass.students.map((student) => {\n        if (student.status == \"registered\") {\n          registeredStudents++;\n        }\n      });\n      for (\n        let index = 0;\n        index < this.divingClass.numberOfStudents - registeredStudents;\n        index++\n      ) {\n        this.availableSpots.push(0);\n      }\n    }\n\n    this.updateView = !this.updateView;\n    return true;\n  }\n\n  componentWillLoad() {\n    this.userId =\n      UserService.userProfile && UserService.userProfile.uid\n        ? UserService.userProfile.uid\n        : null;\n    if (this.userId) {\n      this.updateStudentsList();\n    } else {\n      this.userSub = UserService.userProfile$.subscribe((user) => {\n        this.userId = user && user.uid ? user.uid : null;\n        this.updateStudentsList();\n      });\n    }\n\n    this.segmentTitles = {\n      cancelled: TranslationService.getTransl(\"cancelled\", \"Cancelled\"),\n      applied: TranslationService.getTransl(\"applied\", \"Applied\"),\n      registered: TranslationService.getTransl(\"registered\", \"Registered\"),\n      denied: TranslationService.getTransl(\"denied\", \"Denied\"),\n    };\n  }\n\n  disconnectedCallback() {\n    this.userSub.unsubscribe();\n  }\n\n  segmentChanged(ev) {\n    if (ev.detail.value) {\n      this.segment = toNumber(ev.detail.value);\n    }\n  }\n\n  async applyToClass() {\n    const alert = await alertController.create({\n      header: TranslationService.getTransl(\n        \"apply-to-class\",\n        \"Apply to this class\"\n      ),\n      message: TranslationService.getTransl(\n        \"apply-to-class-message\",\n        \"Please check first with the instructor eventual preconditions to apply to this class. Are you sure?\"\n      ),\n      buttons: [\n        {\n          text: TranslationService.getTransl(\"ok\", \"OK\"),\n          handler: async () => {\n            this.userBooking = {\n              uid: this.userId,\n              status: \"applied\",\n              evaluations: [],\n            };\n            this.saveBooking(this.userBooking);\n          },\n        },\n        {\n          text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n          role: \"cancel\",\n        },\n      ],\n    });\n    alert.present();\n  }\n\n  async saveBooking(booking) {\n    try {\n      this.waitingRequest = true;\n      const bookings = await DivingClassesService.sendBookingRequest(\n        this.divingClassId,\n        booking.uid,\n        booking.status,\n        booking.evaluations\n      );\n      this.waitingRequest = false;\n      this.divingClass.students = bookings;\n      this.updateStudentsList();\n    } catch (error) {\n      this.waitingRequest = false;\n    }\n  }\n\n  updateBooking(i, ev) {\n    const search = this.studentsList[i];\n    const item = this.divingClass.students.find(\n      (student) => student.uid === search.uid\n    );\n    item.status = ev.detail.value;\n  }\n\n  editStudents() {\n    this.isEditing = true;\n  }\n\n  saveStudents() {\n    this.isEditing = false;\n    this.updateStudentsList();\n  }\n\n  render() {\n    return (\n      <ion-list>\n        <ion-item lines=\"none\">\n          <ion-label>\n            {TranslationService.getTransl(\n              \"max-participants\",\n              \"Max xxx participants\",\n              {xxx: this.divingClass.numberOfStudents}\n            )}\n          </ion-label>\n          {this.editable &&\n          this.divingClass.students &&\n          this.divingClass.students.length > 0 ? (\n            !this.isEditing ? (\n              <ion-button slot=\"end\" onClick={() => this.editStudents()}>\n                <my-transl tag=\"edit\" text=\"Edit\" />\n              </ion-button>\n            ) : (\n              [\n                <ion-button slot=\"end\" onClick={() => this.saveStudents()}>\n                  <my-transl tag=\"save\" text=\"Save\" />\n                </ion-button>,\n              ]\n            )\n          ) : undefined}\n        </ion-item>\n        {!this.editable &&\n        !this.waitingRequest &&\n        this.divingClass.status == \"active\" &&\n        (!this.userBooking ||\n          (this.userBooking && this.userBooking.status == null)) ? (\n          <ion-button expand=\"block\" onClick={() => this.applyToClass()}>\n            <my-transl tag=\"apply-to-class\" text=\"Apply to this class\" />\n          </ion-button>\n        ) : undefined}\n        {this.userBooking &&\n        (this.userBooking.status == \"cancelled\" ||\n          this.userBooking.status == \"denied\") ? (\n          <ion-button expand=\"block\" color=\"warning\">\n            <my-transl\n              tag={this.userBooking.status}\n              text={this.userBooking.status}\n            />\n          </ion-button>\n        ) : undefined}\n        {this.waitingRequest ? (\n          <app-skeletons skeleton=\"diveTripBooking\" />\n        ) : undefined}\n        {this.studentsList.map((student, k) =>\n          student.uid == this.userId && this.waitingRequest ? (\n            <app-skeletons skeleton=\"diveTripBooking\" />\n          ) : (\n            <ion-item>\n              {!this.isEditing && student.user.photoURL ? (\n                <ion-avatar slot=\"start\">\n                  <ion-img src={student.user.photoURL} />\n                </ion-avatar>\n              ) : undefined}\n              <ion-label>{student.user.displayName}</ion-label>\n              {!this.isEditing ? (\n                <ion-note slot=\"end\">\n                  {TranslationService.getTransl(student.status, student.status)}\n                </ion-note>\n              ) : (\n                <ion-segment\n                  style={{\n                    maxWidth: \"40%\",\n                    marginLeft: \"15%\",\n                  }}\n                  slot=\"end\"\n                  mode=\"ios\"\n                  color={Environment.getAppColor()}\n                  onIonChange={(ev) => this.updateBooking(k, ev)}\n                  value={student.status}\n                >\n                  <ion-segment-button value=\"cancelled\">\n                    <my-transl tag=\"cancelled\" text=\"Cancelled\" />\n                  </ion-segment-button>\n                  <ion-segment-button value=\"applied\">\n                    <my-transl tag=\"applied\" text=\"Applied\" />\n                  </ion-segment-button>\n                  <ion-segment-button value=\"registered\">\n                    <my-transl tag=\"registered\" text=\"Registered\" />\n                  </ion-segment-button>\n                  <ion-segment-button value=\"denied\">\n                    <my-transl tag=\"denied\" text=\"Denied\" />\n                  </ion-segment-button>\n                </ion-segment>\n              )}\n            </ion-item>\n          )\n        )}\n        {this.availableSpots.map(() => (\n          <ion-item>\n            <ion-icon slot=\"start\" name=\"person-add-outline\"></ion-icon>\n            <ion-label>\n              <my-transl tag=\"available\" text=\"Available\" />\n            </ion-label>\n          </ion-item>\n        ))}\n      </ion-list>\n    );\n  }\n}\n","app-diving-class-schedule {\n    /* Component styles go here */\n}\n","import {\n  Component,\n  h,\n  Prop,\n  State,\n  Event,\n  EventEmitter,\n  Method,\n} from \"@stencil/core\";\nimport {orderBy, toNumber} from \"lodash\";\nimport {DivingClass} from \"../../../../../interfaces/udive/diving-class/divingClass\";\nimport {addDays, addHours, differenceInDays, format, parseISO} from \"date-fns\";\n\n@Component({\n  tag: \"app-diving-class-schedule\",\n  styleUrl: \"app-diving-class-schedule.scss\",\n})\nexport class AppDivingClassSchedule {\n  @Event() scheduleEmit: EventEmitter<any>;\n  @Prop({mutable: true}) divingClass: DivingClass;\n  @Prop() editable: boolean = false;\n  @State() scheduleArray: any[] = [];\n\n  @Method()\n  async updateClassSchedule() {\n    this.scheduleArray = [];\n    if (this.divingClass.activities && this.divingClass.activities.length > 0) {\n      const schedule = {};\n      //get all schedule days\n      this.divingClass.activities.map((activity) => {\n        schedule[activity.day] = null;\n      });\n      Object.keys(schedule).map((day) => {\n        const dayNum = toNumber(day);\n        const activityPreviousDate = this.divingClass.schedule[dayNum - 1]\n          ? this.divingClass.schedule[dayNum - 1]\n          : new Date();\n        const date = this.divingClass.schedule[dayNum];\n        /*const activityDate =\n          date && moment(date).diff(moment(activityPreviousDate), \"days\") >= 1\n            ? moment(this.divingClass.schedule[dayNum])\n            : moment(activityPreviousDate).add(1, \"day\");\n        schedule[day] = moment(activityDate.format(\"LL\")).toDate();*/\n\n        const activityDate =\n          date && differenceInDays(date, activityPreviousDate) >= 1\n            ? this.divingClass.schedule[dayNum]\n            : addDays(activityPreviousDate, 1);\n\n        // Formatting the date to 'LL' format (e.g., \"September 4, 1986\") and converting it to a JavaScript Date object.\n        const formattedDate = format(activityDate, \"PP\"); // 'PP' corresponds to 'LL' in moment.js\n        schedule[day] = new Date(formattedDate);\n\n        this.divingClass.schedule[day] = schedule[day];\n      });\n\n      orderBy(Object.keys(schedule)).forEach((day) => {\n        this.scheduleArray.push({\n          day: day,\n          date: parseISO(schedule[day]),\n        });\n      });\n      this.saveDatesToDives();\n    }\n    this.scheduleEmit.emit(true);\n  }\n\n  componentWillLoad() {\n    this.updateClassSchedule();\n  }\n\n  updateActivities(ev) {\n    this.divingClass.activities = ev.detail;\n    this.updateClassSchedule();\n  }\n\n  updateDate(day, dateString) {\n    this.divingClass.schedule[day] = new Date(dateString);\n    this.updateClassSchedule();\n  }\n\n  saveDatesToDives() {\n    this.divingClass.activities = this.divingClass.activities.map(\n      (activity) => {\n        if (activity.divePlan) {\n          /*const date = moment(this.divingClass.schedule[activity.day])\n            .add(12, \"hours\")\n            .toDate();*/\n          // Add 12 hours to the date\n          const date = addHours(this.divingClass.schedule[activity.day], 12);\n          activity.divePlan.dives[0].date = date;\n        }\n        return activity;\n      }\n    );\n  }\n\n  render() {\n    return (\n      <ion-grid>\n        <ion-row>\n          {this.scheduleArray.map((day) => (\n            <ion-col size=\"3\">\n              <ion-card>\n                <ion-card-title>\n                  <my-transl tag=\"day\" text=\"Day\" />\n                  {\" \" + day.day}\n                </ion-card-title>\n                <ion-card-content>\n                  <ion-datetime\n                    presentation=\"date\"\n                    onIonChange={(ev) =>\n                      this.updateDate(day.day, ev.detail.value)\n                    }\n                    max=\"2050\"\n                    readonly={!this.editable}\n                    value={day.date.toISOString()}\n                  ></ion-datetime>\n                </ion-card-content>\n              </ion-card>\n            </ion-col>\n          ))}\n        </ion-row>\n        <ion-row>\n          <app-dive-course-activities\n            schedule={this.divingClass.activities}\n            editable={this.editable}\n            onScheduleEmit={(ev) => this.updateActivities(ev)}\n          />\n        </ion-row>\n      </ion-grid>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}