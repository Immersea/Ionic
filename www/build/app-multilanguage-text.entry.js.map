{"file":"app-multilanguage-text.entry.esm.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,uBAAuB,GAAG,uFAAuF;;MCQ1G,oBAAoB;;;;gCAEH,IAAI;;IAEhC,iBAAiB;QACf,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;QAC/D,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;;QAEpD,IACE,aAAa;YACb,aAAa,CAAC,MAAM,GAAG,CAAC;YACxB,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAC9C;;YAEA,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAChC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;aAC9B;iBAAM;gBACL,IAAI,CAAC,gBAAgB,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;aAC1C;SACF;KACF;IAED,sBAAsB,CAAC,EAAE;QACvB,IAAI,EAAE,CAAC,MAAM,EAAE;YACb,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC,MAAM,CAAC;SACnC;KACF;IAED,MAAM;QACJ,QACE,EAAC,IAAI,uDACH,mEACE,kEACE;;QAGI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAE1B,EACV,gEAAS,IAAI,EAAC,GAAG,IACf,4EACE,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EACvC,MAAM,QACN,UAAU,QACV,iBAAiB,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,GACrC,CACf,CACF,CACD,CACN,EACP;KACH;;;;;;","names":[],"sources":["src/components/common/app/common/app-multilanguage-text/app-multilanguage-text.scss?tag=app-multilanguage-text","src/components/common/app/common/app-multilanguage-text/app-multilanguage-text.tsx"],"sourcesContent":["app-multilanguage-text {\n  ion-grid {\n    --ion-grid-column-padding: 0px;\n    --ion-grid-padding: 0px;\n  }\n}\n","import {Component, h, Host, Prop, State} from \"@stencil/core\";\nimport {TextMultilanguage} from \"../../../../../interfaces/interfaces\";\nimport {UserService} from \"../../../../../services/common/user\";\n\n@Component({\n  tag: \"app-multilanguage-text\",\n  styleUrl: \"app-multilanguage-text.scss\",\n})\nexport class AppMultilanguageText {\n  @Prop() text: TextMultilanguage;\n  @State() selectedLanguage = \"en\";\n\n  componentWillLoad() {\n    this.selectedLanguage = UserService.userSettings.getLanguage();\n    const textLanguages = Object.keys(this.text).sort();\n    //check if user language is available\n    if (\n      textLanguages &&\n      textLanguages.length > 0 &&\n      !textLanguages.includes(this.selectedLanguage)\n    ) {\n      //not available - check if english is available\n      if (textLanguages.includes(\"en\")) {\n        this.selectedLanguage = \"en\";\n      } else {\n        this.selectedLanguage = textLanguages[0];\n      }\n    }\n  }\n\n  changeSelectedLanguage(ev) {\n    if (ev.detail) {\n      this.selectedLanguage = ev.detail;\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <ion-grid>\n          <ion-row>\n            <ion-col>\n              {\n                //show according to user language\n                this.text[this.selectedLanguage]\n              }\n            </ion-col>\n            <ion-col size=\"1\">\n              <app-language-picker\n                selectedLangCode={this.selectedLanguage}\n                picker\n                selectOnly\n                onLanguageChanged={(ev) => this.changeSelectedLanguage(ev)}\n              ></app-language-picker>\n            </ion-col>\n          </ion-row>\n        </ion-grid>\n      </Host>\n    );\n  }\n}\n"],"version":3}