{"file":"gas-supply-253aa425.js","mappings":"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","names":["toNumber","round","toInteger"],"sources":["src/interfaces/udive/planner/cylinder.ts","src/interfaces/udive/planner/gas-supply.ts"],"sourcesContent":["import {Gas} from \"./gas\";\nimport {DiveToolsService} from \"../../../services/udive/planner/dive-tools\";\nimport {toNumber} from \"lodash\";\n\nconst VanDerWaals_A_OXYGEN = 1.382;\nconst VanDerWaals_A_HELIUM = 0.0346;\nconst VanDerWaals_A_NITROGEN = 1.37;\nconst VanDerWaals_B_OXYGEN = 0.03186;\nconst VanDerWaals_B_HELIUM = 0.0238;\nconst VanDerWaals_B_NITROGEN = 0.0387;\n\n// Avogradro's number\n//const VanDerWaals_N_A = 6.022E23;\n\nexport class Cylinder {\n  mInternalVolume;\n  mServicePressure;\n  universalGasConstant;\n  atmPressure;\n  /**\n   * Constructor is meant to take values as returned from a tank data model\n   * which stores internal volumes and service pressures (the metric way).\n   *\n   * @param internal_volume Internal volume of the cylinder in capacity units\n   * @param service_pressure Service pressure of the cylinder\n   */\n  constructor(internal_volume, service_pressure?) {\n    this.mInternalVolume = internal_volume;\n    this.mServicePressure = service_pressure\n      ? service_pressure\n      : DiveToolsService.isMetric()\n        ? 230\n        : 3300;\n\n    this.universalGasConstant = DiveToolsService.isMetric()\n      ? 0.083144598\n      : 10.73; // Gas constants in imperial (ft^3 psi R^-1 lb-mol^-1):10.73, metric (L bar K^-1 mol^-1) : 0.083144598\n    this.atmPressure = DiveToolsService.isMetric() ? 1 : 14;\n  }\n\n  /**\n   * Computes the particle attraction factor a for a theoretical homogeneous\n   * gas equivalent in behavior to the given gas mixture.\n   * @param m The gas mix to generate a for.\n   * @return The value of a.\n   */\n  VanDerWaals_computeA(m: Gas) {\n    let x = [m.getFO2(), m.getFN2(), m.getFHe()];\n    let a = [\n      VanDerWaals_A_OXYGEN,\n      VanDerWaals_A_NITROGEN,\n      VanDerWaals_A_HELIUM,\n    ];\n    let total = 0;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        total += toNumber(Math.sqrt(a[i] * a[j]) * x[i] * x[j]);\n      }\n    }\n    return total;\n  }\n\n  /**\n   * Computes the particle volume factor b for a theoretical homogeneous\n   * gas equivalent in behavior to the given gas mixture.\n   * @param m The gas mix to generate b for.\n   * @return The value of b.\n   */\n  VanDerWaals_computeB(m: Gas) {\n    let x = [m.getFO2(), m.getFN2(), m.getFHe()];\n    let b = [\n      VanDerWaals_B_OXYGEN,\n      VanDerWaals_B_NITROGEN,\n      VanDerWaals_B_HELIUM,\n    ];\n    let total = 0;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        total += toNumber(Math.sqrt(b[i] * b[j]) * x[i] * x[j]);\n      }\n    }\n    return total;\n  }\n\n  /**\n   * Build a Cylinder object with a capacity instead of an internal volume\n   * @param capacity The volume of gas the cylinder's contents would occupy at\n   * sea level pressure when the cylinder is filled to the service pressure\n   * @param service_pressure Service pressure of the cylinder\n   * @return A Cylinder object initialized with the given parameters\n   */\n  fromCapacityVdw(capacity, service_pressure) {\n    var c = new Cylinder(0, service_pressure);\n    c.setVdwCapacity(capacity);\n    return c;\n  }\n\n  fromCapacityIdeal(capacity, service_pressure) {\n    var c = new Cylinder(0, service_pressure);\n    c.setIdealCapacity(capacity);\n    return c;\n  }\n\n  /** Returns the air capacity of the cylinder(s)\n   * @return The volume of gas the cylinder's contents would occupy at sea level\n   * pressure when the cylinder is filled with air to the service pressure, in\n   * capacity units\n   */\n  getVdwCapacity() {\n    return toNumber(\n      this.getVdwCapacityAtPressure(this.mServicePressure, new Gas(0.21, 0))\n    );\n  }\n\n  getIdealCapacity() {\n    return toNumber(this.getIdealCapacityAtPressure(this.mServicePressure));\n  }\n\n  setIdealCapacity(capacity) {\n    this.mInternalVolume = capacity / this.mServicePressure;\n  }\n\n  setVdwCapacity(capacity, T = 297) {\n    //T in Kelvin\n    // This is quite similar to getVdwCapacityAtPressure, except\n    // we are solving for V instead of n. The cubic\n    // polynomial is the same, it's just that the\n    // uncertainty is calculated differently.\n    var m = new Gas(0.21, 0);\n    var a = this.VanDerWaals_computeA(m),\n      b = this.VanDerWaals_computeB(m);\n    // Source: http://en.wikipedia.org/wiki/Ideal_gas_constant\n    var RT = T * this.universalGasConstant; //KELVIN 297 temp ambiente * gas constant\n    // A bit of optimization to reduce number of calculations per iteration\n    var PbRT = this.mServicePressure * b + RT,\n      PbRT2 = 2 * PbRT,\n      ab = a * b,\n      P3 = 3 * this.mServicePressure;\n    // Come up with a guess to seed Newton-Raphson. The equation is easily\n    // solved if a and b were 0\n    var v0,\n      v1 = RT / this.mServicePressure;\n\n    // We know what n is because we were given capacity:\n    var n = capacity / RT;\n\n    // Uncertainty math (see below)\n    // V = nv\n    // dV/dv = n\n    var uncertainty = toNumber(n / Math.pow(10, 1) / 2);\n\n    do {\n      v0 = v1;\n      var f =\n        this.mServicePressure * Math.pow(v0, 3) -\n        PbRT * Math.pow(v0, 2) +\n        a * v0 -\n        ab;\n      var fprime = P3 * Math.pow(v0, 2) - PbRT2 * v0 + a;\n      v1 = v0 - f / fprime;\n    } while (Math.abs(v0 - v1) >= uncertainty);\n\n    this.mInternalVolume = toNumber(v1 * n);\n  }\n\n  /**\n   * Get the internal volume of this cylinder\n   * @return The internal volume in capacity units\n   */\n  getInternalVolume() {\n    return this.mInternalVolume;\n  }\n\n  setInternalVolume(internal_volume) {\n    this.mInternalVolume = internal_volume;\n  }\n\n  getServicePressure() {\n    return this.mServicePressure;\n  }\n\n  setServicePressure(service_pressure) {\n    this.mServicePressure = service_pressure;\n  }\n\n  getIdealCapacityAtPressure(pressure) {\n    return (this.mInternalVolume * pressure) / this.atmPressure; //1 atm pression\n  }\n\n  getIdealPressureAtCapacity(capacity) {\n    return (capacity * this.atmPressure) / this.mInternalVolume; //1 atm pression\n  }\n\n  /**\n   * Solves Van der Waals gas equation to get equivalent atmospheric volume at\n   * a given pressure\n   * @param P The pressure of the gas in the cylinder\n   * @param mix The mix in the cylinder, needed to determine a and b constants.\n   * @return The amount of gas in the cylinder to one decimal place\n   */\n  getVdwCapacityAtPressure(P, m, T = 297) {\n    //T in Kelvin\n    // First, the trivial solution. This will cause a divide by 0 if we try to\n    // solve.\n    if (P == 0) {\n      return 0;\n    }\n    // This is solved by finding the root of a cubic polynomial\n    // for the molar volume v = V/n:\n    // choose a reasonable value for T\n    //   P * v^3 - (P*b + R*T) * v^2 + a * v - a * b = 0\n    //   n = V/v\n    // Then we can use ideal gas laws to convert n to V @ 1 ata\n    var a = this.VanDerWaals_computeA(m),\n      b = this.VanDerWaals_computeB(m);\n    var RT = T * this.universalGasConstant; //KELVIN 297 temp ambiente * gas constant\n    // A bit of optimization to reduce number of calculations per iteration\n    var PbRT = P * b + RT,\n      PbRT2 = 2 * PbRT,\n      ab = a * b,\n      P3 = 3 * P;\n    // Come up with a guess to seed Newton-Raphson. The equation is easily\n    // solved if a and b were 0\n    var v0,\n      v1 = RT / P;\n\n    // First-order uncertainty propagation. This lets us know within what\n    // tolerance we need to compute v to get the right volume.\n    // The variable we are solving for is v.\n    // The result we care about the uncertainty for is V0, the volume at 1 ata.\n    //   V0 = n * R * T / P0 [ideal gas law] = V * R * T / (P0 * v)\n    // To compute the uncertainty in V0, we use the Taylor series method for\n    // v alone.\n    //   deltaV0 = dV0/dv*deltav\n    // ...where dV0/dv = - V*R*T / (P0 * v^2)\n    // We want to make sure deltaV0 is less than 0.05, so...\n    //   deltav < P0 * v^2 / (20 * V * R * T)\n    var uncertainty_multiplier = 1 / (20 * this.mInternalVolume * RT);\n\n    do {\n      v0 = v1;\n      var f = P * Math.pow(v0, 3) - PbRT * Math.pow(v0, 2) + a * v0 - ab;\n      var fprime = P3 * Math.pow(v0, 2) - PbRT2 * v0 + a;\n      v1 = v0 - f / fprime;\n    } while (Math.abs(v0 - v1) / uncertainty_multiplier >= v1 * v1);\n\n    const capacity = (this.mInternalVolume * RT) / (this.atmPressure * v1);\n\n    return capacity;\n  }\n\n  getVdwPressureAtCapacity(capacity, m, T) {\n    //T in Kelvin\n    // This is given by the following:\n    // choose a reasonable value for T\n    // n = Patm*V/(R*T) (since volume is at atmospheric pressure, it's close enough to ideal)\n    // v = V/n\n    // P = R * T / (v - b) - a / v^2\n    var RT = T * this.universalGasConstant;\n    var v = (this.mInternalVolume * RT) / (this.atmPressure * capacity),\n      a = this.VanDerWaals_computeA(m),\n      b = this.VanDerWaals_computeB(m);\n    return RT / (v - b) - a / Math.pow(v, 2);\n  }\n}\n","import {Gas} from \"./gas\";\nimport {Cylinder} from \"./cylinder\";\nimport {DiveToolsService} from \"../../../services/udive/planner/dive-tools\";\nimport {round, toInteger, toNumber} from \"lodash\";\n\nexport class GasSupply {\n  /**\n   * Create a new gas source from a cylinder size, an initial mix, and a starting\n   * pressure.\n   * @param c The cylinder object to use for this supply\n   * @param m The initial mix in the cylinder\n   * @param pressure The initial pressure of the cylinder's content, in the same\n   * units that were used for the cylinder object.\n   */\n  mMix: Gas;\n  mCylinder: Cylinder;\n  mPressure: number;\n  mUseIdealGasLaws: boolean;\n  mTemperature: number;\n  mUnits: string;\n\n  constructor(c, m, pressure, ideal_gas_laws, temperature, units?) {\n    this.mCylinder = c;\n    this.mMix = m;\n    this.mPressure = pressure;\n    this.mUseIdealGasLaws = ideal_gas_laws;\n    this.mTemperature = temperature;\n    this.mUnits = units ? units : DiveToolsService.units;\n  }\n\n  useIdealGasLaws(ideal) {\n    this.mUseIdealGasLaws = ideal;\n  }\n\n  getMix() {\n    return this.mMix;\n  }\n\n  setMix(m: Gas) {\n    this.mMix = m;\n  }\n\n  getCylinder() {\n    return this.mCylinder;\n  }\n\n  setCylinder(c: Cylinder) {\n    this.mCylinder = c;\n  }\n\n  getPressure() {\n    return this.mPressure;\n  }\n\n  setPressure(p) {\n    this.mPressure = p;\n  }\n\n  getTemperature() {\n    return this.mTemperature;\n  }\n\n  getKTemperature() {\n    //Kelvin\n    if (this.mUnits == \"Imperial\") {\n      return ((this.mTemperature - 32) * 5) / 9 + 273.15;\n    } else {\n      return this.mTemperature + 273.15;\n    }\n  }\n\n  setTemperature(t) {\n    this.mTemperature = t;\n  }\n  /**\n   * Get the total amount of gas in capacity units at sea level pressure\n   * @return The amount of gas in the supply\n   */\n  getGasAmount() {\n    if (this.mUseIdealGasLaws) {\n      return this.mCylinder.getIdealCapacityAtPressure(this.mPressure);\n    } else {\n      return this.mCylinder.getVdwCapacityAtPressure(\n        this.mPressure,\n        this.mMix,\n        this.getKTemperature()\n      );\n    }\n  }\n\n  getFO2() {\n    return round(this.mMix.getFO2(), 2);\n  }\n\n  getFN2() {\n    return round(this.mMix.getFN2(), 2);\n  }\n\n  getFHe() {\n    return round(this.mMix.getFHe(), 2);\n  }\n\n  getO2Amount() {\n    return this.getGasAmount() * this.getFO2();\n  }\n\n  getN2Amount() {\n    return this.getGasAmount() * this.getFN2();\n  }\n\n  getHeAmount() {\n    return this.getGasAmount() * this.getFHe();\n  }\n\n  /**\n   * Adjust the pressure in the supply so there's the given amount of gas.\n   * @param amt The amount to leave in the cylinder in capacity units at\n   * sea level pressure\n   * @return The GasSupply object\n   */\n  drainToGasAmount(amt) {\n    if (this.mUseIdealGasLaws) {\n      this.mPressure = this.mCylinder.getIdealPressureAtCapacity(amt);\n    } else {\n      this.mPressure = this.mCylinder.getVdwPressureAtCapacity(\n        amt,\n        this.mMix,\n        this.getKTemperature()\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Adjust the pressure in the supply so there's the given amount of oxygen.\n   * @param amt The amount of oxygen to leave in the cylinder in capacity\n   * units at sea level pressure\n   * @return The GasSupply object\n   */\n  drainToO2Amount(amt) {\n    return this.drainToGasAmount(amt / this.mMix.getFO2());\n  }\n\n  drainToN2Amount(amt) {\n    return this.drainToGasAmount(amt / this.mMix.getFHe());\n  }\n\n  drainToHeAmount(amt) {\n    return this.drainToGasAmount(amt / this.mMix.getFN2());\n  }\n\n  /**\n   * Add a given amount of oxygen to the cylinder, updating the mix and pressure\n   * accordingly.\n   * @param amt The amount of oxygen to add in 1-atm volumes\n   * @return The modified GasSupply object\n   */\n  addO2(amt) {\n    return this.addGas(new Gas(1, 0), amt);\n  }\n\n  /**\n   * Add a given amount of helium to the cylinder, updating the mix and pressure\n   * accordingly.\n   * @param amt The amount of helium to add in 1-atm volumes\n   * @return The modified GasSupply object\n   */\n  addHe(amt) {\n    return this.addGas(new Gas(0, 1), amt);\n  }\n\n  /**\n   * Add a given amount of arbitrary gas to the cylinder, updating the mix and\n   * pressure accordingly.\n   * @param mix The gas mix being added\n   * @param amt The amount of gas to add in 1-atm volumes\n   * @return The modified GasSupply object\n   */\n  addGas(mix, amt) {\n    var current_amt = this.getGasAmount(),\n      o2 = this.mMix.getFO2() * current_amt + mix.getFO2() * amt,\n      he = this.mMix.getFHe() * current_amt + mix.getFHe() * amt,\n      new_total_amt = current_amt + amt;\n    this.mMix = new Gas(o2 / new_total_amt, he / new_total_amt);\n    if (this.mUseIdealGasLaws) {\n      this.mPressure = this.mCylinder.getIdealPressureAtCapacity(new_total_amt);\n    } else {\n      this.mPressure = this.mCylinder.getVdwPressureAtCapacity(\n        new_total_amt,\n        this.mMix,\n        this.getKTemperature()\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Add a mix to the current contents of the supply.\n   * @param m The mix to add\n   * @param final_pressure The final pressure for the supply\n   * @return The modified GasSupply object.\n   */\n  topup(m, final_pressure) {\n    // Trivial solution: we're adding the same mix that's already in the cylinder\n    if (this.mMix.isEqualTo(m)) {\n      this.mPressure = final_pressure;\n      return this;\n    }\n    // This method uses the Secant Method to numerically determine\n    // the result to within 1/2% of each final mix. We do this because\n    // writing out the single equation for the system would be terrible,\n    // not to mention calculating its derivative.\n\n    // Compute uncertainty\n    // Max uncertainty in fo2 and fhe is 0.5% = 0.005.\n    // fo2 == fo2i + fo2t == fo2i + vt * fo2t\n    // e_fo2 == fo2t * e_vt <= 0.005\n    // e_fhe == fhet * e_vt <= 0.005\n    var error = 0.005 / Math.max(m.getFO2(), m.getFHe());\n\n    // cache member variables as local\n    var c = this.mCylinder;\n    var mix = this.mMix;\n    var pressure = toInteger(this.mPressure);\n\n    // Start with two guesses for Secant Method\n    // The first guess assumes ideal behavior as the gas is added, and assumes\n    // the topup mix is close enough to determine capacity.\n    var vt_n =\n      (1 - pressure / final_pressure) *\n      c.getVdwCapacityAtPressure(final_pressure, m, this.getKTemperature());\n    // The second guess assumes ideal behavior as the gas is added, and assumes\n    // the starting mix is close enough to determine capacity.\n    var vt_n_1 =\n      (1 - pressure / final_pressure) *\n      c.getVdwCapacityAtPressure(final_pressure, mix, this.getKTemperature());\n\n    var d;\n    do {\n      // Initialize a temporary this. Because addGas acts on the object,\n      // we have to re-instantiate it each time.\n      var test = new GasSupply(\n        c,\n        mix,\n        pressure,\n        this.mUseIdealGasLaws,\n        this.getKTemperature()\n      ); //this.create(c, mix, pressure);\n      // Each computation evaluates the difference between the actual pressure\n      // after adding a certain amount of gas, and the desired pressure.\n      var f_n = test.addGas(m, vt_n).getPressure() - final_pressure;\n      test = new GasSupply(\n        c,\n        mix,\n        pressure,\n        this.mUseIdealGasLaws,\n        this.getKTemperature()\n      ); //new this.create(c, mix, pressure);\n      var f_n_1 = test.addGas(m, vt_n_1).getPressure() - final_pressure;\n      d = ((vt_n - vt_n_1) / (f_n - f_n_1)) * f_n;\n      vt_n_1 = vt_n;\n      vt_n -= d;\n    } while (Math.abs(d) < error);\n\n    // Now that we have our solution, run addGas on self.\n    this.addGas(m, vt_n);\n    // Cheat! Set mPressure to what would be expected since addGas may not have\n    // gotten it exactly.\n    this.mPressure = final_pressure;\n    return this;\n  }\n\n  /*\n   * create forms\n   */\n  getForm() {\n    let form = {\n      o2: this.mMix.getO2(),\n      he: this.mMix.getHe(),\n      temp: round(toNumber(this.getTemperature()), 2),\n      bar: round(toNumber(this.getPressure()), 2),\n    };\n    return form;\n  }\n}\n"],"version":3}