{"file":"app-admin-dive-trips.entry.esm.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,oBAAoB,GAAG,wBAAwB;;MCiCxC,iBAAiB;;;QAe5B,2BAAsB,GAAuB,EAAE,CAAC;QAEhD,sBAAiB,GAA0B,EAAE,CAAC;QAE9C,wBAAmB,GAA2B,EAAE,CAAC;QAEjD,sBAAiB,GAA0B,EAAE,CAAC;;;mCAlBR,EAAE;0BAClB,KAAK;mCACI,KAAK;gCACR,IAAI;+BAEL,EAAE;;IAgB7B,MAAM,iBAAiB;QACrB,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC,oBAAoB,CAAC,SAAS,CACtE,CAAC,KAAK;YACJ,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;SAClC,CACF,CAAC;QACF,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,CACnE,CAAC,KAAK;YACJ,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;SAC9B,CACF,CAAC;;;QAIF,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,IACE,IAAI,CAAC,oBAAoB;gBACzB,oBAAoB,CAAC,sBAAsB,EAC3C;gBACA,IAAI,CAAC,cAAc;oBACjB,oBAAoB,CAAC,0BAA0B,CAAC,SAAS,CAAC,CAAC,GAAG,KAC5D,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CACxB,CAAC;aACL;iBAAM,IACL,IAAI,CAAC,oBAAoB;gBACzB,oBAAoB,CAAC,sBAAsB,EAC3C;gBACA,IAAI,CAAC,cAAc;oBACjB,oBAAoB,CAAC,0BAA0B,CAAC,SAAS,CAAC,CAAC,GAAG,KAC5D,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CACxB,CAAC;aACL;SACF;aAAM;YACL,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,GAAG,KAC7D,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CACxB,CAAC;SACH;;QAGD,IAAI,CAAC,uBAAuB;YAC1B,WAAW,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC,UAAU;;gBAEvD,IAAI,CAAC,sBAAsB,GAAG,UAAU,CAAC;gBACzC,IAAI,CAAC,MAAM,EAAE,CAAC;aACf,CAAC,CAAC;;QAEL,IAAI,CAAC,kBAAkB,GAAG,oBAAoB,CAAC,kBAAkB,CAAC,SAAS,CACzE,CAAC,UAAU;;YAET,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;YACpC,IAAI,CAAC,MAAM,EAAE,CAAC;SACf,CACF,CAAC;;QAEF,IAAI,CAAC,oBAAoB;YACvB,sBAAsB,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,UAAU;;gBAE/D,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC;gBACtC,IAAI,CAAC,MAAM,EAAE,CAAC;aACf,CAAC,CAAC;;QAEL,IAAI,CAAC,kBAAkB,GAAG,oBAAoB,CAAC,kBAAkB,CAAC,SAAS,CACzE,CAAC,UAAU;;YAET,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;YACpC,IAAI,CAAC,MAAM,EAAE,CAAC;SACf,CACF,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,KAAK;YACvD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,MAAM,EAAE,CAAC;SACf,CAAC,CAAC;KACJ;IAED,oBAAoB;QAClB,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;QAC9B,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;QAClC,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;QACtC,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC;QACxC,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;QACtC,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;QACpC,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;KACtC;IAED,aAAa,CAAC,aAA0B;QACtC,gBAAgB,CAAC,cAAc,EAAE,CAAC;QAClC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,aAAa,EAAE;YACjB,IAAI,mBAAmB,GAAG,EAAE,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG;gBACrC,IAAI,IAAI,GAAG,aAAa,CAAC,GAAG,CAAQ,CAAC;gBACrC,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;gBACd,IACE,IAAI,CAAC,oBAAoB;oBACzB,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,IAAI,CAAC,oBAAoB,EAC9C;oBACA,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAChC;qBAAM,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;oBACrC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAChC;aACF,CAAC,CAAC;YAEH,mBAAmB,GAAGA,sBAAO,CAAC,mBAAmB,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YACnE,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;YAC/C,IAAI,CAAC,MAAM,EAAE,CAAC;SACf;KACF;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE;;YAEvC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,QAAQ;gBACpC,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;gBACrC,QAAQ,SAAS,CAAC,YAAY;oBAC5B,KAAK,qBAAqB;wBACxB,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAC/C,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG,KAAK,SAAS,CAAC,EAAE,CACpC,CAAC;wBACF,MAAM;oBACR,KAAK,sBAAsB;wBACzB,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAC1C,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,SAAS,CAAC,EAAE,CAC/B,CAAC;wBACF,MAAM;oBACR,KAAK,yBAAyB;wBAC5B,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAC5C,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,SAAS,CAAC,EAAE,CAC/B,CAAC;wBACF,MAAM;oBACR,KAAK,sBAAsB;wBACzB,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAC1C,CAAC,MAAM,KAAK,MAAM,CAAC,EAAE,KAAK,SAAS,CAAC,EAAE,CACvC,CAAC;wBACF,MAAM;iBACT;gBACD,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBAClD,QAAQ,CAAC,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC9D,QAAQ,CAAC,KAAK,GAAG,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;iBACrE;aACF,CAAC,CAAC;;YAEH,IAAI,IAAI,CAAC,aAAa,EAAE;gBACtB,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBACnD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,IAAI,KAC9D,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAC7B,CAAC;aACH;YACD,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;SACpC;KACF;IAED,MAAM,CAAC,KAAK,EAAE,EAAE;QACd,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,gBAAgB,CAAC,qBAAqB,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;KACxD;IAED,MAAM,CAAC,KAAK,EAAE,EAAE;QACd,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,gBAAgB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;KACrC;IAED,MAAM;QACJ,QACE,EAAC,IAAI,uDACF,IAAI,CAAC,gBAAgB;cAClB;gBACE,qBAAe,QAAQ,EAAC,UAAU,GAAG;gBACrC,qBAAe,QAAQ,EAAC,UAAU,GAAG;gBACrC,qBAAe,QAAQ,EAAC,UAAU,GAAG;gBACrC,qBAAe,QAAQ,EAAC,UAAU,GAAG;gBACrC,qBAAe,QAAQ,EAAC,UAAU,GAAG;aACtC;cACD,SAAS,EACZ,IAAI,CAAC,mBAAmB,IACvB,qBAAe,QAAQ,EAAC,UAAU,GAAG,IACnC,SAAS,EACZ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,QAAQ,KACrC,IAAI,CAAC,eAAe,IAAI,QAAQ,CAAC,EAAE,IACjC,qBAAe,QAAQ,EAAC,UAAU,GAAG,KAErC,gBACE,MAAM,QACN,OAAO,EAAE,MAAM,gBAAgB,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,EACzD,MAAM,UAEL,QAAQ,CAAC,SAAS;YACnB,QAAQ,CAAC,SAAS,CAAC,IAAI;YACvB,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,IAC9B,kBAAY,IAAI,EAAC,OAAO,IACtB,eAAS,GAAG,EAAE,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,GAAI,CACvC,IACX,SAAS,EACb,qBACE,cAAK,QAAQ,CAAC,WAAW,CAAM,EAC/B,cAAKC,cAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAM,EACrC,QAAQ,CAAC,SAAS;YACnB,QAAQ,CAAC,SAAS,CAAC,IAAI;YACvB,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,IACjC,aACE,iBAAW,GAAG,EAAC,WAAW,EAAC,IAAI,EAAC,WAAW,GAAG,EAC7C,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CACzC,IACF,SAAS,CACH,EACX,QAAQ,CAAC,KAAK,IACb,kBACE,IAAI,EAAC,OAAO,EACZ,KAAK,EAAC,QAAQ,qBAEd,IAAI,EAAC,KAAK,EACV,OAAO,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,IAE7C,gBAAU,IAAI,EAAC,OAAO,EAAC,IAAI,EAAC,KAAK,GAAY,CAClC,IACX,SAAS,EACZ,QAAQ,CAAC,MAAM,IACd,kBACE,IAAI,EAAC,OAAO,EACZ,KAAK,EAAC,UAAU,qBAEhB,IAAI,EAAC,KAAK,EACV,OAAO,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,IAE7C,gBAAU,IAAI,EAAC,QAAQ,EAAC,IAAI,EAAC,KAAK,GAAY,CACnC,IACX,SAAS,CACJ,CACZ,CACF,EACA,IAAI,CAAC,mBAAmB,CAAC,MAAM,IAAI,CAAC,IACnC,oBACE,qBACE,cACG,kBAAkB,CAAC,SAAS,CAC3B,eAAe,EACf,sEAAsE,CACvE,CACE,CACK,CACH,IACT,SAAS,CACR,EACP;KACH;;;;;;","names":["orderBy","format"],"sources":["src/components/udive/app/admin/app-admin-dive-trips/app-admin-dive-trips.scss?tag=app-admin-dive-trips","src/components/udive/app/admin/app-admin-dive-trips/app-admin-dive-trips.tsx"],"sourcesContent":["app-admin-dive-trips {\n  /* Component styles go here */\n}\n","import {Component, h, State, Host, Prop} from \"@stencil/core\";\nimport {Subscription} from \"rxjs\";\nimport {\n  UserService,\n  USERPROFILECOLLECTION,\n} from \"../../../../../services/common/user\";\nimport {orderBy} from \"lodash\";\nimport {DiveTripsService} from \"../../../../../services/udive/diveTrips\";\nimport {UserRoles} from \"../../../../../interfaces/common/user/user-roles\";\nimport {UserPubicProfile} from \"../../../../../interfaces/common/user/user-public-profile\";\nimport {\n  DivingCentersService,\n  DIVECENTERSSCOLLECTION,\n} from \"../../../../../services/udive/divingCenters\";\nimport {MapDataDivingCenter} from \"../../../../../interfaces/udive/diving-center/divingCenter\";\nimport {MapDataDivingSchool} from \"../../../../../interfaces/udive/diving-school/divingSchool\";\nimport {\n  DivingSchoolsService,\n  DIVESCHOOLSSCOLLECTION,\n} from \"../../../../../services/udive/divingSchools\";\nimport {TripSummary} from \"../../../../../interfaces/udive/dive-trip/diveTrip\";\nimport {\n  DIVECOMMUNITIESCOLLECTION,\n  DiveCommunitiesService,\n} from \"../../../../../services/udive/diveCommunities\";\nimport {MapDataDiveCommunity} from \"../../../../../interfaces/udive/dive-community/diveCommunity\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {format} from \"date-fns\";\n\n@Component({\n  tag: \"app-admin-dive-trips\",\n  styleUrl: \"app-admin-dive-trips.scss\",\n})\nexport class AppAdminDiveTrips {\n  @Prop() filterByOrganisierId: string;\n  @Prop() filterByTrips: any;\n  @State() adminDiveTripsArray: any[] = [];\n  @State() updateView = false;\n  @State() creatingNewDiveTrip = false;\n  @State() loadingDiveTrips = true;\n  loadingDiveTrips$: Subscription;\n  @State() editingDiveTrip = \"\";\n  editingDiveTrip$: Subscription;\n\n  userRoles: UserRoles;\n  userRoles$: Subscription;\n  userDiveTrips: TripSummary;\n  userDiveTrips$: Subscription;\n  userPublicProfilesList: UserPubicProfile[] = [];\n  userPublicProfilesList$: Subscription;\n  divingCentersList: MapDataDivingCenter[] = [];\n  divingCentersList$: Subscription;\n  diveCommunitiesList: MapDataDiveCommunity[] = [];\n  diveCommunitiesList$: Subscription;\n  divingSchoolsList: MapDataDivingSchool[] = [];\n  divingSchoolsList$: Subscription;\n\n  async componentWillLoad() {\n    this.loadingDiveTrips$ = DiveTripsService.creatingNewDiveTrip$.subscribe(\n      (value) => {\n        this.creatingNewDiveTrip = value;\n      }\n    );\n    this.editingDiveTrip$ = DiveTripsService.editingDiveTripId$.subscribe(\n      (value) => {\n        this.editingDiveTrip = value;\n      }\n    );\n\n    //load classes\n    //if filterbyorganiserId  ==  loaded school/center -> load classes from school or diving center\n    if (this.filterByOrganisierId) {\n      if (\n        this.filterByOrganisierId ===\n        DivingSchoolsService.selectedDivingSchoolId\n      ) {\n        this.userDiveTrips$ =\n          DivingSchoolsService.selectedDivingSchoolTrips$.subscribe((sub) =>\n            this.loadDiveTrips(sub)\n          );\n      } else if (\n        this.filterByOrganisierId ===\n        DivingCentersService.selectedDivingCenterId\n      ) {\n        this.userDiveTrips$ =\n          DivingCentersService.selectedDivingCenterTrips$.subscribe((sub) =>\n            this.loadDiveTrips(sub)\n          );\n      }\n    } else {\n      this.userDiveTrips$ = UserService.userDiveTrips$.subscribe((sub) =>\n        this.loadDiveTrips(sub)\n      );\n    }\n\n    //load all users list\n    this.userPublicProfilesList$ =\n      UserService.userPublicProfilesList$.subscribe((collection) => {\n        //update dive sites\n        this.userPublicProfilesList = collection;\n        this.filter();\n      });\n    //load all diving centers list\n    this.divingCentersList$ = DivingCentersService.divingCentersList$.subscribe(\n      (collection) => {\n        //update dive sites\n        this.divingCentersList = collection;\n        this.filter();\n      }\n    );\n    //load all dive communities list\n    this.diveCommunitiesList$ =\n      DiveCommunitiesService.diveCommunitiesList$.subscribe((collection) => {\n        //update dive sites\n        this.diveCommunitiesList = collection;\n        this.filter();\n      });\n    //load all diving schools list\n    this.divingSchoolsList$ = DivingSchoolsService.divingSchoolsList$.subscribe(\n      (collection) => {\n        //update dive sites\n        this.divingSchoolsList = collection;\n        this.filter();\n      }\n    );\n    this.userRoles$ = UserService.userRoles$.subscribe((roles) => {\n      this.userRoles = roles;\n      this.filter();\n    });\n  }\n\n  disconnectedCallback() {\n    this.userRoles$.unsubscribe();\n    this.userDiveTrips$.unsubscribe();\n    this.userPublicProfilesList$.unsubscribe();\n    this.divingCentersList$.unsubscribe();\n    this.diveCommunitiesList$.unsubscribe();\n    this.divingSchoolsList$.unsubscribe();\n    this.editingDiveTrip$.unsubscribe();\n    this.loadingDiveTrips$.unsubscribe();\n  }\n\n  loadDiveTrips(userDiveTrips: TripSummary) {\n    DiveTripsService.resetSkeletons();\n    this.loadingDiveTrips = false;\n    if (userDiveTrips) {\n      let adminDiveTripsArray = [];\n      Object.keys(userDiveTrips).forEach((key) => {\n        let trip = userDiveTrips[key] as any;\n        trip.id = key;\n        if (\n          this.filterByOrganisierId &&\n          trip.organiser.id == this.filterByOrganisierId\n        ) {\n          adminDiveTripsArray.push(trip);\n        } else if (!this.filterByOrganisierId) {\n          adminDiveTripsArray.push(trip);\n        }\n      });\n\n      adminDiveTripsArray = orderBy(adminDiveTripsArray, \"date\", \"desc\");\n      this.adminDiveTripsArray = adminDiveTripsArray;\n      this.filter();\n    }\n  }\n\n  filter() {\n    if (this.adminDiveTripsArray.length > 0) {\n      //load organiser data\n      this.adminDiveTripsArray.map((diveTrip) => {\n        const organiser = diveTrip.organiser;\n        switch (organiser.collectionId) {\n          case USERPROFILECOLLECTION:\n            organiser.item = this.userPublicProfilesList.find(\n              (user) => user.uid === organiser.id\n            );\n            break;\n          case DIVECENTERSSCOLLECTION:\n            organiser.item = this.divingCentersList.find(\n              (dc) => dc.id === organiser.id\n            );\n            break;\n          case DIVECOMMUNITIESCOLLECTION:\n            organiser.item = this.diveCommunitiesList.find(\n              (dc) => dc.id === organiser.id\n            );\n            break;\n          case DIVESCHOOLSSCOLLECTION:\n            organiser.item = this.divingSchoolsList.find(\n              (school) => school.id === organiser.id\n            );\n            break;\n        }\n        if (this.userRoles) {\n          const role = this.userRoles.editorOf[diveTrip.id];\n          diveTrip.editor = role && role.roles && role.roles.length > 0;\n          diveTrip.owner = role && role.roles && role.roles.includes(\"owner\");\n        }\n      });\n      //filter by trips id for clients visualisation\n      if (this.filterByTrips) {\n        const tripsArray = Object.keys(this.filterByTrips);\n        this.adminDiveTripsArray = this.adminDiveTripsArray.filter((trip) =>\n          tripsArray.includes(trip.id)\n        );\n      }\n      this.updateView = !this.updateView;\n    }\n  }\n\n  update(event, id) {\n    event.stopPropagation();\n    DiveTripsService.presentDiveTripUpdate(null, null, id);\n  }\n\n  delete(event, id) {\n    event.stopPropagation();\n    DiveTripsService.deleteDiveTrip(id);\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.loadingDiveTrips\n          ? [\n              <app-skeletons skeleton=\"diveTrip\" />,\n              <app-skeletons skeleton=\"diveTrip\" />,\n              <app-skeletons skeleton=\"diveTrip\" />,\n              <app-skeletons skeleton=\"diveTrip\" />,\n              <app-skeletons skeleton=\"diveTrip\" />,\n            ]\n          : undefined}\n        {this.creatingNewDiveTrip ? (\n          <app-skeletons skeleton=\"diveTrip\" />\n        ) : undefined}\n        {this.adminDiveTripsArray.map((diveTrip) =>\n          this.editingDiveTrip == diveTrip.id ? (\n            <app-skeletons skeleton=\"diveTrip\" />\n          ) : (\n            <ion-item\n              button\n              onClick={() => DiveTripsService.pushDiveTrip(diveTrip.id)}\n              detail\n            >\n              {diveTrip.organiser &&\n              diveTrip.organiser.item &&\n              diveTrip.organiser.item.photoURL ? (\n                <ion-avatar slot=\"start\">\n                  <ion-img src={diveTrip.organiser.item.photoURL} />\n                </ion-avatar>\n              ) : undefined}\n              <ion-label>\n                <h2>{diveTrip.displayName}</h2>\n                <h4>{format(diveTrip.date, \"PP\")}</h4>\n                {diveTrip.organiser &&\n                diveTrip.organiser.item &&\n                diveTrip.organiser.item.displayName ? (\n                  <p>\n                    <my-transl tag=\"organiser\" text=\"Organiser\" />\n                    {\": \" + diveTrip.organiser.item.displayName}\n                  </p>\n                ) : undefined}\n              </ion-label>\n              {diveTrip.owner ? (\n                <ion-button\n                  fill=\"clear\"\n                  color=\"danger\"\n                  icon-only\n                  slot=\"end\"\n                  onClick={(ev) => this.delete(ev, diveTrip.id)}\n                >\n                  <ion-icon name=\"trash\" slot=\"end\"></ion-icon>\n                </ion-button>\n              ) : undefined}\n              {diveTrip.editor ? (\n                <ion-button\n                  fill=\"clear\"\n                  color=\"divetrip\"\n                  icon-only\n                  slot=\"end\"\n                  onClick={(ev) => this.update(ev, diveTrip.id)}\n                >\n                  <ion-icon name=\"create\" slot=\"end\"></ion-icon>\n                </ion-button>\n              ) : undefined}\n            </ion-item>\n          )\n        )}\n        {this.adminDiveTripsArray.length == 0 ? (\n          <ion-item>\n            <ion-label>\n              <h2>\n                {TranslationService.getTransl(\n                  \"no-dive-trips\",\n                  \"No dive trips yet. Click on the '+' button to create your first one.\"\n                )}\n              </h2>\n            </ion-label>\n          </ion-item>\n        ) : undefined}\n      </Host>\n    );\n  }\n}\n"],"version":3}