{"file":"app-user-dive-communities.entry.esm.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,yBAAyB,GAAG,6BAA6B;;MCclD,sBAAsB;;;QAIjC,iBAAY,GAAU,EAAE,CAAC;;6BACO,EAAE;;IAElC,MAAM,iBAAiB;QACrB,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,SAAS;YACjE,IAAI,SAAS,IAAI,SAAS,CAAC,GAAG,EAAE;gBAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC;gBAC1C,IAAI,CAAC,eAAe,EAAE,CAAC;aACxB;SACF,CAAC,CAAC;;QAEH,IAAI,CAAC,OAAO,GAAG,sBAAsB,CAAC,oBAAoB,CAAC,SAAS,CAClE,CAAC,UAAU;YACT,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC;YAC/B,IAAI,CAAC,eAAe,EAAE,CAAC;SACxB,CACF,CAAC;KACH;IAED,oBAAoB;QAClB,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;QAC9B,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;KAC5B;IAED,eAAe;QACb,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IACE,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC;YAC5B,IAAI,CAAC,SAAS;YACd,IAAI,CAAC,SAAS,CAAC,QAAQ,EACvB;YACA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG;gBAC/C,IACE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,UAAU,IAAI,yBAAyB,EACpE;oBACA,IAAI,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;oBACtD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBAC7B;aACF,CAAC,CAAC;YACH,IAAI,CAAC,aAAa,GAAGA,sBAAO,CAAC,IAAI,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;SACjE;KACF;IAED,MAAM,CAAC,KAAK,EAAE,EAAE;QACd,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,sBAAsB,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;KACvD;IAED,MAAM;QACJ,QACE,EAAC,IAAI,uDACF,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,MACzB,gBACE,MAAM,QACN,OAAO,EAAE,MACP,sBAAsB,CAAC,2BAA2B,CAAC,EAAE,CAAC,EAAE,CAAC,EAE3D,MAAM,UAEL,EAAE,CAAC,QAAQ,IACV,kBAAY,IAAI,EAAC,OAAO,IACtB,WAAK,GAAG,EAAE,EAAE,CAAC,QAAQ,GAAI,CACd,IACX,SAAS,EAEb,qBAAY,EAAE,CAAC,WAAW,CAAa,EACvC,kBACE,IAAI,EAAC,OAAO,qBAEZ,IAAI,EAAC,KAAK,EACV,OAAO,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAEvC,gBAAU,IAAI,EAAC,QAAQ,EAAC,IAAI,EAAC,KAAK,GAAY,CACnC,CACJ,CACZ,CAAC,CACG,EACP;KACH;;;;;;","names":["orderBy"],"sources":["src/components/udive/app/user/app-user-dive-communities/app-user-dive-communities.scss?tag=app-user-dive-communities","src/components/udive/app/user/app-user-dive-communities/app-user-dive-communities.tsx"],"sourcesContent":["app-user-dive-communities {\n  /* Component styles go here */\n}\n","import {Component, h, State, Host} from \"@stencil/core\";\nimport {UserService} from \"../../../../../services/common/user\";\nimport {UserRoles} from \"../../../../../interfaces/common/user/user-roles\";\nimport {orderBy} from \"lodash\";\nimport {\n  DiveCommunitiesService,\n  DIVECOMMUNITIESCOLLECTION,\n} from \"../../../../../services/udive/diveCommunities\";\nimport {Subscription} from \"rxjs\";\n\n@Component({\n  tag: \"app-user-dive-communities\",\n  styleUrl: \"app-user-dive-communities.scss\",\n})\nexport class AppUserDiveCommunities {\n  @State() userRoles: UserRoles;\n  userRoles$: Subscription;\n  dcList$: Subscription;\n  dcCollection: any[] = [];\n  @State() myCommunities: any[] = [];\n\n  async componentWillLoad() {\n    this.userRoles$ = UserService.userRoles$.subscribe(async (userRoles) => {\n      if (userRoles && userRoles.uid) {\n        this.userRoles = new UserRoles(userRoles);\n        this.filterMyCenters();\n      }\n    });\n    //load all dive sites\n    this.dcList$ = DiveCommunitiesService.diveCommunitiesList$.subscribe(\n      (collection) => {\n        this.dcCollection = collection;\n        this.filterMyCenters();\n      }\n    );\n  }\n\n  disconnectedCallback() {\n    this.userRoles$.unsubscribe();\n    this.dcList$.unsubscribe();\n  }\n\n  filterMyCenters() {\n    this.myCommunities = [];\n    if (\n      this.dcCollection.length > 0 &&\n      this.userRoles &&\n      this.userRoles.editorOf\n    ) {\n      Object.keys(this.userRoles.editorOf).forEach((key) => {\n        if (\n          this.userRoles.editorOf[key].collection == DIVECOMMUNITIESCOLLECTION\n        ) {\n          let dc = this.dcCollection.find((dc) => dc.id == key);\n          this.myCommunities.push(dc);\n        }\n      });\n      this.myCommunities = orderBy(this.myCommunities, \"displayname\");\n    }\n  }\n\n  update(event, id) {\n    event.stopPropagation();\n    DiveCommunitiesService.presentDiveCommunityUpdate(id);\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.myCommunities.map((dc) => (\n          <ion-item\n            button\n            onClick={() =>\n              DiveCommunitiesService.presentDiveCommunityDetails(dc.id)\n            }\n            detail\n          >\n            {dc.photoURL ? (\n              <ion-avatar slot=\"start\">\n                <img src={dc.photoURL} />\n              </ion-avatar>\n            ) : undefined}\n\n            <ion-label>{dc.displayName}</ion-label>\n            <ion-button\n              fill=\"clear\"\n              icon-only\n              slot=\"end\"\n              onClick={(ev) => this.update(ev, dc.id)}\n            >\n              <ion-icon name=\"create\" slot=\"end\"></ion-icon>\n            </ion-button>\n          </ion-item>\n        ))}\n      </Host>\n    );\n  }\n}\n"],"version":3}