{"file":"app-user-configurations.entry.esm.js","mappings":"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","names":["cloneDeep","forEach"],"sources":["src/components/udive/app/user/app-user-configurations/app-user-configurations.scss?tag=app-user-configurations","src/components/udive/app/user/app-user-configurations/app-user-configurations.tsx"],"sourcesContent":["app-user-configurations {\n  width: 100%;\n  .card-margins {\n    margin: 10px 5px 5px 10px;\n  }\n}\n","import {Component, h, State} from \"@stencil/core\";\nimport {\n  UserService,\n  USERSETTINGSCOLLECTION,\n} from \"../../../../../services/common/user\";\nimport {DiveConfiguration} from \"../../../../../interfaces/udive/planner/dive-configuration\";\nimport {Subscription} from \"rxjs\";\nimport {DatabaseService} from \"../../../../../services/common/database\";\nimport {DiveStandardsService} from \"../../../../../services/udive/planner/dive-standards\";\nimport {cloneDeep, forEach} from \"lodash\";\nimport {alertController} from \"@ionic/core\";\nimport {DivePlan} from \"../../../../../services/udive/planner/dive-plan\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {UserSettings} from \"../../../../../interfaces/udive/user/user-settings\";\nimport {RouterService} from \"../../../../../services/common/router\";\n\n@Component({\n  tag: \"app-user-configurations\",\n  styleUrl: \"app-user-configurations.scss\",\n})\nexport class AppUserConfigurations {\n  @State() userConfigurations: DiveConfiguration[] = [];\n  stdConfigurations: DiveConfiguration[] = [];\n  loading: any;\n  userSettings: UserSettings;\n  userSub$: Subscription;\n\n  componentWillLoad() {\n    this.userSub$ = UserService.userSettings$.subscribe(\n      (userSettings: UserSettings) => {\n        this.userSettings = new UserSettings(userSettings);\n        this.loadData();\n      }\n    );\n  }\n  componentDidLoad() {\n    //check if user is loaded or trigger local user\n    if (!this.userSettings) {\n      UserService.initLocalUser();\n    }\n  }\n\n  async loadData() {\n    if (!this.userSettings) {\n      this.userSettings = new UserSettings(\n        await DatabaseService.getLocalDocument(USERSETTINGSCOLLECTION)\n      );\n    }\n    this.stdConfigurations = DiveStandardsService.getStdConfigurations();\n    if (this.userSettings) {\n      /*this.userConfigurations = orderBy(\n        this.user.userConfigurations,\n        \"stdName\"\n      );*/\n      this.userConfigurations = this.userSettings.userConfigurations;\n    } else {\n      const localConfigurations = await DatabaseService.getLocalDocument(\n        \"localconfigurations\"\n      );\n      if (localConfigurations) {\n        this.stdConfigurations = [];\n        localConfigurations.forEach((conf) => {\n          const model = new DiveConfiguration(conf);\n          this.userConfigurations.push(model);\n        });\n      } else {\n        this.userConfigurations =\n          DiveStandardsService.getDivePlansFromConfigurations(\n            this.stdConfigurations\n          );\n        DatabaseService.saveLocalDocument(\n          \"localconfigurations\",\n          this.userConfigurations\n        );\n      }\n    }\n  }\n\n  disconnectedCallback() {\n    this.userSub$.unsubscribe();\n  }\n\n  async viewConfiguration(i) {\n    const openModal = await UserService.checkLicence(\"configs\", true);\n\n    if (openModal) {\n      const configuration = cloneDeep(this.userConfigurations[i]);\n      const divePlan = new DivePlan();\n      divePlan.setConfiguration(configuration);\n      const confModal = await RouterService.openModal(\n        \"modal-dive-configuration\",\n        {\n          diveDataToShare: {\n            divePlan: divePlan,\n          },\n        }\n      );\n      confModal.onDidDismiss().then((updatedConf) => {\n        updatedConf = updatedConf.data;\n        if (updatedConf) {\n          this.userConfigurations[i] = new DiveConfiguration(updatedConf);\n          this.save();\n        }\n      });\n    }\n  }\n\n  async removeConfiguration(event, i) {\n    event.stopPropagation();\n    const openModal = await UserService.checkLicence(\"configs\", true);\n    if (openModal) {\n      const confirm = await alertController.create({\n        header: TranslationService.getTransl(\n          \"delete-configuration-header\",\n          \"Delete configuration?\"\n        ),\n        message: TranslationService.getTransl(\n          \"delete-configuration-message\",\n          \"This configuration will be deleted! Are you sure?\"\n        ),\n        buttons: [\n          {\n            text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n            role: \"cancel\",\n            handler: () => {},\n          },\n          {\n            text: TranslationService.getTransl(\"ok\", \"OK\"),\n            handler: () => {\n              this.userConfigurations.splice(i, 1);\n              this.save();\n            },\n          },\n        ],\n      });\n      confirm.present();\n    }\n  }\n\n  async addConfiguration() {\n    const openModal = await UserService.checkLicence(\"configs\", true);\n    if (openModal) {\n      let inputs = [];\n      forEach(this.stdConfigurations, (conf, key) => {\n        inputs.push({\n          type: \"radio\",\n          label: conf.stdName + \" (standard)\",\n          value: conf,\n          checked: key == 0 ? true : false,\n        });\n      });\n      forEach(this.userConfigurations, (conf) => {\n        inputs.push({\n          type: \"radio\",\n          label: conf.stdName,\n          value: conf,\n          checked: false,\n        });\n      });\n      const alert = await alertController.create({\n        header: TranslationService.getTransl(\n          \"select-standard-configuration\",\n          \"Select standard configuration\"\n        ),\n        buttons: [\n          {\n            text: TranslationService.getTransl(\"ok\", \"OK\"),\n            handler: async (data: any) => {\n              let openModal = await UserService.checkLicence(\"configs\", true);\n              if (openModal) {\n                const configuration = new DiveConfiguration(data);\n                const divePlan = new DivePlan();\n                divePlan.setConfiguration(configuration);\n                const confModal = await RouterService.openModal(\n                  \"modal-dive-configuration\",\n                  {\n                    diveDataToShare: {\n                      divePlan: divePlan,\n                    },\n                  }\n                );\n                confModal.onDidDismiss().then((updatedConf) => {\n                  updatedConf = updatedConf.data;\n                  if (updatedConf) {\n                    this.userConfigurations.push(\n                      new DiveConfiguration(updatedConf)\n                    );\n                    this.save();\n                  }\n                });\n              }\n            },\n          },\n          {\n            text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n            role: \"cancel\",\n            cssClass: \"secondary\",\n          },\n        ],\n        inputs: inputs,\n      });\n      alert.present();\n    }\n  }\n\n  save() {\n    UserService.updateUserConfigurations(this.userConfigurations);\n  }\n\n  render() {\n    return (\n      <div class=\"slider-container\">\n        <div class=\"slider-scrollable-container\">\n          <ion-grid class=\"ion-no-padding\">\n            <ion-row class=\"ion-text-start ion-no-padding\">\n              {this.userConfigurations.map((conf, i) => (\n                <ion-col\n                  size-sm=\"12\"\n                  size-md=\"6\"\n                  size-lg=\"4\"\n                  class=\"ion-no-padding\"\n                >\n                  <ion-card\n                    onClick={() => this.viewConfiguration(i)}\n                    class=\"card-margins\"\n                  >\n                    <ion-card-header>\n                      <ion-item class=\"ion-no-padding\" lines=\"none\">\n                        <ion-button\n                          icon-only\n                          slot=\"end\"\n                          color=\"danger\"\n                          fill=\"clear\"\n                          onClick={(ev) => this.removeConfiguration(ev, i)}\n                        >\n                          <ion-icon name=\"trash-bin-outline\"></ion-icon>\n                        </ion-button>\n\n                        <ion-card-title>{conf.stdName}</ion-card-title>\n                      </ion-item>\n\n                      <ion-card-subtitle>\n                        <my-transl tag=\"max-depth\" text=\"Max Depth\" />:\n                        {conf.maxDepth} {conf.parameters.depthUnit}\n                      </ion-card-subtitle>\n                    </ion-card-header>\n\n                    <ion-card-content>\n                      {conf.configuration.bottom.length > 0 ? (\n                        <p>\n                          <my-transl tag=\"bottom-tanks\" text=\"Bottom Tanks\" />:\n                        </p>\n                      ) : undefined}\n                      {conf.configuration.bottom.map((tank) => (\n                        <p>{tank.name + \"->\" + tank.gas.toString()}</p>\n                      ))}\n                      {conf.configuration.deco.length > 0 ? (\n                        <p>\n                          <my-transl tag=\"deco-tanks\" text=\"Deco Tanks\" />:\n                        </p>\n                      ) : undefined}\n                      {conf.configuration.deco.map((tank) => (\n                        <p>{tank.name + \"->\" + tank.gas.toString()}</p>\n                      ))}\n                    </ion-card-content>\n                  </ion-card>\n                </ion-col>\n              ))}\n              <ion-col\n                size-sm=\"12\"\n                size-md=\"6\"\n                size-lg=\"4\"\n                class=\"ion-no-padding\"\n              >\n                <ion-card onClick={() => this.addConfiguration()}>\n                  <ion-card-content class=\"ion-text-center\">\n                    <ion-icon\n                      name=\"add-circle-outline\"\n                      style={{fontSize: \"100px\"}}\n                    ></ion-icon>\n                  </ion-card-content>\n                </ion-card>\n              </ion-col>\n            </ion-row>\n          </ion-grid>\n        </div>\n      </div>\n    );\n  }\n}\n"],"version":3}