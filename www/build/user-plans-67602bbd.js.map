{"file":"user-plans-67602bbd.js","mappings":";;;;;;AAQO,MAAM,mBAAmB,GAAG,WAAW,CAAC;MAElC,mBAAmB;IAAhC;QACE,cAAS,GAAc,IAAI,SAAS,EAAE,CAAC;QAEvC,eAAU,GAA+B,IAAI,eAAe,CAAY,EAAE,CAAC,CAAC;QAC5E,gBAAW,GAAG,IAAI,CAAC;KA8EpB;;IA3EC,MAAM,IAAI;;QAER,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,MAAM,UAAU,GAAG,MAAM,eAAe,CAAC,qBAAqB,CAC5D,mBAAmB,EACnB,WAAW,CAAC,WAAW,CAAC,GAAG,CAC5B,CAAC;YACF,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,GAAG;gBAC3C,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;gBACpC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACtC,CAAC,CAAC;SACJ;KACF;IAED,MAAM,sBAAsB,CAAC,GAAG,EAAE,KAAK,EAAE,KAAM;QAC7C,OAAO,MAAM,aAAa,CAAC,SAAS,CAAC,yBAAyB,EAAE;YAC9D,GAAG,EAAE,GAAG;YACR,SAAS,EAAE,KAAK;YAChB,SAAS,EAAE,KAAK;SACjB,CAAC,CAAC;KACJ;IAED,MAAM,sBAAsB,CAAC,EAAE,EAAE,SAAS;QACxC,aAAa,CAAC,IAAI,CAChB,GAAG,GAAG,mBAAmB,GAAG,WAAW,GAAG,EAAE,GAAG,GAAG,GAAG,SAAS,EAC9D,SAAS,CACV,CAAC;KACH;IAED,cAAc,CAAC,GAAG;QAChB,aAAa,CAAC,IAAI,CAAC,GAAG,GAAG,mBAAmB,GAAG,QAAQ,GAAG,GAAG,EAAE,SAAS,CAAC,CAAC;KAC3E;IAED,MAAM,cAAc,CAAC,GAAG,EAAE,IAAI;QAC5B,OAAO,eAAe,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,mBAAmB,CAAC,CAAC;KACtE;IAED,MAAM,UAAU,CAAC,GAAG;QAClB,OAAO,IAAI,OAAO,CAAC,OAAO,OAAO,EAAE,MAAM;YACvC,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC;gBAC3C,MAAM,EAAE,kBAAkB,CAAC,SAAS,CAClC,yBAAyB,EACzB,mBAAmB,CACpB;gBACD,OAAO,EAAE,kBAAkB,CAAC,SAAS,CACnC,0BAA0B,EAC1B,0CAA0C,CAC3C;gBACD,OAAO,EAAE;oBACP;wBACE,IAAI,EAAE,kBAAkB,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC;wBACtD,IAAI,EAAE,QAAQ;wBACd,OAAO,EAAE;4BACP,MAAM,EAAE,CAAC;yBACV;qBACF;oBACD;wBACE,IAAI,EAAE,kBAAkB,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC;wBAC9C,OAAO,EAAE;4BACP,eAAe,CAAC,UAAU,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC;4BACrD,aAAa,CAAC,MAAM,EAAE,CAAC;4BACvB,OAAO,CAAC,IAAI,CAAC,CAAC;yBACf;qBACF;iBACF;aACF,CAAC,CAAC;YACH,OAAO,CAAC,OAAO,EAAE,CAAC;SACnB,CAAC,CAAC;KACJ;IAED,MAAM,cAAc,CAAC,GAAG;QACtB,MAAM,GAAG,GAAG,MAAM,eAAe,CAAC,WAAW,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC;QACxE,OAAO,GAAG,GAAG,GAAG,GAAG,KAAK,CAAC;KAC1B;CACF;MACY,gBAAgB,GAAG,IAAI,mBAAmB;;;;","names":[],"sources":["src/services/trasteel/crm/user-plans.ts"],"sourcesContent":["import {BehaviorSubject, Subscription} from \"rxjs\";\nimport {DatabaseService} from \"../../common/database\";\nimport {UserService} from \"../../common/user\";\nimport {UserPlans} from \"../../../interfaces/trasteel/users/user-plans\";\nimport {RouterService} from \"../../common/router\";\nimport {alertController} from \"@ionic/core\";\nimport {TranslationService} from \"../../common/translations\";\n\nexport const USERPLANSCOLLECTION = \"userPlans\";\n\nexport class UserPlansController {\n  userPlans: UserPlans = new UserPlans();\n  userPlansSub: Subscription;\n  userPlans$: BehaviorSubject<UserPlans> = new BehaviorSubject(<UserPlans>{});\n  serviceInit = true;\n\n  //initialise this service inside app-root at the start of the app\n  async init() {\n    //init only once\n    if (this.serviceInit) {\n      this.serviceInit = false;\n      const observable = await DatabaseService.getDocumentObservable(\n        USERPLANSCOLLECTION,\n        UserService.userProfile.uid\n      );\n      this.userPlansSub = observable.subscribe((doc) => {\n        this.userPlans = new UserPlans(doc);\n        this.userPlans$.next(this.userPlans);\n      });\n    }\n  }\n\n  async presentUserPlansUpdate(uid, plans, index?) {\n    return await RouterService.openModal(\"modal-user-plans-update\", {\n      uid: uid,\n      userPlans: plans,\n      planIndex: index,\n    });\n  }\n\n  async presentUserPlanDetails(id, planIndex) {\n    RouterService.push(\n      \"/\" + USERPLANSCOLLECTION + \"/details/\" + id + \"/\" + planIndex,\n      \"forward\"\n    );\n  }\n\n  openUsersPlans(uid) {\n    RouterService.push(\"/\" + USERPLANSCOLLECTION + \"/user/\" + uid, \"forward\");\n  }\n\n  async updateUserPlan(uid, plan) {\n    return DatabaseService.saveItem(uid, plan, uid, USERPLANSCOLLECTION);\n  }\n\n  async deletePlan(uid): Promise<void> {\n    return new Promise(async (resolve, reject) => {\n      const confirm = await alertController.create({\n        header: TranslationService.getTransl(\n          \"delete-user-plan-header\",\n          \"Delete User Plan?\"\n        ),\n        message: TranslationService.getTransl(\n          \"delete-user-plan-message\",\n          \"This plan will be deleted! Are you sure?\"\n        ),\n        buttons: [\n          {\n            text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n            role: \"cancel\",\n            handler: () => {\n              reject();\n            },\n          },\n          {\n            text: TranslationService.getTransl(\"ok\", \"OK\"),\n            handler: async () => {\n              DatabaseService.deleteItem(USERPLANSCOLLECTION, uid);\n              RouterService.goBack();\n              resolve(null);\n            },\n          },\n        ],\n      });\n      confirm.present();\n    });\n  }\n\n  async getPlansOfUser(uid) {\n    const ret = await DatabaseService.getDocument(USERPLANSCOLLECTION, uid);\n    return ret ? ret : false;\n  }\n}\nexport const UserPlansService = new UserPlansController();\n"],"version":3}