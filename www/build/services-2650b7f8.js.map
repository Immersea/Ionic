{"file":"services-2650b7f8.js","mappings":"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","names":[],"sources":["src/interfaces/trasteel/users/users-teams.ts","src/services/trasteel/common/services.ts"],"sourcesContent":["export class UsersTeams {\n  usersTeams: UserTeams[];\n  users: {\n    [id: string]: string[]; //[\"owner\", \"editor\", etc.]\n  };\n  constructor(data?) {\n    this.usersTeams = [];\n    if (data && data.usersTeams && data.usersTeams.length > 0) {\n      data.usersTeams.forEach((team) => {\n        this.usersTeams.push(new UserTeams(team));\n      });\n    }\n    this.users = {};\n    if (data && data.users) {\n      Object.keys(data.users).forEach((key) => {\n        this.users[key] = data.users[key];\n      });\n    }\n  }\n}\n\nexport class UserTeams {\n  uid: string;\n  email: string;\n  teams: string[];\n  constructor(data?) {\n    this.uid = data && data.uid ? data.uid : null;\n    this.email = data && data.email ? data.email : null;\n    this.teams = data && data.teams && data.teams.length > 0 ? data.teams : [];\n  }\n}\n","import {DatabaseService} from \"../../common/database\";\nimport {SYSTEMCOLLECTION} from \"../../common/system\";\nimport {UserPubicProfile} from \"../../../components\";\nimport {UsersTeams} from \"../../../interfaces/trasteel/users/users-teams\";\nimport {RouterService} from \"../../common/router\";\nimport {UserService} from \"../../common/user\";\n\nconst USERSTEAMSDOC = \"usersTeams\";\n\nexport class TrasteelServicesController {\n  getUserRoles() {\n    return [\n      \"registered\",\n      \"customerDBAdmin\",\n      \"refraDBAdmin\",\n      \"refraTeamAdmin\",\n      \"electDBAdmin\",\n      \"electTeamAdmin\",\n      \"rawDBAdmin\",\n      \"rawTeamAdmin\",\n      \"engDBAdmin\",\n      \"engTeamAdmin\",\n      \"translator\",\n      \"superAdmin\",\n    ];\n  }\n\n  isTeamAdmin(line?): boolean {\n    let ret = false;\n    switch (line) {\n      case \"refractories\":\n        ret = this.isRefraTeamAdmin();\n        break;\n      case \"electrodes\":\n        ret = this.isElecTeamAdmin();\n        break;\n      case \"rawmaterials\":\n        ret = this.isRawTeamAdmin();\n        break;\n      case \"engineering\":\n        ret = this.isEngTeamAdmin();\n        break;\n      case \"longterm\":\n        ret = false;\n        break;\n      case undefined:\n        ret =\n          this.isRefraTeamAdmin() ||\n          this.isElecTeamAdmin() ||\n          this.isRawTeamAdmin() ||\n          this.isEngTeamAdmin();\n    }\n    return ret;\n  }\n\n  isCustomerDBAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"customerDBAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n\n  isRefraDBAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"refraDBAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isRefraTeamAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"refraTeamAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isElecDBAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"elecDBAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isElecTeamAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"elecTeamAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isRawDBAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"rawDBAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isRawTeamAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"rawTeamAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isEngDBAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"engDBAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n  isEngTeamAdmin(): boolean {\n    return (\n      UserService.userRoles.roles.indexOf(\"engTeamAdmin\") != -1 ||\n      UserService.userRoles.isSuperAdmin()\n    );\n  }\n\n  async getUsersTeams(): Promise<UsersTeams> {\n    let usersTeams = await DatabaseService.getDocument(\n      SYSTEMCOLLECTION,\n      USERSTEAMSDOC\n    );\n    if (usersTeams) {\n      usersTeams = new UsersTeams(usersTeams);\n    } else {\n      usersTeams = new UsersTeams();\n    }\n    return usersTeams;\n  }\n\n  async updateUsersTeams(usersTeams: UsersTeams) {\n    await DatabaseService.updateDocument(\n      SYSTEMCOLLECTION,\n      USERSTEAMSDOC,\n      usersTeams\n    );\n  }\n\n  setUserTeams(user: UserPubicProfile) {\n    RouterService.openModal(\"modal-user-teams-update\", {user: user});\n  }\n}\nexport const TrasteelService = new TrasteelServicesController();\n"],"version":3}