{"file":"app-admin-chats.entry.esm.js","mappings":"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","names":["orderBy","toNumber","format","fromUnixTime"],"sources":["src/components/common/app/chat/app-admin-chats/app-admin-chats.scss?tag=app-admin-chats","src/components/common/app/chat/app-admin-chats/app-admin-chats.tsx"],"sourcesContent":["app-admin-chats {\n  /* Component styles go here */\n}\n","import {Component, h, State, Prop} from \"@stencil/core\";\nimport {Subscription} from \"rxjs\";\nimport {UserService} from \"../../../../../services/common/user\";\nimport {UserRoles} from \"../../../../../interfaces/common/user/user-roles\";\nimport {MapDataUserPubicProfile} from \"../../../../../interfaces/common/user/user-public-profile\";\nimport {DivingCentersService} from \"../../../../../services/udive/divingCenters\";\nimport {MapDataDivingCenter} from \"../../../../../interfaces/udive/diving-center/divingCenter\";\nimport {MapDataDivingSchool} from \"../../../../../interfaces/udive/diving-school/divingSchool\";\nimport {DivingSchoolsService} from \"../../../../../services/udive/divingSchools\";\nimport {ChatService} from \"../../../../../services/common/chat\";\nimport {MapDataServiceCenter} from \"../../../../../interfaces/udive/service-center/serviceCenter\";\nimport {ServiceCentersService} from \"../../../../../services/udive/serviceCenters\";\nimport {ChatsSummary} from \"../../../../../interfaces/common/chat/chat\";\nimport {Environment} from \"../../../../../global/env\";\nimport {format, fromUnixTime} from \"date-fns\";\nimport {orderBy, toNumber} from \"lodash\";\n\n@Component({\n  tag: \"app-admin-chats\",\n  styleUrl: \"app-admin-chats.scss\",\n})\nexport class AppAdminChats {\n  @Prop() filterByOrganisierId: string;\n  @Prop() filterByChats: any;\n  @State() adminChatsArray: any[] = [];\n  @State() updateView = false;\n  @State() creatingNewChat = false;\n  @State() loadingChats = true;\n  loadingChats$: Subscription;\n  @State() editingChat = \"\";\n  editingChat$: Subscription;\n\n  userRoles: UserRoles;\n  userRoles$: Subscription;\n  userChats: ChatsSummary;\n  userChats$: Subscription;\n  userPublicProfilesList: MapDataUserPubicProfile[] = [];\n  userPublicProfilesList$: Subscription;\n  //UDIVE\n  divingCentersList: MapDataDivingCenter[] = [];\n  divingCentersList$: Subscription;\n  divingSchoolsList: MapDataDivingSchool[] = [];\n  divingSchoolsList$: Subscription;\n  serviceCentersList: MapDataServiceCenter[] = [];\n  serviceCentersList$: Subscription;\n\n  async componentWillLoad() {\n    this.loadingChats$ = ChatService.creatingNewChat$.subscribe((value) => {\n      this.creatingNewChat = value;\n    });\n    this.editingChat$ = ChatService.editingChatId$.subscribe((value) => {\n      this.editingChat = value;\n    });\n\n    //wait for user to be load\n    this.userRoles$ = UserService.userRoles$.subscribe((roles) => {\n      this.userRoles = roles;\n      if (this.filterByOrganisierId && !this.userChats$) {\n        this.userChats$ = ChatService.servicesChatsList$.subscribe((sub) => {\n          this.loadChats(sub);\n        });\n      } else if (!this.userChats$) {\n        this.userChats$ = ChatService.userChatsList$.subscribe((sub) => {\n          this.loadChats(sub);\n        });\n      }\n      this.filter();\n    });\n\n    //load all users list\n    this.userPublicProfilesList$ =\n      UserService.userPublicProfilesList$.subscribe((collection) => {\n        //update dive sites\n        this.userPublicProfilesList = collection;\n        this.filter();\n      });\n\n    if (Environment.isUdive()) {\n      //load all diving centers list\n      this.divingCentersList$ =\n        DivingCentersService.divingCentersList$.subscribe((collection) => {\n          this.divingCentersList = collection;\n          this.filter();\n        });\n      //load all diving schools list\n      this.divingSchoolsList$ =\n        DivingSchoolsService.divingSchoolsList$.subscribe((collection) => {\n          this.divingSchoolsList = collection;\n          this.filter();\n        });\n\n      //load all service centers list\n      this.serviceCentersList$ =\n        ServiceCentersService.serviceCentersList$.subscribe((collection) => {\n          this.serviceCentersList = collection;\n          this.filter();\n        });\n    }\n  }\n\n  disconnectedCallback() {\n    this.userRoles$.unsubscribe();\n    this.userChats$.unsubscribe();\n    this.userPublicProfilesList$.unsubscribe();\n    this.editingChat$.unsubscribe();\n    this.loadingChats$.unsubscribe();\n\n    if (Environment.isUdive()) {\n      this.divingCentersList$.unsubscribe();\n      this.divingSchoolsList$.unsubscribe();\n      this.serviceCentersList$.unsubscribe();\n    }\n  }\n\n  loadChats(userChats: ChatsSummary) {\n    ChatService.resetSkeletons();\n    this.loadingChats = false;\n    if (userChats) {\n      let adminChatsArray = [];\n\n      Object.keys(userChats).forEach((key) => {\n        let chat = userChats[key] as any;\n        chat.id = key;\n        adminChatsArray.push(chat);\n      });\n      adminChatsArray = orderBy(adminChatsArray, \"lastMessage.created\", \"desc\");\n      this.adminChatsArray = adminChatsArray;\n      this.filter();\n    }\n  }\n\n  async filter() {\n    if (this.adminChatsArray.length > 0) {\n      //load organiser data\n      this.adminChatsArray.map(async (chat) => {\n        const organiser = chat.organiser;\n        organiser.item = await UserService.getOrganiser(\"item\", organiser);\n        if (Environment.isUdive()) {\n          chat.owner =\n            chat.organiser.id === UserService.userProfile.uid ||\n            chat.organiser.id === DivingSchoolsService.selectedDivingSchoolId ||\n            chat.organiser.id === DivingCentersService.selectedDivingCenterId ||\n            chat.organiser.id ===\n              ServiceCentersService.selectedServiceCenterId ||\n            chat.organiser.id === ServiceCentersService.selectedServiceCenterId;\n        }\n\n        chat.participantNames = ChatService.getOtherChatParticipants(\n          \"names\",\n          chat\n        );\n        chat.photoURL =\n          chat.organiser && chat.organiser.item && chat.organiser.item.photoURL\n            ? chat.organiser.item.photoURL\n            : null;\n        //change photo url if there are two users\n        const otherParticipants = ChatService.getOtherChatParticipants(\n          \"list\",\n          chat\n        );\n        if (otherParticipants.length == 1) {\n          const participant = otherParticipants[0];\n          let item = await UserService.getOrganiser(\"item\", participant);\n          if (item && item.photoURL) chat.photoURL = item.photoURL;\n        }\n\n        //set chat unread\n        const userLastRead =\n          UserService.userSettings.chatsLastRead &&\n          UserService.userSettings.chatsLastRead[chat.id]\n            ? UserService.userSettings.chatsLastRead[chat.id]\n            : false;\n        chat.unread =\n          userLastRead && chat.lastMessage\n            ? toNumber(chat.lastMessage.created) >\n              toNumber(UserService.userSettings.chatsLastRead[chat.id])\n            : true;\n      });\n      //filter by chats id for clients visualisation\n      if (this.filterByChats) {\n        const chatsArray = Object.keys(this.filterByChats);\n        this.adminChatsArray = this.adminChatsArray.filter((chat) =>\n          chatsArray.includes(chat.id)\n        );\n      }\n      this.updateView = !this.updateView;\n    }\n  }\n\n  delete(event, id) {\n    event.stopPropagation();\n    ChatService.deleteChat(id);\n  }\n\n  render() {\n    return (\n      <ion-list>\n        {this.loadingChats\n          ? [\n              <app-skeletons skeleton=\"chat\" />,\n              <app-skeletons skeleton=\"chat\" />,\n              <app-skeletons skeleton=\"chat\" />,\n              <app-skeletons skeleton=\"chat\" />,\n              <app-skeletons skeleton=\"chat\" />,\n            ]\n          : undefined}\n        {this.creatingNewChat ? <app-skeletons skeleton=\"chat\" /> : undefined}\n        {this.adminChatsArray.map((chat) =>\n          this.editingChat == chat.id ? (\n            <app-skeletons skeleton=\"chat\" />\n          ) : (\n            <ion-item\n              button\n              onClick={() => ChatService.presentChat(chat.id)}\n              detail\n            >\n              {chat.photoURL ? (\n                <ion-avatar slot=\"start\">\n                  <ion-img src={chat.photoURL} />\n                </ion-avatar>\n              ) : (\n                <ion-icon slot=\"start\" name=\"chatbubbles-outline\"></ion-icon>\n              )}\n              <ion-label>\n                <h2 style={chat.unread ? {fontWeight: \"bold\"} : undefined}>\n                  {chat.name\n                    ? chat.name\n                    : chat.participantNames\n                      ? chat.participantNames\n                      : \"\"}\n                </h2>\n                {chat.name ? <p>{chat.participantNames}</p> : undefined}\n                {chat.lastMessage ? (\n                  <p>\n                    {format(\n                      fromUnixTime(toNumber(chat.lastMessage.created)),\n                      \"PPP\"\n                    )}\n                  </p>\n                ) : undefined}\n              </ion-label>\n              {chat.unread ? (\n                <ion-icon\n                  slot=\"start\"\n                  color=\"danger\"\n                  name=\"radio-button-on\"\n                ></ion-icon>\n              ) : undefined}\n\n              {chat.owner ? (\n                <ion-button\n                  fill=\"clear\"\n                  color=\"danger\"\n                  icon-only\n                  slot=\"end\"\n                  onClick={(ev) => this.delete(ev, chat.id)}\n                >\n                  <ion-icon name=\"trash\" slot=\"end\"></ion-icon>\n                </ion-button>\n              ) : undefined}\n            </ion-item>\n          )\n        )}\n      </ion-list>\n    );\n  }\n}\n"],"version":3}