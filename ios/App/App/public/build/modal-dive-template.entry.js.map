{"file":"modal-dive-template.entry.esm.js","mappings":"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","names":["filter","orderBy"],"sources":["src/components/udive/modals/dive-site/modal-dive-template/modal-dive-template.scss?tag=modal-dive-template","src/components/udive/modals/dive-site/modal-dive-template/modal-dive-template.tsx"],"sourcesContent":["modal-dive-template {\n    /* Component styles go here */\n}\n","import {Component, h, Prop, Element} from \"@stencil/core\";\nimport {DiveConfiguration} from \"../../../../../interfaces/udive/planner/dive-configuration\";\nimport {UserRoles} from \"../../../../../interfaces/common/user/user-roles\";\nimport {DivePlanModel} from \"../../../../../interfaces/udive/planner/dive-plan\";\nimport {DivePlan} from \"../../../../../services/udive/planner/dive-plan\";\nimport {GasModel} from \"../../../../../interfaces/udive/planner/gas-model\";\nimport {DiveStandardsService} from \"../../../../../services/udive/planner/dive-standards\";\nimport {filter, orderBy} from \"lodash\";\nimport {Environment} from \"../../../../../global/env\";\n\n@Component({\n  tag: \"modal-dive-template\",\n  styleUrl: \"modal-dive-template.scss\",\n})\nexport class ModalDiveTemplate {\n  @Element() el: HTMLElement;\n  @Prop() stdConfigurations: Array<DiveConfiguration> = [];\n  @Prop() index: number = 0;\n  @Prop() userRoles: UserRoles;\n  @Prop() selectedConfiguration: DiveConfiguration;\n  @Prop() showPositionTab: boolean = false;\n  @Prop() divePlanModel: DivePlanModel;\n  @Prop() addDive?: boolean = false;\n  divePlan: DivePlan;\n  diveDataToShare: any;\n  updateView = true;\n\n  stdGases: Array<GasModel>;\n  stdDecoGases: Array<GasModel>;\n\n  componentWillLoad() {\n    //convert into DivePlan provider and start calculations for the dive\n    this.divePlan = new DivePlan();\n    //this.divePlan.setProviders(this.translate)\n    let newPlanModel = this.divePlanModel;\n    if (!newPlanModel) {\n      //insert new dive plan\n      let selectedConfiguration = this.selectedConfiguration;\n      //add new dive with selected config\n      this.divePlan.setConfiguration(selectedConfiguration);\n      let dive = this.divePlan.addDive();\n      this.divePlan.resetDiveWithConfiguration(dive, selectedConfiguration);\n    } else {\n      this.divePlan.setConfiguration(newPlanModel.configuration);\n      this.divePlan.setWithDivePlanModel(newPlanModel);\n      if (this.addDive) {\n        //insert new dive plan\n        let dive = this.divePlan.addDive();\n        this.divePlan.resetDiveWithConfiguration(\n          dive,\n          newPlanModel.configuration\n        );\n        this.index = this.divePlan.dives.length - 1;\n      }\n    }\n    this.stdGases = [];\n    this.stdDecoGases = [];\n    let gases = [];\n    DiveStandardsService.getStdGases().forEach((list) => {\n      gases.push(list);\n    });\n    this.stdGases = filter(gases, {deco: false});\n    this.stdGases = orderBy(this.stdGases, \"fromDepth\", \"asc\");\n    this.stdDecoGases = filter(gases, {deco: true});\n    this.stdDecoGases = orderBy(this.stdDecoGases, \"fromDepth\", \"desc\");\n\n    this.diveDataToShare = {\n      divePlan: this.divePlan,\n      dive_less_time: null,\n      dive_more_time: null,\n      dive_less_depth: null,\n      dive_more_depth: null,\n      index: this.index,\n      stdGases: this.stdGases,\n      stdDecoGases: this.stdDecoGases,\n      stdConfigurations: this.stdConfigurations,\n      user: this.userRoles,\n      showDiveSite: this.showPositionTab,\n      showPositionTab: this.showPositionTab,\n    };\n  }\n\n  updateParams(params) {\n    this.divePlan.configuration.parameters = params.detail;\n    this.updateView = !this.updateView;\n  }\n\n  save() {\n    this.el.closest(\"ion-modal\").dismiss(this.divePlan.getDivePlanModel());\n  }\n\n  close() {\n    this.el.closest(\"ion-modal\").dismiss();\n  }\n  render() {\n    return [\n      <app-navbar\n        tag=\"deco-planner\"\n        text=\"Deco Planner\"\n        extra-title={this.divePlan.configuration.stdName}\n        color={Environment.isDecoplanner() ? \"gue-blue\" : \"planner\"}\n        modal={true}\n      ></app-navbar>,\n      <ion-content>\n        <app-decoplanner-plan\n          diveDataToShare={this.diveDataToShare}\n          onUpdateParamsEvent={(params) => this.updateParams(params)}\n        />\n      </ion-content>,\n      <app-modal-footer\n        onCancelEmit={() => this.close()}\n        onSaveEmit={() => this.save()}\n      />,\n    ];\n  }\n}\n"],"version":3}