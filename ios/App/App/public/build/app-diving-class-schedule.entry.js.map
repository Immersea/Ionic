{"file":"app-diving-class-schedule.entry.esm.js","mappings":"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","names":["toNumber","differenceInDays","addDays","format","orderBy","parseISO","addHours"],"sources":["src/components/udive/app/diving-classes/app-diving-class-schedule/app-diving-class-schedule.scss?tag=app-diving-class-schedule","src/components/udive/app/diving-classes/app-diving-class-schedule/app-diving-class-schedule.tsx"],"sourcesContent":["app-diving-class-schedule {\n    /* Component styles go here */\n}\n","import {\n  Component,\n  h,\n  Prop,\n  State,\n  Event,\n  EventEmitter,\n  Method,\n} from \"@stencil/core\";\nimport {orderBy, toNumber} from \"lodash\";\nimport {DivingClass} from \"../../../../../interfaces/udive/diving-class/divingClass\";\nimport {addDays, addHours, differenceInDays, format, parseISO} from \"date-fns\";\n\n@Component({\n  tag: \"app-diving-class-schedule\",\n  styleUrl: \"app-diving-class-schedule.scss\",\n})\nexport class AppDivingClassSchedule {\n  @Event() scheduleEmit: EventEmitter<any>;\n  @Prop({mutable: true}) divingClass: DivingClass;\n  @Prop() editable: boolean = false;\n  @State() scheduleArray: any[] = [];\n\n  @Method()\n  async updateClassSchedule() {\n    this.scheduleArray = [];\n    if (this.divingClass.activities && this.divingClass.activities.length > 0) {\n      const schedule = {};\n      //get all schedule days\n      this.divingClass.activities.map((activity) => {\n        schedule[activity.day] = null;\n      });\n      Object.keys(schedule).map((day) => {\n        const dayNum = toNumber(day);\n        const activityPreviousDate = this.divingClass.schedule[dayNum - 1]\n          ? this.divingClass.schedule[dayNum - 1]\n          : new Date();\n        const date = this.divingClass.schedule[dayNum];\n        /*const activityDate =\n          date && moment(date).diff(moment(activityPreviousDate), \"days\") >= 1\n            ? moment(this.divingClass.schedule[dayNum])\n            : moment(activityPreviousDate).add(1, \"day\");\n        schedule[day] = moment(activityDate.format(\"LL\")).toDate();*/\n\n        const activityDate =\n          date && differenceInDays(date, activityPreviousDate) >= 1\n            ? this.divingClass.schedule[dayNum]\n            : addDays(activityPreviousDate, 1);\n\n        // Formatting the date to 'LL' format (e.g., \"September 4, 1986\") and converting it to a JavaScript Date object.\n        const formattedDate = format(activityDate, \"PP\"); // 'PP' corresponds to 'LL' in moment.js\n        schedule[day] = new Date(formattedDate);\n\n        this.divingClass.schedule[day] = schedule[day];\n      });\n\n      orderBy(Object.keys(schedule)).forEach((day) => {\n        this.scheduleArray.push({\n          day: day,\n          date: parseISO(schedule[day]),\n        });\n      });\n      this.saveDatesToDives();\n    }\n    this.scheduleEmit.emit(true);\n  }\n\n  componentWillLoad() {\n    this.updateClassSchedule();\n  }\n\n  updateActivities(ev) {\n    this.divingClass.activities = ev.detail;\n    this.updateClassSchedule();\n  }\n\n  updateDate(day, dateString) {\n    this.divingClass.schedule[day] = new Date(dateString);\n    this.updateClassSchedule();\n  }\n\n  saveDatesToDives() {\n    this.divingClass.activities = this.divingClass.activities.map(\n      (activity) => {\n        if (activity.divePlan) {\n          /*const date = moment(this.divingClass.schedule[activity.day])\n            .add(12, \"hours\")\n            .toDate();*/\n          // Add 12 hours to the date\n          const date = addHours(this.divingClass.schedule[activity.day], 12);\n          activity.divePlan.dives[0].date = date;\n        }\n        return activity;\n      }\n    );\n  }\n\n  render() {\n    return (\n      <ion-grid>\n        <ion-row>\n          {this.scheduleArray.map((day) => (\n            <ion-col size=\"3\">\n              <ion-card>\n                <ion-card-title>\n                  <my-transl tag=\"day\" text=\"Day\" />\n                  {\" \" + day.day}\n                </ion-card-title>\n                <ion-card-content>\n                  <ion-datetime\n                    presentation=\"date\"\n                    onIonChange={(ev) =>\n                      this.updateDate(day.day, ev.detail.value)\n                    }\n                    max=\"2050\"\n                    readonly={!this.editable}\n                    value={day.date.toISOString()}\n                  ></ion-datetime>\n                </ion-card-content>\n              </ion-card>\n            </ion-col>\n          ))}\n        </ion-row>\n        <ion-row>\n          <app-dive-course-activities\n            schedule={this.divingClass.activities}\n            editable={this.editable}\n            onScheduleEmit={(ev) => this.updateActivities(ev)}\n          />\n        </ion-row>\n      </ion-grid>\n    );\n  }\n}\n"],"version":3}