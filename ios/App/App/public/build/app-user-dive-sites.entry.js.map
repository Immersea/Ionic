{"file":"app-user-dive-sites.entry.esm.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,mBAAmB,GAAG,uBAAuB;;MCctC,gBAAgB;;;QAI3B,oBAAe,GAAU,EAAE,CAAC;;uBACF,EAAE;;IAE5B,MAAM,iBAAiB;QACrB,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,SAAS;YACjE,IAAI,SAAS,IAAI,SAAS,CAAC,GAAG,EAAE;gBAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC;gBAC1C,IAAI,CAAC,aAAa,EAAE,CAAC;aACtB;SACF,CAAC,CAAC;;QAEH,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC,cAAc,CAAC,SAAS,CAC7D,CAAC,UAAU;YACT,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;YAClC,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB,CACF,CAAC;KACH;IAED,oBAAoB;QAClB,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;QAC9B,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;KACnC;IAED,aAAa;QACX,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IACE,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC;YAC/B,IAAI,CAAC,SAAS;YACd,IAAI,CAAC,SAAS,CAAC,QAAQ,EACvB;YACA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG;gBAC/C,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,UAAU,IAAI,mBAAmB,EAAE;oBAClE,IAAI,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;oBAC/D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACzB;aACF,CAAC,CAAC;YACH,IAAI,CAAC,OAAO,GAAGA,sBAAO,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;SACrD;KACF;IAED,MAAM,CAAC,KAAK,EAAE,EAAE;QACd,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,gBAAgB,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;KAC5C;IAED,MAAM;QACJ,QACE,EAAC,IAAI,uDACF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,MACrB,gBACE,MAAM,QACN,OAAO,EAAE,MAAM,gBAAgB,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC,EAC/D,MAAM,UAEL,IAAI,CAAC,QAAQ,IACZ,kBAAY,IAAI,EAAC,OAAO,IACtB,WAAK,GAAG,EAAE,IAAI,CAAC,QAAQ,GAAI,CAChB,IACX,SAAS,EAEb,qBAAY,IAAI,CAAC,WAAW,CAAa,EACzC,kBACE,IAAI,EAAC,OAAO,qBAEZ,IAAI,EAAC,KAAK,EACV,OAAO,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,IAEzC,gBAAU,IAAI,EAAC,QAAQ,EAAC,IAAI,EAAC,KAAK,GAAY,CACnC,CACJ,CACZ,CAAC,CACG,EACP;KACH;;;;;;","names":["orderBy"],"sources":["src/components/udive/app/user/app-user-dive-sites/app-user-dive-sites.scss?tag=app-user-dive-sites","src/components/udive/app/user/app-user-dive-sites/app-user-dive-sites.tsx"],"sourcesContent":["app-user-dive-sites {\n    /* Component styles go here */\n}\n","import {Component, h, State, Host} from \"@stencil/core\";\nimport {UserService} from \"../../../../../services/common/user\";\nimport {UserRoles} from \"../../../../../interfaces/common/user/user-roles\";\nimport {orderBy} from \"lodash\";\nimport {\n  DiveSitesService,\n  DIVESITESCOLLECTION,\n} from \"../../../../../services/udive/diveSites\";\nimport {Subscription} from \"rxjs\";\n\n@Component({\n  tag: \"app-user-dive-sites\",\n  styleUrl: \"app-user-dive-sites.scss\",\n})\nexport class AppUserDiveSites {\n  @State() userRoles: UserRoles;\n  userRoles$: Subscription;\n  diveSitesList$: Subscription;\n  sitesCollection: any[] = [];\n  @State() mySites: any[] = [];\n\n  async componentWillLoad() {\n    this.userRoles$ = UserService.userRoles$.subscribe(async (userRoles) => {\n      if (userRoles && userRoles.uid) {\n        this.userRoles = new UserRoles(userRoles);\n        this.filterMySites();\n      }\n    });\n    //load all dive sites\n    this.diveSitesList$ = DiveSitesService.diveSitesList$.subscribe(\n      (collection) => {\n        this.sitesCollection = collection;\n        this.filterMySites();\n      }\n    );\n  }\n\n  disconnectedCallback() {\n    this.userRoles$.unsubscribe();\n    this.diveSitesList$.unsubscribe();\n  }\n\n  filterMySites() {\n    this.mySites = [];\n    if (\n      this.sitesCollection.length > 0 &&\n      this.userRoles &&\n      this.userRoles.editorOf\n    ) {\n      Object.keys(this.userRoles.editorOf).forEach((key) => {\n        if (this.userRoles.editorOf[key].collection == DIVESITESCOLLECTION) {\n          let site = this.sitesCollection.find((site) => site.id == key);\n          this.mySites.push(site);\n        }\n      });\n      this.mySites = orderBy(this.mySites, \"displayname\");\n    }\n  }\n\n  update(event, id) {\n    event.stopPropagation();\n    DiveSitesService.presentDiveSiteUpdate(id);\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.mySites.map((site) => (\n          <ion-item\n            button\n            onClick={() => DiveSitesService.presentDiveSiteDetails(site.id)}\n            detail\n          >\n            {site.photoURL ? (\n              <ion-avatar slot=\"start\">\n                <img src={site.photoURL} />\n              </ion-avatar>\n            ) : undefined}\n\n            <ion-label>{site.displayName}</ion-label>\n            <ion-button\n              fill=\"clear\"\n              icon-only\n              slot=\"end\"\n              onClick={(ev) => this.update(ev, site.id)}\n            >\n              <ion-icon name=\"create\" slot=\"end\"></ion-icon>\n            </ion-button>\n          </ion-item>\n        ))}\n      </Host>\n    );\n  }\n}\n"],"version":3}