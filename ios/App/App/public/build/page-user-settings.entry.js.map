{"file":"page-user-settings.entry.esm.js","mappings":"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","names":[],"sources":["src/components/udive/pages/user/page-user-settings/page-user-settings.scss?tag=page-user-settings","src/components/udive/pages/user/page-user-settings/page-user-settings.tsx"],"sourcesContent":["page-user-settings {\n  .cover-header {\n    margin-top: var(--coverHeight);\n  }\n  ion-segment-button {\n    --color-checked: var(--ion-color-udive-contrast);\n  }\n  .nopaddingtop {\n    //remove for iOS\n    padding-top: 0px !important;\n  }\n}\n","import { Component, h, State, Element } from \"@stencil/core\";\nimport { Subscription } from \"rxjs\";\nimport { UserService } from \"../../../../../services/common/user\";\nimport { AuthService } from \"../../../../../services/common/auth\";\nimport { UserProfile } from \"../../../../../interfaces/common/user/user-profile\";\nimport {\n  fabButtonTopMarginString,\n  slideHeight,\n} from \"../../../../../helpers/utils\";\nimport { Environment } from \"../../../../../global/env\";\nimport Swiper from \"swiper\";\nimport { TranslationService } from \"../../../../../services/common/translations\";\n\n@Component({\n  tag: \"page-user-settings\",\n  styleUrl: \"page-user-settings.scss\",\n})\nexport class PageUserSettings {\n  @Element() el: HTMLElement;\n  @State() userProfile: UserProfile;\n  userSub$: Subscription;\n  @State() titles = [\n    { tag: \"user-info\", text: \"My Info\" },\n    { tag: \"dive-cards\" },\n    { tag: \"user-confs\", text: \"My Dive Configurations\" },\n    { tag: \"licences\" },\n    //{tag: \"notifications\"},\n  ];\n  segmentTitles: {\n    configurations: string;\n    tanks: string;\n  };\n  selectedSegment = \"configurations\";\n  @State() slider: Swiper;\n  @State() updateView = false;\n  content: HTMLIonContentElement;\n\n  componentWillLoad() {\n    this.segmentTitles = {\n      configurations: TranslationService.getTransl(\n        \"configurations\",\n        \"Configurations\"\n      ),\n      tanks: TranslationService.getTransl(\"tanks\", \"Tanks\"),\n    };\n    this.userSub$ = UserService.userProfile$.subscribe(\n      (userProfile: UserProfile) => {\n        this.userProfile = new UserProfile(userProfile);\n      }\n    );\n\n    this.updateView = !this.updateView;\n  }\n\n  async componentDidLoad() {\n    this.setSliderHeight();\n    //check if user is loaded or trigger local user\n    if (!this.userProfile) {\n      UserService.initLocalUser();\n    }\n    this.updateSlider();\n  }\n\n  segmentChartChanged(ev) {\n    this.selectedSegment = ev.detail.value;\n    this.updateSlider();\n  }\n\n  updateSlider() {\n    this.updateView = !this.updateView;\n    setTimeout(() => {\n      //reset slider height to show address\n      this.slider ? this.slider.update() : undefined;\n    }, 100);\n  }\n\n  setSliderHeight() {\n    this.slider = new Swiper(\".slider-user-settings\", {\n      speed: 400,\n      spaceBetween: 100,\n      allowTouchMove: true,\n      autoHeight: true,\n    });\n    //reset sliders height inside slider\n    const slideContainers = Array.from(\n      this.el.getElementsByClassName(\"slide-container\")\n    );\n    slideContainers.map((container) => {\n      container.setAttribute(\n        \"style\",\n        \"height: \" + slideHeight(this.userProfile) + \"px\"\n      );\n    });\n  }\n\n  disconnectedCallback() {\n    this.userSub$.unsubscribe();\n  }\n\n  logScrollStart(ev) {\n    this.content = ev.srcElement;\n  }\n\n  render() {\n    return [\n      this.userProfile\n        ? [\n            <ion-header class='cover-header'>\n              <app-user-cover showUserDetails={false}></app-user-cover>\n            </ion-header>,\n            <app-header-segment-toolbar\n              color={Environment.getAppColor()}\n              swiper={this.slider}\n              titles={this.titles}\n            ></app-header-segment-toolbar>,\n            <ion-content\n              class='slides'\n              scrollEvents={true}\n              onIonScrollStart={(ev) => this.logScrollStart(ev)}\n            >\n              <ion-fab\n                vertical='top'\n                horizontal='start'\n                slot='fixed'\n                style={{\n                  marginTop:\n                    \"calc(env(safe-area-inset-top) + \" +\n                    fabButtonTopMarginString(1) +\n                    \")\",\n                }}\n              >\n                <ion-menu-toggle>\n                  <ion-fab-button color='light'>\n                    <ion-icon name='menu-outline' />\n                  </ion-fab-button>\n                </ion-menu-toggle>\n              </ion-fab>\n              <ion-fab\n                vertical='top'\n                horizontal='end'\n                slot='fixed'\n                style={{\n                  marginTop:\n                    \"calc(env(safe-area-inset-top) + \" +\n                    fabButtonTopMarginString(1) +\n                    \")\",\n                }}\n              >\n                <ion-fab-button\n                  color='light'\n                  onClick={() => UserService.presentUserUpdate()}\n                >\n                  <ion-icon name='create-outline' />\n                </ion-fab-button>\n              </ion-fab>\n              <swiper-container class='slider-user-settings swiper'>\n                <swiper-wrapper class='swiper-wrapper'>\n                  <swiper-slide class='swiper-slide'>\n                    <ion-content class='slide-container'>\n                      <app-user-cover showCover={false}></app-user-cover>\n                      <ion-button\n                        expand='block'\n                        fill='solid'\n                        color='danger'\n                        onClick={() => AuthService.logout()}\n                      >\n                        <ion-icon slot='start' name='log-out'></ion-icon>\n                        <my-transl\n                          tag='logout'\n                          text='Logout'\n                          isLabel\n                        ></my-transl>\n                      </ion-button>\n                    </ion-content>\n                  </swiper-slide>\n                  <swiper-slide class='swiper-slide'>\n                    <app-user-cards\n                      updateSlider={() => this.updateSlider()}\n                    ></app-user-cards>\n                  </swiper-slide>\n                  <swiper-slide class='swiper-slide'>\n                    <div class='ion-no-padding'>\n                      <ion-row>\n                        <ion-col>\n                          <ion-segment\n                            onIonChange={(ev) => this.segmentChartChanged(ev)}\n                            color={Environment.getAppColor()}\n                            mode='ios'\n                            value={this.selectedSegment}\n                          >\n                            <ion-segment-button value='configurations'>\n                              <ion-label>\n                                {this.segmentTitles.configurations}\n                              </ion-label>\n                            </ion-segment-button>\n                            <ion-segment-button value='tanks'>\n                              <ion-label>{this.segmentTitles.tanks}</ion-label>\n                            </ion-segment-button>\n                          </ion-segment>\n                        </ion-col>\n                      </ion-row>\n                    </div>\n                    {this.selectedSegment == \"configurations\" ? (\n                      <app-user-configurations></app-user-configurations>\n                    ) : (\n                      <app-user-tanks></app-user-tanks>\n                    )}\n                  </swiper-slide>\n                  <swiper-slide class='swiper-slide'>\n                    <ion-content class='slide-container'>\n                      <app-user-licences></app-user-licences>\n                    </ion-content>\n                  </swiper-slide>\n                  {/**\n                   * <swiper-slide class=\"swiper-slide\">\n                    <ion-content class=\"slide-container\">\n                      <app-user-manage-notifications></app-user-manage-notifications>\n                    </ion-content>\n                  </swiper-slide>\n                   */}\n                </swiper-wrapper>\n              </swiper-container>\n            </ion-content>,\n          ]\n        : undefined,\n    ];\n  }\n}\n"],"version":3}