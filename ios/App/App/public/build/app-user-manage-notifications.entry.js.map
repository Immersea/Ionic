{"file":"app-user-manage-notifications.entry.esm.js","mappings":"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","names":["isBoolean","orderBy"],"sources":["src/components/common/app/user/app-user-manage-notifications/app-user-manage-notifications.scss?tag=app-user-manage-notifications","src/components/common/app/user/app-user-manage-notifications/app-user-manage-notifications.tsx"],"sourcesContent":["app-user-manage-notifications {\n  width: 100%;\n  /* Component styles go here */\n}\n","import {Component, h, State} from \"@stencil/core\";\nimport {NotificationsService} from \"../../../../../services/common/notifications\";\nimport {\n  TopicsList,\n  NotificationDoc,\n} from \"../../../../../interfaces/common/notifications/notifications\";\nimport {TranslationService} from \"../../../../../services/common/translations\";\nimport {actionSheetController} from \"@ionic/core\";\nimport {SystemService} from \"../../../../../services/common/system\";\nimport {isBoolean, orderBy} from \"lodash\";\n\n@Component({\n  tag: \"app-user-manage-notifications\",\n  styleUrl: \"app-user-manage-notifications.scss\",\n})\nexport class AppUserManageNotifications {\n  topics: TopicsList;\n  notificationDoc: NotificationDoc;\n  deviceToken: string;\n  notificationsArray = [];\n  topicsArray: {\n    id: string;\n    name: string;\n    activeOnDevice: boolean;\n    activeOnAllDevices: boolean;\n  }[] = [];\n  @State() updateView = false;\n\n  async componentWillLoad() {\n    this.deviceToken = await NotificationsService.getLocalNotificationToken();\n    this.updateNotifications();\n  }\n\n  async updateNotifications() {\n    this.notificationDoc = await NotificationsService.getUserTokensDoc();\n    this.loadNotifications();\n  }\n\n  async loadNotifications() {\n    if (this.notificationDoc && this.notificationDoc[this.deviceToken]) {\n      this.topics = this.notificationDoc[this.deviceToken].topics;\n    } else {\n      this.topics = null;\n    }\n    this.notificationsArray = [];\n    Object.keys(this.notificationDoc).forEach((devicetoken) => {\n      const notificationDoc = this.notificationDoc[devicetoken];\n      let topicsArray = [];\n      if (notificationDoc.topics) {\n        Object.keys(notificationDoc.topics).map((topicId) => {\n          //search same topic on all other devices and check if active on all\n          let activeOnAllDevices = true;\n          Object.keys(this.notificationDoc).map((token) => {\n            const activeTopic = this.notificationDoc[token].topics[topicId];\n            if (isBoolean(activeTopic)) {\n              activeOnAllDevices = activeOnAllDevices && activeTopic;\n            }\n          });\n          topicsArray.push({\n            id: topicId,\n            devicetoken: devicetoken,\n            activeOnDevice: this.topics ? this.topics[topicId] : false,\n            activeOnAllDevices: activeOnAllDevices,\n            name: this.getTopicName(topicId),\n          });\n        });\n        topicsArray = orderBy(topicsArray, \"name\");\n      }\n      this.notificationsArray.push({\n        devicetoken: devicetoken,\n        info: notificationDoc.info,\n        topics: topicsArray,\n      });\n    });\n    this.notificationsArray = orderBy(this.notificationsArray, \"devicetoken\");\n    this.updateView = !this.updateView;\n  }\n\n  getTopicName(topicId: string) {\n    console.log(\"getTopicName\", topicId);\n    /*const array = topicId.split(\"_\");\n    let name = null;\n    let beachKioskName = null;\n    const collection = array[0];\n    const area = array[array.length - 1];\n    if (area === \"bookings\" || area === \"orders\") {\n      //get kiosk or beach name\n      const nameArray = [];\n      for (let i = 1; i < array.length - 1; i++) {\n        nameArray.push(array[i]);\n      }\n      beachKioskName = nameArray.join(\"-\");\n    }\n\n    return name;*/\n  }\n\n  async changeTopicSubscription(topic) {\n    const removeFromDevice = {\n      text: TranslationService.getTransl(\n        \"remove-notification-from-device\",\n        \"Remove from this device only\"\n      ),\n      handler: async () => {\n        SystemService.presentLoading(\"updating\");\n        NotificationsService.unsubscribeUserDeviceFromTopic(\n          topic.id,\n          topic.deviceToken\n        )\n          .then((data) => {\n            this.notificationDoc = data;\n            this.loadNotifications();\n            SystemService.dismissLoading();\n          })\n          .catch((err) => {\n            this.showErrors(err);\n            this.updateNotifications();\n            SystemService.dismissLoading();\n          });\n        return true;\n      },\n    };\n    const addToDevice = {\n      text: TranslationService.getTransl(\n        \"add-notification-to-device\",\n        \"Add to this device only\"\n      ),\n      handler: async () => {\n        SystemService.presentLoading(\"updating\");\n        NotificationsService.subscribeUserDeviceToTopic(\n          topic.id,\n          topic.deviceToken\n        )\n          .then((data) => {\n            this.notificationDoc = data;\n            this.loadNotifications();\n            SystemService.dismissLoading();\n          })\n          .catch((err) => {\n            this.showErrors(err);\n            this.updateNotifications();\n            SystemService.dismissLoading();\n          });\n        return true;\n      },\n    };\n    const removeFromAllDevices = {\n      text: TranslationService.getTransl(\n        \"remove-notification-from-all-devices\",\n        \"Remove from all my devices\"\n      ),\n      handler: async () => {\n        SystemService.presentLoading(\"updating\");\n        NotificationsService.unsubscribeUserFromTopic(topic.id)\n          .then((data) => {\n            this.notificationDoc = data;\n            this.loadNotifications();\n            SystemService.dismissLoading();\n          })\n          .catch((err) => {\n            this.showErrors(err);\n            this.updateNotifications();\n            SystemService.dismissLoading();\n          });\n        return true;\n      },\n    };\n    const addToAllDevices = {\n      text: TranslationService.getTransl(\n        \"add-notification-to-all-devices\",\n        \"Add to all my devices\"\n      ),\n      handler: async () => {\n        SystemService.presentLoading(\"updating\");\n        NotificationsService.subscribeUserToTopic(topic.id)\n          .then((data) => {\n            this.notificationDoc = data;\n            this.loadNotifications();\n            SystemService.dismissLoading();\n          })\n          .catch((err) => {\n            this.showErrors(err);\n            this.updateNotifications();\n            SystemService.dismissLoading();\n          });\n        return true;\n      },\n    };\n    const actionSheet = await actionSheetController.create({\n      header: topic.name,\n      buttons: [\n        topic.activeOnDevice ? removeFromDevice : addToDevice,\n        topic.activeOnAllDevices ? removeFromAllDevices : addToAllDevices,\n        {\n          text: TranslationService.getTransl(\"delete\", \"Delete\"),\n          role: \"destructive\",\n          handler: async () => {\n            NotificationsService.deleteUserFromTopic(topic.id)\n              .then((data) => {\n                this.notificationDoc = data;\n                this.loadNotifications();\n              })\n              .catch((err) => {\n                this.showErrors(err);\n                this.updateNotifications();\n              });\n            return true;\n          },\n        },\n        {\n          text: TranslationService.getTransl(\"cancel\", \"Cancel\"),\n          role: \"cancel\",\n        },\n      ],\n    });\n    await actionSheet.present();\n  }\n\n  async showErrors(errors) {\n    SystemService.presentAlertError(JSON.stringify(errors));\n  }\n\n  render() {\n    return (\n      <div>\n        {this.notificationsArray.length == 0 ? (\n          <ion-item>No notifications set</ion-item>\n        ) : undefined}\n\n        {this.notificationsArray.map((device) => (\n          <ion-item-group>\n            <ion-item-divider>\n              <ion-label>\n                {device.info.model +\n                  \": \" +\n                  device.info.operatingSystem +\n                  \"-\" +\n                  device.info.osVersion +\n                  (device.devicetoken == this.deviceToken\n                    ? \" (this device)\"\n                    : \"\")}\n              </ion-label>\n            </ion-item-divider>\n\n            {device.topics.length == 0 ? (\n              <ion-item>No notifications for this device</ion-item>\n            ) : undefined}\n            {device.topics.map((topic) => (\n              <ion-item\n                button\n                detail={false}\n                onClick={() => this.changeTopicSubscription(topic)}\n              >\n                <ion-label>{topic.name}</ion-label>\n                <ion-button\n                  slot=\"end\"\n                  icon-only\n                  fill=\"clear\"\n                  color={topic.activeOnDevice ? \"success\" : \"danger\"}\n                >\n                  <ion-icon\n                    name={topic.activeOnDevice ? \"checkmark\" : \"close\"}\n                  />\n                </ion-button>\n                <ion-button\n                  slot=\"end\"\n                  icon-only\n                  fill=\"clear\"\n                  color={topic.activeOnAllDevices ? \"success\" : \"danger\"}\n                >\n                  <ion-icon\n                    name={topic.activeOnAllDevices ? \"checkmark-done\" : \"close\"}\n                  />\n                </ion-button>\n              </ion-item>\n            ))}\n          </ion-item-group>\n        ))}\n      </div>\n    );\n  }\n}\n"],"version":3}