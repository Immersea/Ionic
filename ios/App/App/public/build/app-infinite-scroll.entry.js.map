{"file":"app-infinite-scroll.entry.esm.js","mappings":"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","names":["orderBy"],"sources":["src/components/common/app/common/app-infinite-scroll/app-infinite-scroll.scss?tag=app-infinite-scroll","src/components/common/app/common/app-infinite-scroll/app-infinite-scroll.tsx"],"sourcesContent":["app-infinite-scroll {\n  .no-select {\n    -webkit-user-select: none; /* Safari */\n    -moz-user-select: none; /* Firefox */\n    -ms-user-select: none; /* IE10+/Edge */\n    user-select: none; /* Standard */\n  }\n}\n","import {Element} from \"@stencil/core\";\nimport {\n  Component,\n  h,\n  Prop,\n  Event,\n  EventEmitter,\n  Host,\n  State,\n  Watch,\n} from \"@stencil/core\";\nimport {orderBy} from \"lodash\";\n\n@Component({\n  tag: \"app-infinite-scroll\",\n  styleUrl: \"app-infinite-scroll.scss\",\n})\nexport class AppInfiniteScroll {\n  @Element() el: HTMLElement;\n  private listElement: HTMLIonListElement;\n  @Event() listChanged: EventEmitter<any>;\n  @Prop({mutable: true}) list: any[] = [];\n  @Prop({mutable: true}) loading: boolean = false;\n  @Prop() groupBy: string[] = [];\n  @Prop() orderBy: string[] = [];\n  @Prop() returnField: string;\n  @Prop() showFields: string[] = [];\n  @Prop() showFieldsDivider: string = \" \";\n  @Prop() showNotes: string[] = [];\n  @Prop() icon: string;\n  @Prop() options: {\n    tag: string;\n    text: string;\n    icon: string;\n    color: string;\n    func: any;\n  }[];\n  @State() setItems: any[];\n  @State() groupedItems;\n  @State() updateView = false;\n  start: number;\n  listLength: number;\n\n  @Watch(\"list\")\n  reset() {\n    this.start = 0;\n    this.listLength = 50;\n    this.setItems = [];\n    this.groupedItems = {};\n    this.generateItems();\n  }\n\n  @Event() itemClicked: EventEmitter<any>;\n\n  componentWillLoad() {\n    this.reset();\n  }\n\n  generateItems(ev?) {\n    const newItems = [];\n    for (let i = this.start; i < this.start + this.listLength; i++) {\n      if (this.list[i]) newItems.push(this.list[i]);\n    }\n    this.setItems = [...this.setItems, ...newItems];\n    this.setItems = this.orderBy\n      ? orderBy(this.setItems, this.orderBy)\n      : this.setItems;\n    this.start += this.listLength;\n    if (this.groupBy.length > 0) {\n      const groupedItems = [];\n      this.setItems.forEach((item) => {\n        const value = item[this.groupBy[0]];\n        !groupedItems[value] ? (groupedItems[value] = []) : undefined;\n        groupedItems[value].push(item);\n      });\n      this.groupedItems = groupedItems;\n    }\n    ev ? ev.target.complete() : null;\n    this.listChanged.emit();\n  }\n\n  showItem(item) {\n    return (\n      <ion-item-sliding class=\"no-select\">\n        <ion-item\n          button\n          detail\n          onClick={() =>\n            this.itemClicked.emit(\n              this.returnField ? item[this.returnField] : item\n            )\n          }\n        >\n          {item.photoURL ? (\n            <ion-avatar slot=\"start\">\n              <img src={item.photoURL} />\n            </ion-avatar>\n          ) : this.icon ? (\n            <ion-icon slot=\"start\" name={this.icon}></ion-icon>\n          ) : undefined}\n          <ion-label>\n            <h2>\n              {this.showFields.map((field, index) => {\n                return item[field]\n                  ? item[field] +\n                      (index < this.showFields.length - 1\n                        ? this.showFieldsDivider\n                        : \"\")\n                  : \"\";\n              })}\n            </h2>\n            {this.showNotes.length > 0 ? (\n              <p>\n                {this.showNotes.map((field, index) => {\n                  return item[field]\n                    ? item[field] +\n                        (index < this.showNotes.length - 1\n                          ? index < this.showNotes.length - 1\n                            ? this.showFieldsDivider\n                            : \"\"\n                          : \"\")\n                    : \"\";\n                })}\n              </p>\n            ) : undefined}\n          </ion-label>\n        </ion-item>\n        {this.options ? (\n          <ion-item-options>\n            {this.options.map((option) => (\n              <ion-item-option\n                color={option.color}\n                onClick={() => this.executeOptionFc(option, item)}\n              >\n                {option.icon ? (\n                  <ion-icon name={option.icon}></ion-icon>\n                ) : undefined}\n                <my-transl tag={option.tag} text={option.text}></my-transl>\n              </ion-item-option>\n            ))}\n          </ion-item-options>\n        ) : undefined}\n      </ion-item-sliding>\n    );\n  }\n\n  executeOptionFc(option, item) {\n    this.listElement = this.el.querySelector(\"#infinite-scroll-list\");\n    this.listElement.closeSlidingItems();\n    option.func(item[this.returnField]);\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.list.length == 0 ? (\n          <div>\n            {this.loading ? (\n              <ion-item>\n                <ion-thumbnail slot=\"start\">\n                  <ion-skeleton-text></ion-skeleton-text>\n                </ion-thumbnail>\n                <ion-label>\n                  <h2>\n                    <ion-skeleton-text\n                      animated\n                      style={{width: \"80%\"}}\n                    ></ion-skeleton-text>\n                  </h2>\n                  <p>\n                    <ion-skeleton-text\n                      animated\n                      style={{width: \"60%\"}}\n                    ></ion-skeleton-text>\n                  </p>\n                </ion-label>\n              </ion-item>\n            ) : (\n              <ion-item>\n                <ion-label>\n                  <h2>No data available</h2>\n                </ion-label>\n              </ion-item>\n            )}\n          </div>\n        ) : (\n          [\n            <ion-list id=\"infinite-scroll-list\">\n              {this.groupBy.length > 0\n                ? Object.keys(this.groupedItems).map((key) => (\n                    <ion-item-group>\n                      <ion-item-divider>\n                        <ion-label>{key}</ion-label>\n                      </ion-item-divider>\n                      {this.groupedItems[key].map((item) =>\n                        this.showItem(item)\n                      )}\n                    </ion-item-group>\n                  ))\n                : this.setItems.map((item) => this.showItem(item))}\n            </ion-list>,\n            <ion-infinite-scroll\n              onIonInfinite={(ev) => {\n                this.generateItems(ev);\n              }}\n            >\n              <ion-infinite-scroll-content></ion-infinite-scroll-content>\n            </ion-infinite-scroll>,\n          ]\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}