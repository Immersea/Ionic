{"file":"stripe-api-167a8f30.js","mappings":"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","names":["round"],"sources":["src/services/common/stripe-api.ts"],"sourcesContent":["import {httpsCallable} from \"firebase/functions\";\nimport {Environment} from \"../../global/env\";\nimport {functions} from \"../../helpers/firebase\";\nimport {PaymentStatus} from \"../../interfaces/common/stripe/stripe\";\nimport {DatabaseService} from \"./database\";\nimport {RouterService} from \"./router\";\nimport {SystemService} from \"./system\";\nimport {round} from \"lodash\";\ndeclare var Stripe;\n\n/**\n * @module Services\n */\n\nexport class StripeAPIController {\n  el: HTMLElement;\n  public shouldBeAsync = true;\n\n  /**\n   * Immersea\n   */\n  public publishableKeyTest_Immersea: string =\n    \"pk_test_51IyID2DiIthbhXzgcmfDTzMVwJEf8cXgDaMgWdulWi1yjdKdTEYaj9FZXeFiGRWlR9P8IXDpYnkD84OyrGlikLfI00PE5fMGdl\";\n  public publishableKeyProd_Immersea: string =\n    \"sk_test_51IyID2DiIthbhXzg0non2BblyCy3l2qF4hiTybt5ZQaFZ3OJLvmGsFK3Z4JI8omJru3sWjTuHxh3ZCnNWqsFLYG300Lnvr5vYV\";\n\n  /**\n   * O-Range\n   */\n  public publishableKeyTest_ORange: string =\n    \"pk_test_51IvOEYEKefFL9WPBfoYdfFjPfbnvO9gK8A5wAD5cnpzbJmtYugrv45nowbB1P50jn2ECZ9xcbk49SWTS6dqDDMgR00dtep8t1v\";\n  public publishableKeyProd_ORange: string =\n    \"pk_live_51IvOEYEKefFL9WPBMN1NQ3iqosSXd9X62oF3tI6kWclmEoDUYlbXu7BqBNDTtZUGbMhRr4Z74pNVcjUVvc9kI5DN004WVwJgzv\";\n\n  /**\n   * DEFINE KEY!!\n   */\n  test = true;\n  immersea = true; //immersea or orange stripe account as master\n  publishableKey = this.test\n    ? this.immersea\n      ? this.publishableKeyTest_Immersea\n      : this.publishableKeyTest_ORange\n    : this.immersea\n      ? this.publishableKeyProd_Immersea\n      : this.publishableKeyProd_ORange;\n  stripe = null;\n  card: any;\n\n  paymentCollectionID: string;\n  paymentId: string;\n\n  initStripe() {\n    this.stripe = Stripe(this.publishableKey);\n  }\n  /**************\n   *\n   * Open Modal for Stripe payments\n   *\n   **************/\n  async payWithCard(collectionId, id, total, connectedAccountID?) {\n    this.paymentCollectionID = collectionId;\n    this.paymentId = id;\n    var options = {\n      collectionId: collectionId,\n      orderId: id,\n      amount: round(total, 2) * 100, // in cent\n      currency: \"eur\",\n      connectedAccountID: connectedAccountID,\n      application_fee_amount: 0,\n    };\n    console.log(\"options\", options);\n    RouterService.openModal(\"app-stripe-pay\", options, false);\n  }\n\n  /**************\n   *\n   * Stripe Connect for third party payments\n   *\n   **************/\n  async connectStripeUser() {\n    let res;\n    try {\n      res = await httpsCallable(\n        functions,\n        \"stripeConnectStandardUser\"\n      )({\n        link: Environment.getSiteUrl(),\n      });\n    } catch (error) {\n      res = {\n        error: error,\n      };\n    }\n    if (res && res.error) {\n      return {error: res.error};\n    } else {\n      return res;\n    }\n  }\n\n  /**************\n   *\n   * Retrieve Stripe Connected Account\n   *\n   **************/\n  async retrieveStripeConnectedAccount(id) {\n    let res;\n    try {\n      res = await httpsCallable(\n        functions,\n        \"stripeRetrieveConnectedAccount\"\n      )({\n        accountID: id,\n      });\n    } catch (error) {\n      res = {\n        error: error,\n      };\n    }\n    if (res && res.error) {\n      return {error: res.error};\n    } else {\n      return res;\n    }\n  }\n\n  /**************\n   *\n   * Payment Intent for dierct payment to account\n   *\n   **************/\n  async makePaymentIntent(amount, currency, element?) {\n    if (Stripe) {\n      this.stripe = Stripe(this.publishableKey);\n      if (element) {\n        this.el = element;\n      }\n      const orderData = {\n        amount: round(amount, 2),\n        currency: currency,\n      };\n\n      // Disable the button until we have Stripe set up on the page\n      this.el.querySelector(\"button\").disabled = false;\n      let res;\n      try {\n        res = await httpsCallable(functions, \"createPaymentIntent\")(orderData);\n      } catch (error) {\n        res = {\n          error: error,\n        };\n      }\n      if (res && res.error) {\n        SystemService.presentAlertError(res.error);\n      } else {\n        const elements = await this.setupElements(res.data);\n        this.el.querySelector(\"button\").disabled = false;\n        // Handle form submission.\n        const form = this.el.querySelector(\"#payment-form\");\n        form.addEventListener(\"submit\", (event) => {\n          event.preventDefault();\n          // Initiate payment when the submit button is clicked\n          this.pay(elements.stripe, elements.card, elements.clientSecret);\n        });\n      }\n    }\n  }\n\n  /**************\n   *\n   * Payment Intent for dierct payment to account\n   *\n   **************/\n  async makePaymentIntentToConnectedAccount(\n    amount,\n    currency,\n    application_fee_amount,\n    connectedAccountID,\n    element?\n  ) {\n    if (Stripe) {\n      this.stripe = Stripe(this.publishableKey, {\n        stripeAccount: connectedAccountID,\n      });\n      if (element) {\n        this.el = element;\n      }\n      const orderData = {\n        amount: round(amount, 2),\n        currency: currency,\n        payment_method_types: [\"card\"],\n        application_fee_amount: application_fee_amount,\n        connectedStripeAccount: connectedAccountID,\n      };\n      // Disable the button until we have Stripe set up on the page\n      this.el.querySelector(\"button\").disabled = false;\n      let res;\n      try {\n        res = await httpsCallable(\n          functions,\n          \"createPaymentIntentForConnectedAccount\"\n        )(orderData);\n      } catch (error) {\n        res = {\n          error: error,\n        };\n      }\n      if (res && res.error) {\n        SystemService.presentAlertError(res.error);\n      } else {\n        const elements = await this.setupElements(res.data);\n        this.el.querySelector(\"button\").disabled = false;\n        // Handle form submission.\n        const form = this.el.querySelector(\"#payment-form\");\n        form.addEventListener(\"submit\", (event) => {\n          event.preventDefault();\n          // Initiate payment when the submit button is clicked\n          this.pay(elements.stripe, elements.card, elements.clientSecret);\n        });\n      }\n    }\n  }\n\n  // Set up Stripe.js and Elements to use in checkout form\n  setupElements(data) {\n    var elements = this.stripe.elements();\n    var style = {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\",\n        },\n      },\n      invalid: {\n        fontFamily: \"Arial, sans-serif\",\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\",\n      },\n    };\n\n    var card = elements.create(\"card\", {style: style});\n    card.mount(\"#card-element\");\n\n    card.on(\"change\", (event) => {\n      // Disable the Pay button if there are no card details in the Element\n      this.el.querySelector(\"button\").disabled = event.empty;\n      this.el.querySelector(\"#card-errors\").textContent = event.error\n        ? event.error.message\n        : \"\";\n    });\n\n    return {\n      stripe: this.stripe,\n      card: card,\n      clientSecret: data.clientSecret,\n    };\n  }\n\n  /*\n   * Calls stripe.confirmCardPayment which creates a pop-up modal to\n   * prompt the user to enter extra authentication details without leaving your page\n   */\n  pay(stripe, card, clientSecret) {\n    this.changeLoadingState(true);\n    stripe\n      .confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: card,\n        },\n      })\n      .then((result) => {\n        if (result.error) {\n          // Show error to your customer\n          this.showError(result.error.message);\n        } else {\n          // The payment has been processed!\n          this.orderComplete(clientSecret);\n        }\n      });\n  }\n\n  /* ------- Post-payment helpers ------- */\n\n  /* Shows a success / error message when the payment is complete */\n  orderComplete(clientSecret) {\n    // Just for the purpose of the sample, show the PaymentIntent response object\n    this.stripe.retrievePaymentIntent(clientSecret).then((result) => {\n      const paymentIntent = result.paymentIntent;\n      this.updatePaymentStatus(paymentIntent.id, paymentIntent.status);\n\n      this.el.querySelector(\".sr-payment-form\").classList.add(\"hidden\");\n\n      this.el.querySelector(\"#success\").classList.remove(\"hidden\");\n\n      this.changeLoadingState(false);\n    });\n  }\n\n  async showError(errorMsgText) {\n    this.changeLoadingState(false);\n    var errorMsg = this.el.querySelector(\".sr-field-error\");\n    errorMsg.textContent = errorMsgText;\n    setTimeout(() => {\n      errorMsg.textContent = \"\";\n    }, 4000);\n    this.updatePaymentStatus(null, \"error\");\n  }\n\n  async updatePaymentStatus(id, status) {\n    //update payment in order\n    const order = await DatabaseService.getDocument(\n      this.paymentCollectionID,\n      this.paymentId\n    );\n    const paymentStatus: PaymentStatus = {\n      id: id,\n      status: status,\n      payAt: \"stripe\",\n    };\n    order.paymentStaus = paymentStatus;\n    await DatabaseService.updateDocument(\n      this.paymentCollectionID,\n      this.paymentId,\n      order\n    );\n  }\n\n  // Show a spinner on payment submission\n  changeLoadingState(isLoading) {\n    if (isLoading) {\n      this.el.querySelector(\"button\").disabled = true;\n      this.el.querySelector(\"#spinner\").classList.remove(\"hidden\");\n      this.el.querySelector(\"#button-text\").classList.add(\"hidden\");\n    } else {\n      this.el.querySelector(\"button\").disabled = false;\n      this.el.querySelector(\"#spinner\").classList.add(\"hidden\");\n      document.querySelector(\"#button-text\").classList.remove(\"hidden\");\n    }\n  }\n\n  /*\n\n  async makeStripeSessionPayment() {\n    await SystemService.presentLoading(\"please-wait\");\n    let data = {\n      amount: 110, //in cent\n      currency: \"eur\",\n    };\n    let response = await functions.httpsCallable(\"createStripeCheckoutSession\",\n      {\n        method: \"POST\",\n        redirect: \"follow\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    try {\n      let json = await response.json();\n      SystemService.dismissLoading();\n      if (!json.err) {\n        let header = TranslationService.getTransl(\n          \"stripe-payment-title\",\n          \"Stripe Payment\"\n        );\n        let message = TranslationService.getTransl(\n          \"stripe-payment-confirmed\",\n          \"The payment was succesfull!\"\n        );\n        const alert = await alertController.create({\n          header: header,\n          message: message,\n          buttons: [\n            {\n              text: TranslationService.getTransl(\"ok\", \"OK\"),\n              handler: async () => {},\n            },\n          ],\n        });\n        alert.present();\n      } else {\n        SystemService.presentAlertError(json.err);\n      }\n    } catch (error) {\n      SystemService.dismissLoading();\n      SystemService.presentAlertError(error);\n    }\n\n    fetch(\"/createStripeCheckoutSession\", {\n      method: \"POST\",\n    })\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (session) {\n        return this.stripe.redirectToCheckout({ sessionId: session.id });\n      })\n      .then(function (result) {\n        // If `redirectToCheckout` fails due to a browser or network\n        // error, you should display the localized error message to your\n        // customer using `error.message`.\n        if (result.error) {\n          alert(result.error.message);\n        }\n      })\n      .catch(function (error) {\n        console.error(\"Error:\", error);\n      });\n  }\n\n  setupStripe(form) {\n    let elements = this.stripe.elements();\n    var style = {\n      base: {\n        color: \"#32325d\",\n        lineHeight: \"24px\",\n        fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#aab7c4\",\n        },\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\",\n      },\n    };\n    var paymentData = {\n      type: \"card\",\n      currency: \"eur\",\n      amount: \"100\",\n      usage: \"single_use\",\n      owner: {\n        name: \"Jenny Rosen\",\n        address: {\n          line1: \"Nollendorfstraße 27\",\n          city: \"Berlin\",\n          postal_code: \"10777\",\n          country: \"DE\",\n        },\n        email: \"jenny.rosen@example.com\",\n      },\n    };\n\n    this.card = elements.create(\"card\", { style: style });\n    this.card.mount(\"#card-element\");\n\n    this.card.addEventListener(\"change\", (event) => {\n      var displayError = document.getElementById(\"card-errors\");\n      if (event.error) {\n        displayError.textContent = event.error.message;\n      } else {\n        displayError.textContent = \"\";\n      }\n    });\n\n    form.addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n      this.stripe.createSource(this.card, paymentData).then((source) => {\n        console.log(\"source\", source);\n        if (source.error) {\n          var errorElement = document.getElementById(\"card-errors\");\n          errorElement.textContent = source.error.message;\n        } else {\n          this.makePayment(source.source);\n        }\n      });\n    });\n  }\n\n  async makePayment(source) {\n    await SystemService.presentLoading(\"please-wait\");\n    let data = {\n      amount: 110, //in cent\n      currency: \"eur\",\n      source: source.id,\n    };\n    let response = await functions.httpsCallable(\"payWithStripe\",\n      {\n        method: \"POST\",\n        redirect: \"follow\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    try {\n      let json = await response.json();\n      SystemService.dismissLoading();\n      if (!json.err) {\n        let header = TranslationService.getTransl(\n          \"stripe-payment-title\",\n          \"Stripe Payment\"\n        );\n        let message = TranslationService.getTransl(\n          \"stripe-payment-confirmed\",\n          \"The payment was succesfull!\"\n        );\n        const alert = await alertController.create({\n          header: header,\n          message: message,\n          buttons: [\n            {\n              text: TranslationService.getTransl(\"ok\", \"OK\"),\n              handler: async () => {},\n            },\n          ],\n        });\n        alert.present();\n      } else {\n        SystemService.presentAlertError(json.err);\n      }\n    } catch (error) {\n      SystemService.dismissLoading();\n      SystemService.presentAlertError(error);\n    }\n  }*/\n}\n\nexport const StripeAPIService = new StripeAPIController();\n"],"version":3}