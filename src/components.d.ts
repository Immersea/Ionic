/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DiveTrip, Organiser, TripDive } from "./interfaces/udive/dive-trip/diveTrip";
import { Translation, UserTranslation, UserTranslationDoc } from "./interfaces/common/translations/translations";
import { DecimalCoords } from "./components/common/app/map/app-coordinates/app-coordinates";
import { LocationIQ } from "./services/common/map";
import { Customer, CustomerGroup } from "./interfaces/trasteel/customer/customer";
import { ARPCModel } from "./interfaces/udive/planner/arpc";
import { DecoplannerParameters } from "./interfaces/udive/planner/decoplanner-parameters";
import { Activity, Certification, DivingClass } from "./interfaces/udive/diving-class/divingClass";
import { DivingCourse } from "./interfaces/udive/diving-school/divingSchool";
import { DivePlanModel } from "./interfaces/udive/planner/dive-plan";
import { MapDataDiveSite } from "./interfaces/udive/dive-site/diveSite";
import { CustomerConditionCCM, CustomerConditionEAF, CustomerConditionLF, CustomerLocation, LocationType } from "./interfaces/trasteel/customer/customerLocation";
import { InputValidator, Marker, SearchTag, TextMultilanguage } from "./interfaces/interfaces";
import { TextFieldTypes } from "@ionic/core";
import { Validator, ValidatorEntry } from "./validators";
import { AutoFillCourses, Project, ProjectAreaQualityShape } from "./interfaces/trasteel/refractories/projects";
import { AreaShape, Shape, ShapeFilter } from "./interfaces/trasteel/refractories/shapes";
import { UserPubicProfile } from "./interfaces/common/user/user-public-profile";
import { Datasheet, DatasheetFilter } from "./interfaces/trasteel/refractories/datasheets";
import { Card } from "./interfaces/udive/user/user-cards";
import { DiveConfiguration } from "./interfaces/udive/planner/dive-configuration";
import { UserRoles } from "./interfaces/common/user/user-roles";
import { TankModel } from "./interfaces/udive/planner/tank-model";
import { UserPlans } from "./interfaces/trasteel/users/user-plans";
import { UserPubicProfile as UserPubicProfile1 } from "./components";
import { Chat } from "./interfaces/common/chat/chat";
import { GasModel } from "./interfaces/udive/planner/gas-model";
import { Gas } from "./interfaces/udive/planner/gas";
import { DiveProfilePoint } from "./interfaces/udive/planner/dive-profile-point";
import { Media } from "./interfaces/common/media/media";
import { Tank } from "./interfaces/udive/planner/tank";
export { DiveTrip, Organiser, TripDive } from "./interfaces/udive/dive-trip/diveTrip";
export { Translation, UserTranslation, UserTranslationDoc } from "./interfaces/common/translations/translations";
export { DecimalCoords } from "./components/common/app/map/app-coordinates/app-coordinates";
export { LocationIQ } from "./services/common/map";
export { Customer, CustomerGroup } from "./interfaces/trasteel/customer/customer";
export { ARPCModel } from "./interfaces/udive/planner/arpc";
export { DecoplannerParameters } from "./interfaces/udive/planner/decoplanner-parameters";
export { Activity, Certification, DivingClass } from "./interfaces/udive/diving-class/divingClass";
export { DivingCourse } from "./interfaces/udive/diving-school/divingSchool";
export { DivePlanModel } from "./interfaces/udive/planner/dive-plan";
export { MapDataDiveSite } from "./interfaces/udive/dive-site/diveSite";
export { CustomerConditionCCM, CustomerConditionEAF, CustomerConditionLF, CustomerLocation, LocationType } from "./interfaces/trasteel/customer/customerLocation";
export { InputValidator, Marker, SearchTag, TextMultilanguage } from "./interfaces/interfaces";
export { TextFieldTypes } from "@ionic/core";
export { Validator, ValidatorEntry } from "./validators";
export { AutoFillCourses, Project, ProjectAreaQualityShape } from "./interfaces/trasteel/refractories/projects";
export { AreaShape, Shape, ShapeFilter } from "./interfaces/trasteel/refractories/shapes";
export { UserPubicProfile } from "./interfaces/common/user/user-public-profile";
export { Datasheet, DatasheetFilter } from "./interfaces/trasteel/refractories/datasheets";
export { Card } from "./interfaces/udive/user/user-cards";
export { DiveConfiguration } from "./interfaces/udive/planner/dive-configuration";
export { UserRoles } from "./interfaces/common/user/user-roles";
export { TankModel } from "./interfaces/udive/planner/tank-model";
export { UserPlans } from "./interfaces/trasteel/users/user-plans";
export { UserPubicProfile as UserPubicProfile1 } from "./components";
export { Chat } from "./interfaces/common/chat/chat";
export { GasModel } from "./interfaces/udive/planner/gas-model";
export { Gas } from "./interfaces/udive/planner/gas";
export { DiveProfilePoint } from "./interfaces/udive/planner/dive-profile-point";
export { Media } from "./interfaces/common/media/media";
export { Tank } from "./interfaces/udive/planner/tank";
export namespace Components {
    interface AppAdminAdvertising {
    }
    interface AppAdminChats {
        "filterByChats": any;
        "filterByOrganisierId": string;
    }
    interface AppAdminClientsList {
        "admin": Organiser;
    }
    interface AppAdminDiveTrips {
        "filterByOrganisierId": string;
        "filterByTrips": any;
    }
    interface AppAdminDivingClasses {
        "filterByClasses": any;
        "filterByOrganisierId": string;
    }
    interface AppAdminTranslations {
        "language": string;
        "translations": Translation[];
    }
    interface AppBanner {
        "backgroundCover": boolean;
        "backgroundCoverFill": boolean;
        "heightPerc": number;
        "heightPx": number;
        "link": string;
        "scrollTopValue": number;
        "widthPerc": number;
        "widthPx": number;
    }
    interface AppCalendar {
        "addEvent": () => Promise<void>;
        "addEvents": any;
        "calendarId": string;
    }
    interface AppChat {
        "addParticipants": (ev: any) => Promise<void>;
        "chatId": string;
    }
    interface AppCoordinates {
        "coordinates": DecimalCoords;
    }
    interface AppCustomerPlantProduction {
        "customer": Customer;
        "editable": boolean;
    }
    interface AppDecoplannerArpc {
        "diveDataToShare": any;
        "planner"?: boolean;
    }
    interface AppDecoplannerCharts {
        "diveDataToShare": any;
        "isShown": boolean;
    }
    interface AppDecoplannerGas {
        "diveDataToShare": any;
        "isShown": boolean;
    }
    interface AppDecoplannerPlan {
        "diveDataToShare": any;
        "planner"?: boolean;
    }
    interface AppDecoplannerProfile {
        "diveDataToShare": any;
    }
    interface AppDecoplannerSettings {
        "diveDataToShare": any;
    }
    interface AppDecoplannerShowplan {
        "diveDataToShare": any;
        "planner"?: boolean;
    }
    interface AppDiveClassBookings {
        "divingClass": DivingClass;
        "divingClassId": string;
        "editable": boolean;
        "updateStudentsList": () => Promise<boolean>;
    }
    interface AppDiveCourseActivities {
        "editable": boolean;
        "schedule": Activity[];
        "showDiveLocation": boolean;
    }
    interface AppDiveCourseCard {
        "divingCourse": DivingCourse;
        "edit": boolean;
    }
    interface AppDivePlanCard {
        "divePlan": DivePlanModel;
        "edit": boolean;
    }
    interface AppDiveSiteCard {
        "diveSite": MapDataDiveSite;
        "edit": boolean;
        "startlocation": any;
    }
    interface AppDiveTripBookings {
        "diveTrip": DiveTrip;
        "diveTripId": string;
        "editable": boolean;
        "tripDiveIndex": number;
    }
    interface AppDiveTripCard {
        "editable": boolean;
        "tripDive": TripDive;
        "updateView": boolean;
    }
    interface AppDivingCenterCard {
        "divingCenterId": string;
        "startlocation": any;
    }
    interface AppDivingClassSchedule {
        "divingClass": DivingClass;
        "editable": boolean;
        "updateClassSchedule": () => Promise<void>;
    }
    interface AppDragdropFile {
        "autoOpen": boolean;
        "file": File;
        "fileType": string;
        "fileTypes": string[];
    }
    interface AppEafQuestionnaire {
        "conditions": CustomerConditionEAF;
        "editable": boolean;
    }
    interface AppFormItem {
        "appendText"?: any;
        "color"?: string;
        "datePresentation"?: | "date"
    | "date-time"
    | "month"
    | "month-year"
    | "time"
    | "year";
        "debounce"?: number;
        "disabled"?: boolean;
        "forceInvalid"?: boolean;
        "forceResetValue": (value: any) => Promise<void>;
        "inputFormMode": | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
    | undefined;
        "inputStep": string;
        "inputType": TextFieldTypes | "boolean";
        "labelPosition"?: "fixed" | "stacked" | "floating";
        "labelReplace"?: any;
        "labelTag"?: string;
        "labelText"?: string;
        "lines"?: "none" | "full" | "inset";
        "maxDate"?: string;
        "multiLanguage"?: boolean;
        "name": string;
        "placeholder"?: string;
        "preferWheel"?: boolean;
        "readonly"?: boolean;
        "selectOnFocus"?: boolean;
        "shortItem"?: boolean;
        "showDateTitle"?: boolean;
        "showItem"?: boolean;
        "textRows"?: number;
        "validator"?: Array<string | ValidatorEntry | Validator<string>>;
        "value": string | TextMultilanguage | number | boolean;
    }
    interface AppGeocode {
        "address": string;
        "gotFocus": boolean;
    }
    interface AppHeaderSegmentToolbar {
        "color": string;
        "mode": "ios" | "md";
        "noHeader": boolean;
        "noToolbar": boolean;
        "segment": number;
        "swiper": any;
        "titles": {
    tag: string;
    text?: string;
    appendix?: string;
    disabled?: boolean;
    icon?: string;
    slotIcon?: string;
    badge?: number;
  }[];
        "updateBadge": boolean;
    }
    interface AppImageCache {
        "backgroundCover": boolean;
        "backgroundCoverFill": boolean;
        "url": string;
    }
    interface AppInfiniteScroll {
        "groupBy": string[];
        "icon": string;
        "list": any[];
        "loading": boolean;
        "options": {
    tag: string;
    text: string;
    icon: string;
    color: string;
    func: any;
  }[];
        "orderBy": string[];
        "returnField": string;
        "showFields": string[];
        "showFieldsDivider": string;
        "showNotes": string[];
    }
    interface AppItemCover {
        "item": any;
        "tmbPosition"?: string;
    }
    interface AppItemDetail {
        "alignRight"?: boolean;
        "appendText"?: string;
        "detailTag"?: string;
        "detailText"?: | string
    | number
    | boolean
    | TextMultilanguage;
        "isDate"?: boolean;
        "labelPosition"?: "fixed" | "stacked" | "floating";
        "labelTag"?: string;
        "labelText"?: string;
        "lines"?: "none" | "full" | "inset";
        "showItem"?: boolean;
    }
    interface AppLanguagePicker {
        "iconOnly": boolean;
        "picker": boolean;
        "selectOnly": boolean;
        "selectedLangCode": string;
    }
    interface AppLastReviews {
        "collectionId": string;
        "uid": string;
    }
    interface AppLocation {
        "editable": boolean;
        "location": CustomerLocation;
        "locations": LocationType[];
        "slider"?: any;
    }
    interface AppMap {
        "center": any;
        "closePopup": () => Promise<boolean>;
        "createLine": (id: any, pointA: any, pointB: any) => Promise<boolean>;
        "currentPosition": boolean;
        "draggableMarkerPosition": any;
        "fitToBounds": (points?: any) => Promise<boolean>;
        "mapLoaded": () => Promise<boolean>;
        "markers": Marker[];
        "markersAsFeature": boolean;
        "pageId": string;
        "removeLine": (id: any) => Promise<boolean>;
        "searchTags": SearchTag[];
        "triggerMapResize": () => Promise<void>;
        "updateSearchTags": (searchTags: any) => Promise<boolean>;
    }
    interface AppMapIcon {
        "marker": Marker;
    }
    interface AppMapPopup {
        "properties": string;
    }
    interface AppMenu {
    }
    interface AppModalFooter {
        "cancelTag": { tag: string; text: string; color: string; };
        "color": any;
        "disableSave": boolean;
        "saveTag": { tag: string; text: string; color: string; };
        "showSave": boolean;
    }
    interface AppMultilanguageText {
        "text": TextMultilanguage;
    }
    interface AppNavbar {
        "backButton"?: boolean;
        "color"?: string;
        "extraTitle"?: string;
        "iconColor"?: string;
        "modal"?: boolean;
        "rightButtonFc"?: any;
        "rightButtonText"?: {
    icon: string;
    tag: string;
    text: string;
    fill: "clear" | "outline" | "solid" | "default";
  };
        "tag"?: string;
        "text"?: string;
    }
    interface AppPageProjectSummary {
        "areaShapes": AreaShape[];
        "project": Project;
        "updateSummary": any;
    }
    interface AppPublicUser {
        "userId": string;
        "userProfile": UserPubicProfile;
    }
    interface AppReviewDetails {
        "color": string;
        "reviewId": string;
    }
    interface AppRoot {
    }
    interface AppSearchFilter {
        "addTag": (tag: SearchTag) => Promise<void>;
        "hideToolbar": boolean;
        "removeTag": (i: any) => Promise<void>;
    }
    interface AppSearchToolbar {
        "color": string;
        "filterBy": string[];
        "forceFilter": (list: any) => Promise<void>;
        "list": any[];
        "orderFields": string[];
        "placeholder": string;
        "searchTitle": string;
    }
    interface AppSearchbar {
        "floating": boolean;
    }
    interface AppSelectSearch {
        "disabled": boolean;
        "label": {tag: string; text: string};
        "labelAddText": string;
        "lines": "inset" | "full" | "none";
        "placeholder": string;
        "selectFn": any;
        "selectOptions": any[];
        "selectValueId": string;
        "selectValueText": string[];
        "value": string;
    }
    interface AppShrinkingHeader {
        "logoUrl": string;
        "scrollTopValue": number;
        "slogan": any;
    }
    interface AppSkeletons {
        "skeleton": string;
    }
    interface AppStarRating {
        "color": string;
        "editable": boolean;
        "rating": number;
        "size": number;
        "stars": number;
    }
    interface AppStickySearch {
        "placeholderValue": string;
        "scrollTopValue": number;
    }
    interface AppStripeConnect {
    }
    interface AppStripePay {
        "amount": number;
        "application_fee_amount": string;
        "connectedAccountID": string;
        "currency": string;
        "modal": any;
    }
    interface AppUploadCover {
        "item": {
    collection: string;
    id: string;
    photoURL: string;
    coverURL: string;
  };
        "showPhotoURL": boolean;
    }
    interface AppUploadCovers {
        "item": {
    collection: string;
    id: string;
    photoURL: string;
    coverURL: string | { [coverId: string]: string };
  };
        "showPhotoURL": boolean;
    }
    interface AppUserAvatar {
        "size": number;
    }
    interface AppUserCards {
        "updateSlider": any;
    }
    interface AppUserConfigurations {
    }
    interface AppUserCover {
        "showCover"?: boolean;
        "showUserDetails"?: boolean;
        "tmbPosition"?: string;
    }
    interface AppUserDiveCommunities {
    }
    interface AppUserDivePlans {
    }
    interface AppUserDiveSites {
    }
    interface AppUserDivingCenters {
    }
    interface AppUserDivingSchools {
    }
    interface AppUserLicences {
    }
    interface AppUserManageNotifications {
    }
    interface AppUserReviewsList {
        "collectionId": string;
        "uid": string;
    }
    interface AppUserServiceCenters {
    }
    interface AppUserTanks {
    }
    interface AppUserTranslation {
        "edit": boolean;
        "userTranslation": UserTranslationDoc;
    }
    interface AppUsersList {
        "editable": boolean;
        "item": any;
        "show": string[];
    }
    interface ModalContactUpdate {
        "contactId": string;
    }
    interface ModalCustomerUpdate {
        "customerId": string;
    }
    interface ModalDatasheetCategory {
    }
    interface ModalDatasheetFamily {
    }
    interface ModalDatasheetMajorfamily {
    }
    interface ModalDatasheetPropertyname {
    }
    interface ModalDatasheetPropertytype {
    }
    interface ModalDatasheetQualitycolorcode {
    }
    interface ModalDatasheetUpdate {
        "datasheetId": string;
        "duplicateDatasheet": {id: string; datasheet: Datasheet};
        "revision": boolean;
    }
    interface ModalDiveCard {
        "card": Card;
    }
    interface ModalDiveCertificationUpdate {
        "agencyId": string;
        "diveCertification": Certification;
    }
    interface ModalDiveCommunityUpdate {
        "diveCommunityId": string;
    }
    interface ModalDiveConfiguration {
        "diveDataToShare": any;
    }
    interface ModalDivePlanner {
        "addDive"?: boolean;
        "divePlanModel": DivePlanModel;
        "diveTripData": {
    date: Date;
    diveSiteId: string;
    divingCenterId: string;
  };
        "index": number;
        "selectedConfiguration": DiveConfiguration;
        "setDate"?: boolean;
        "showDiveSite"?: boolean;
        "showPositionTab"?: boolean;
        "stdConfigurations": Array<DiveConfiguration>;
        "userRoles": UserRoles;
    }
    interface ModalDiveSiteUpdate {
        "diveSiteId": string;
    }
    interface ModalDiveTemplate {
        "addDive"?: boolean;
        "divePlanModel": DivePlanModel;
        "index": number;
        "selectedConfiguration": DiveConfiguration;
        "showPositionTab": boolean;
        "stdConfigurations": Array<DiveConfiguration>;
        "userRoles": UserRoles;
    }
    interface ModalDiveTripUpdate {
        "collectionId": string;
        "diveTripId": string;
        "organiserId": string;
    }
    interface ModalDivingCenterUpdate {
        "divingCenterId": string;
    }
    interface ModalDivingClassUpdate {
        "collectionId": string;
        "divingClassId": string;
        "organiserId": string;
    }
    interface ModalDivingSchoolUpdate {
        "divingSchoolId": string;
    }
    interface ModalEditUserRoles {
        "uid": string;
    }
    interface ModalOperatingConditionsQuestionnaire {
        "condition": "EAF" | "LF" | "CCM";
        "conditionData": | CustomerConditionEAF
    | CustomerConditionLF
    | CustomerConditionCCM;
        "editable": boolean;
    }
    interface ModalProjectApplicationunit {
    }
    interface ModalProjectBricksallocationarea {
    }
    interface ModalProjectQuantityunit {
    }
    interface ModalProjectUpdate {
        "duplicateProject": Project;
        "projectId": string;
    }
    interface ModalSearchList {
        "filterBy": string[];
        "filterFunction": any;
        "filterObject": any;
        "filterPopup": any;
        "item": any;
        "list": any[];
        "orderBy": string[];
        "placeholder": string;
        "searchTitle": {tag: string; text: string};
        "showField": string;
    }
    interface ModalServiceCenterUpdate {
        "serviceCenterId": string;
    }
    interface ModalShapeType {
    }
    interface ModalShapeUpdate {
        "duplicateShape": {id: string; shape: Shape};
        "shapeId": string;
    }
    interface ModalTankConfiguration {
        "tank": TankModel;
    }
    interface ModalUploadImage {
        "aspectRatio": number;
        "maxDimensions": number;
        "round": boolean;
    }
    interface ModalUserDetails {
        "userId": string;
    }
    interface ModalUserPlansUpdate {
        "planIndex": number;
        "uid": string;
        "userPlans": UserPlans;
    }
    interface ModalUserTeamsUpdate {
        "user": UserPubicProfile1;
    }
    interface ModalUserUpdate {
    }
    interface MyTransl {
        "appendText": string;
        "isLabel": boolean;
        "replace": any;
        "tag": string;
        "text": string;
    }
    interface Page404 {
    }
    interface PageAdminAgencies {
    }
    interface PageAdminTranslations {
    }
    interface PageChat {
        "chatId": string;
    }
    interface PageChatsList {
    }
    interface PageClientDetails {
        "clientId": string;
    }
    interface PageCommunityChatsList {
    }
    interface PageCommunityDashboard {
    }
    interface PageCommunityDiveTrips {
    }
    interface PageCommunityMembers {
    }
    interface PageContactDetails {
        "itemId": string;
    }
    interface PageContacts {
    }
    interface PageCustomerDetails {
        "itemId": string;
    }
    interface PageCustomers {
    }
    interface PageDashboard {
    }
    interface PageDatasheetDetails {
        "itemId": string;
    }
    interface PageDatasheets {
    }
    interface PageDiveCommunityDetails {
        "dcid": string;
    }
    interface PageDivePlanDetails {
        "diveid": number;
        "planid": string;
    }
    interface PageDivePlanner {
    }
    interface PageDiveSiteDetails {
        "siteid": string;
    }
    interface PageDiveTripDetails {
        "tripid": string;
    }
    interface PageDiveTrips {
    }
    interface PageDivingCenterDetails {
        "dcid": string;
    }
    interface PageDivingChatsList {
    }
    interface PageDivingClassDetails {
        "classid": string;
    }
    interface PageDivingClasses {
    }
    interface PageDivingCustomers {
    }
    interface PageDivingDashboard {
    }
    interface PageDivingDiveTrips {
    }
    interface PageDivingDocuments {
    }
    interface PageDivingInvoicing {
    }
    interface PageDivingPayments {
    }
    interface PageDivingRentals {
    }
    interface PageDivingReports {
    }
    interface PageDivingSchoolDetails {
        "dsid": string;
    }
    interface PageDivingWarehouse {
    }
    interface PageGasBlender {
    }
    interface PageGueMap {
    }
    interface PageLoading {
    }
    interface PageLogBook {
    }
    interface PageLogin {
    }
    interface PageLostpsw {
        "email": string;
    }
    interface PageMap {
    }
    interface PageProjectDetails {
        "itemId": string;
    }
    interface PageProjects {
    }
    interface PageSchoolChatsList {
    }
    interface PageSchoolClasses {
    }
    interface PageSchoolDashboard {
    }
    interface PageSchoolDiveTrips {
    }
    interface PageSchoolMembers {
    }
    interface PageSchoolRentals {
    }
    interface PageSchoolWarehouse {
    }
    interface PageServiceCenterDetails {
        "centerid": string;
    }
    interface PageServiceChatsList {
    }
    interface PageServiceCustomers {
    }
    interface PageServiceDashboard {
    }
    interface PageServiceDocuments {
    }
    interface PageServiceInvoicing {
    }
    interface PageServicePayments {
    }
    interface PageServiceServicing {
    }
    interface PageServiceWarehouse {
    }
    interface PageShapeDetails {
        "itemId": string;
    }
    interface PageShapes {
    }
    interface PageSupport {
    }
    interface PageTeamManager {
    }
    interface PageTrsDashboard {
    }
    interface PageTrsUserSettings {
    }
    interface PageUserManager {
    }
    interface PageUserPlans {
        "uid": string;
    }
    interface PageUserSettings {
    }
    interface PopoverChatParticipants {
        "chat": Chat;
    }
    interface PopoverDatasheetsFilter {
        "filter": DatasheetFilter;
    }
    interface PopoverEditCustomerOwner {
        "group": boolean;
        "owner": CustomerGroup;
    }
    interface PopoverEditTranslation {
        "language": string;
        "originalTranslation": Translation;
    }
    interface PopoverFindOldcustomer {
        "customersList": any;
        "newCustomer": any;
        "oldCustomer": any;
    }
    interface PopoverGas {
        "ccr": boolean;
        "gasProp": Gas;
        "parameters": any;
        "stdDecoGases": Array<GasModel>;
    }
    interface PopoverGasBlender {
        "gasProp": any;
        "hasTrimixlicence": boolean;
        "showBar": boolean;
        "stdGasesList": Array<GasModel>;
    }
    interface PopoverLevel {
        "ccr": boolean;
        "levelProp": DiveProfilePoint;
        "parameters": any;
        "stdGasesList": Array<GasModel>;
        "units": string;
    }
    interface PopoverMediaLoading {
        "file": File;
        "media": Media;
    }
    interface PopoverMediaUploader {
        "collectionId": string;
        "files": {
    [id: string]: {
      media: Media;
      file: File;
    };
  };
        "itemId": string;
    }
    interface PopoverNewClassActivity {
        "activity": Activity;
        "showDiveLocation": boolean;
    }
    interface PopoverNewDiveTrip {
        "diveIndex": number;
        "tripDive": TripDive;
    }
    interface PopoverProjectAutofill {
        "autoFillCourses": AutoFillCourses;
        "bottom": boolean;
        "shapes": ProjectAreaQualityShape[];
    }
    interface PopoverSearchDiveSite {
    }
    interface PopoverSearchDivingCourse {
        "item": DivingCourse;
    }
    interface PopoverSearchUser {
    }
    interface PopoverSelectDate {
        "appendText"?: any;
        "datePresentation"?: | "date"
    | "date-time"
    | "month"
    | "month-year"
    | "time"
    | "time-date"
    | "year";
        "labelReplace"?: any;
        "labelTag"?: string;
        "labelText"?: string;
        "maxDate"?: string;
        "preferWheel"?: boolean;
        "showDateTitle"?: boolean;
        "value": string;
    }
    interface PopoverSelectSearch {
        "placeholder": string;
        "selectOptions": any[];
        "selectValueId": string;
        "selectValueText": string[];
        "value": string;
    }
    interface PopoverShapesFilter {
        "filter": ShapeFilter;
    }
    interface PopoverTank {
        "ccr": boolean;
        "decoTanks": boolean;
        "parameters": any;
        "stdGasesList": Array<GasModel>;
        "tank": Tank;
        "tanksList": Array<any>;
    }
}
export interface AppAdminTranslationsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppAdminTranslationsElement;
}
export interface AppCoordinatesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppCoordinatesElement;
}
export interface AppDecoplannerArpcCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppDecoplannerArpcElement;
}
export interface AppDecoplannerPlanCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppDecoplannerPlanElement;
}
export interface AppDecoplannerProfileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppDecoplannerProfileElement;
}
export interface AppDecoplannerSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppDecoplannerSettingsElement;
}
export interface AppDiveCourseActivitiesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppDiveCourseActivitiesElement;
}
export interface AppDiveCourseCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppDiveCourseCardElement;
}
export interface AppDivePlanCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppDivePlanCardElement;
}
export interface AppDiveSiteCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppDiveSiteCardElement;
}
export interface AppDiveTripCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppDiveTripCardElement;
}
export interface AppDivingClassScheduleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppDivingClassScheduleElement;
}
export interface AppDragdropFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppDragdropFileElement;
}
export interface AppEafQuestionnaireCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppEafQuestionnaireElement;
}
export interface AppFormItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppFormItemElement;
}
export interface AppGeocodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppGeocodeElement;
}
export interface AppInfiniteScrollCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppInfiniteScrollElement;
}
export interface AppLanguagePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppLanguagePickerElement;
}
export interface AppLocationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppLocationElement;
}
export interface AppMapCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppMapElement;
}
export interface AppModalFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppModalFooterElement;
}
export interface AppSearchFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppSearchFilterElement;
}
export interface AppSearchToolbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppSearchToolbarElement;
}
export interface AppSearchbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppSearchbarElement;
}
export interface AppStarRatingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppStarRatingElement;
}
export interface AppStripeConnectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppStripeConnectElement;
}
export interface AppUploadCoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppUploadCoverElement;
}
export interface AppUploadCoversCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppUploadCoversElement;
}
export interface AppUserTranslationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppUserTranslationElement;
}
export interface PopoverSearchDivingCourseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPopoverSearchDivingCourseElement;
}
declare global {
    interface HTMLAppAdminAdvertisingElement extends Components.AppAdminAdvertising, HTMLStencilElement {
    }
    var HTMLAppAdminAdvertisingElement: {
        prototype: HTMLAppAdminAdvertisingElement;
        new (): HTMLAppAdminAdvertisingElement;
    };
    interface HTMLAppAdminChatsElement extends Components.AppAdminChats, HTMLStencilElement {
    }
    var HTMLAppAdminChatsElement: {
        prototype: HTMLAppAdminChatsElement;
        new (): HTMLAppAdminChatsElement;
    };
    interface HTMLAppAdminClientsListElement extends Components.AppAdminClientsList, HTMLStencilElement {
    }
    var HTMLAppAdminClientsListElement: {
        prototype: HTMLAppAdminClientsListElement;
        new (): HTMLAppAdminClientsListElement;
    };
    interface HTMLAppAdminDiveTripsElement extends Components.AppAdminDiveTrips, HTMLStencilElement {
    }
    var HTMLAppAdminDiveTripsElement: {
        prototype: HTMLAppAdminDiveTripsElement;
        new (): HTMLAppAdminDiveTripsElement;
    };
    interface HTMLAppAdminDivingClassesElement extends Components.AppAdminDivingClasses, HTMLStencilElement {
    }
    var HTMLAppAdminDivingClassesElement: {
        prototype: HTMLAppAdminDivingClassesElement;
        new (): HTMLAppAdminDivingClassesElement;
    };
    interface HTMLAppAdminTranslationsElementEventMap {
        "translationChanged": Translation;
    }
    interface HTMLAppAdminTranslationsElement extends Components.AppAdminTranslations, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppAdminTranslationsElementEventMap>(type: K, listener: (this: HTMLAppAdminTranslationsElement, ev: AppAdminTranslationsCustomEvent<HTMLAppAdminTranslationsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppAdminTranslationsElementEventMap>(type: K, listener: (this: HTMLAppAdminTranslationsElement, ev: AppAdminTranslationsCustomEvent<HTMLAppAdminTranslationsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppAdminTranslationsElement: {
        prototype: HTMLAppAdminTranslationsElement;
        new (): HTMLAppAdminTranslationsElement;
    };
    interface HTMLAppBannerElement extends Components.AppBanner, HTMLStencilElement {
    }
    var HTMLAppBannerElement: {
        prototype: HTMLAppBannerElement;
        new (): HTMLAppBannerElement;
    };
    interface HTMLAppCalendarElement extends Components.AppCalendar, HTMLStencilElement {
    }
    var HTMLAppCalendarElement: {
        prototype: HTMLAppCalendarElement;
        new (): HTMLAppCalendarElement;
    };
    interface HTMLAppChatElement extends Components.AppChat, HTMLStencilElement {
    }
    var HTMLAppChatElement: {
        prototype: HTMLAppChatElement;
        new (): HTMLAppChatElement;
    };
    interface HTMLAppCoordinatesElementEventMap {
        "coordinatesEmit": DecimalCoords;
        "addressEmit": LocationIQ;
    }
    interface HTMLAppCoordinatesElement extends Components.AppCoordinates, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppCoordinatesElementEventMap>(type: K, listener: (this: HTMLAppCoordinatesElement, ev: AppCoordinatesCustomEvent<HTMLAppCoordinatesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppCoordinatesElementEventMap>(type: K, listener: (this: HTMLAppCoordinatesElement, ev: AppCoordinatesCustomEvent<HTMLAppCoordinatesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppCoordinatesElement: {
        prototype: HTMLAppCoordinatesElement;
        new (): HTMLAppCoordinatesElement;
    };
    interface HTMLAppCustomerPlantProductionElement extends Components.AppCustomerPlantProduction, HTMLStencilElement {
    }
    var HTMLAppCustomerPlantProductionElement: {
        prototype: HTMLAppCustomerPlantProductionElement;
        new (): HTMLAppCustomerPlantProductionElement;
    };
    interface HTMLAppDecoplannerArpcElementEventMap {
        "saveArpc": ARPCModel;
    }
    interface HTMLAppDecoplannerArpcElement extends Components.AppDecoplannerArpc, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppDecoplannerArpcElementEventMap>(type: K, listener: (this: HTMLAppDecoplannerArpcElement, ev: AppDecoplannerArpcCustomEvent<HTMLAppDecoplannerArpcElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppDecoplannerArpcElementEventMap>(type: K, listener: (this: HTMLAppDecoplannerArpcElement, ev: AppDecoplannerArpcCustomEvent<HTMLAppDecoplannerArpcElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppDecoplannerArpcElement: {
        prototype: HTMLAppDecoplannerArpcElement;
        new (): HTMLAppDecoplannerArpcElement;
    };
    interface HTMLAppDecoplannerChartsElement extends Components.AppDecoplannerCharts, HTMLStencilElement {
    }
    var HTMLAppDecoplannerChartsElement: {
        prototype: HTMLAppDecoplannerChartsElement;
        new (): HTMLAppDecoplannerChartsElement;
    };
    interface HTMLAppDecoplannerGasElement extends Components.AppDecoplannerGas, HTMLStencilElement {
    }
    var HTMLAppDecoplannerGasElement: {
        prototype: HTMLAppDecoplannerGasElement;
        new (): HTMLAppDecoplannerGasElement;
    };
    interface HTMLAppDecoplannerPlanElementEventMap {
        "updateParamsEvent": DecoplannerParameters;
    }
    interface HTMLAppDecoplannerPlanElement extends Components.AppDecoplannerPlan, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppDecoplannerPlanElementEventMap>(type: K, listener: (this: HTMLAppDecoplannerPlanElement, ev: AppDecoplannerPlanCustomEvent<HTMLAppDecoplannerPlanElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppDecoplannerPlanElementEventMap>(type: K, listener: (this: HTMLAppDecoplannerPlanElement, ev: AppDecoplannerPlanCustomEvent<HTMLAppDecoplannerPlanElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppDecoplannerPlanElement: {
        prototype: HTMLAppDecoplannerPlanElement;
        new (): HTMLAppDecoplannerPlanElement;
    };
    interface HTMLAppDecoplannerProfileElementEventMap {
        "runTableCalculations": any;
    }
    interface HTMLAppDecoplannerProfileElement extends Components.AppDecoplannerProfile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppDecoplannerProfileElementEventMap>(type: K, listener: (this: HTMLAppDecoplannerProfileElement, ev: AppDecoplannerProfileCustomEvent<HTMLAppDecoplannerProfileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppDecoplannerProfileElementEventMap>(type: K, listener: (this: HTMLAppDecoplannerProfileElement, ev: AppDecoplannerProfileCustomEvent<HTMLAppDecoplannerProfileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppDecoplannerProfileElement: {
        prototype: HTMLAppDecoplannerProfileElement;
        new (): HTMLAppDecoplannerProfileElement;
    };
    interface HTMLAppDecoplannerSettingsElementEventMap {
        "updateParamsEvent": DecoplannerParameters;
    }
    interface HTMLAppDecoplannerSettingsElement extends Components.AppDecoplannerSettings, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppDecoplannerSettingsElementEventMap>(type: K, listener: (this: HTMLAppDecoplannerSettingsElement, ev: AppDecoplannerSettingsCustomEvent<HTMLAppDecoplannerSettingsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppDecoplannerSettingsElementEventMap>(type: K, listener: (this: HTMLAppDecoplannerSettingsElement, ev: AppDecoplannerSettingsCustomEvent<HTMLAppDecoplannerSettingsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppDecoplannerSettingsElement: {
        prototype: HTMLAppDecoplannerSettingsElement;
        new (): HTMLAppDecoplannerSettingsElement;
    };
    interface HTMLAppDecoplannerShowplanElement extends Components.AppDecoplannerShowplan, HTMLStencilElement {
    }
    var HTMLAppDecoplannerShowplanElement: {
        prototype: HTMLAppDecoplannerShowplanElement;
        new (): HTMLAppDecoplannerShowplanElement;
    };
    interface HTMLAppDiveClassBookingsElement extends Components.AppDiveClassBookings, HTMLStencilElement {
    }
    var HTMLAppDiveClassBookingsElement: {
        prototype: HTMLAppDiveClassBookingsElement;
        new (): HTMLAppDiveClassBookingsElement;
    };
    interface HTMLAppDiveCourseActivitiesElementEventMap {
        "scheduleEmit": Activity[];
    }
    interface HTMLAppDiveCourseActivitiesElement extends Components.AppDiveCourseActivities, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppDiveCourseActivitiesElementEventMap>(type: K, listener: (this: HTMLAppDiveCourseActivitiesElement, ev: AppDiveCourseActivitiesCustomEvent<HTMLAppDiveCourseActivitiesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppDiveCourseActivitiesElementEventMap>(type: K, listener: (this: HTMLAppDiveCourseActivitiesElement, ev: AppDiveCourseActivitiesCustomEvent<HTMLAppDiveCourseActivitiesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppDiveCourseActivitiesElement: {
        prototype: HTMLAppDiveCourseActivitiesElement;
        new (): HTMLAppDiveCourseActivitiesElement;
    };
    interface HTMLAppDiveCourseCardElementEventMap {
        "removeEmit": any;
    }
    interface HTMLAppDiveCourseCardElement extends Components.AppDiveCourseCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppDiveCourseCardElementEventMap>(type: K, listener: (this: HTMLAppDiveCourseCardElement, ev: AppDiveCourseCardCustomEvent<HTMLAppDiveCourseCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppDiveCourseCardElementEventMap>(type: K, listener: (this: HTMLAppDiveCourseCardElement, ev: AppDiveCourseCardCustomEvent<HTMLAppDiveCourseCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppDiveCourseCardElement: {
        prototype: HTMLAppDiveCourseCardElement;
        new (): HTMLAppDiveCourseCardElement;
    };
    interface HTMLAppDivePlanCardElementEventMap {
        "viewEmit": DivePlanModel;
        "removeEmit": number;
    }
    interface HTMLAppDivePlanCardElement extends Components.AppDivePlanCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppDivePlanCardElementEventMap>(type: K, listener: (this: HTMLAppDivePlanCardElement, ev: AppDivePlanCardCustomEvent<HTMLAppDivePlanCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppDivePlanCardElementEventMap>(type: K, listener: (this: HTMLAppDivePlanCardElement, ev: AppDivePlanCardCustomEvent<HTMLAppDivePlanCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppDivePlanCardElement: {
        prototype: HTMLAppDivePlanCardElement;
        new (): HTMLAppDivePlanCardElement;
    };
    interface HTMLAppDiveSiteCardElementEventMap {
        "removeEmit": any;
    }
    interface HTMLAppDiveSiteCardElement extends Components.AppDiveSiteCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppDiveSiteCardElementEventMap>(type: K, listener: (this: HTMLAppDiveSiteCardElement, ev: AppDiveSiteCardCustomEvent<HTMLAppDiveSiteCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppDiveSiteCardElementEventMap>(type: K, listener: (this: HTMLAppDiveSiteCardElement, ev: AppDiveSiteCardCustomEvent<HTMLAppDiveSiteCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppDiveSiteCardElement: {
        prototype: HTMLAppDiveSiteCardElement;
        new (): HTMLAppDiveSiteCardElement;
    };
    interface HTMLAppDiveTripBookingsElement extends Components.AppDiveTripBookings, HTMLStencilElement {
    }
    var HTMLAppDiveTripBookingsElement: {
        prototype: HTMLAppDiveTripBookingsElement;
        new (): HTMLAppDiveTripBookingsElement;
    };
    interface HTMLAppDiveTripCardElementEventMap {
        "updateDiveEmit": DivePlanModel;
        "addDiveEmit": any;
        "removeDiveTripEmit": any;
        "removeTripDiveEmit": number;
    }
    interface HTMLAppDiveTripCardElement extends Components.AppDiveTripCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppDiveTripCardElementEventMap>(type: K, listener: (this: HTMLAppDiveTripCardElement, ev: AppDiveTripCardCustomEvent<HTMLAppDiveTripCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppDiveTripCardElementEventMap>(type: K, listener: (this: HTMLAppDiveTripCardElement, ev: AppDiveTripCardCustomEvent<HTMLAppDiveTripCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppDiveTripCardElement: {
        prototype: HTMLAppDiveTripCardElement;
        new (): HTMLAppDiveTripCardElement;
    };
    interface HTMLAppDivingCenterCardElement extends Components.AppDivingCenterCard, HTMLStencilElement {
    }
    var HTMLAppDivingCenterCardElement: {
        prototype: HTMLAppDivingCenterCardElement;
        new (): HTMLAppDivingCenterCardElement;
    };
    interface HTMLAppDivingClassScheduleElementEventMap {
        "scheduleEmit": any;
    }
    interface HTMLAppDivingClassScheduleElement extends Components.AppDivingClassSchedule, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppDivingClassScheduleElementEventMap>(type: K, listener: (this: HTMLAppDivingClassScheduleElement, ev: AppDivingClassScheduleCustomEvent<HTMLAppDivingClassScheduleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppDivingClassScheduleElementEventMap>(type: K, listener: (this: HTMLAppDivingClassScheduleElement, ev: AppDivingClassScheduleCustomEvent<HTMLAppDivingClassScheduleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppDivingClassScheduleElement: {
        prototype: HTMLAppDivingClassScheduleElement;
        new (): HTMLAppDivingClassScheduleElement;
    };
    interface HTMLAppDragdropFileElementEventMap {
        "fileSelected": File;
    }
    interface HTMLAppDragdropFileElement extends Components.AppDragdropFile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppDragdropFileElementEventMap>(type: K, listener: (this: HTMLAppDragdropFileElement, ev: AppDragdropFileCustomEvent<HTMLAppDragdropFileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppDragdropFileElementEventMap>(type: K, listener: (this: HTMLAppDragdropFileElement, ev: AppDragdropFileCustomEvent<HTMLAppDragdropFileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppDragdropFileElement: {
        prototype: HTMLAppDragdropFileElement;
        new (): HTMLAppDragdropFileElement;
    };
    interface HTMLAppEafQuestionnaireElementEventMap {
        "updateEmit": CustomerConditionEAF;
    }
    interface HTMLAppEafQuestionnaireElement extends Components.AppEafQuestionnaire, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppEafQuestionnaireElementEventMap>(type: K, listener: (this: HTMLAppEafQuestionnaireElement, ev: AppEafQuestionnaireCustomEvent<HTMLAppEafQuestionnaireElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppEafQuestionnaireElementEventMap>(type: K, listener: (this: HTMLAppEafQuestionnaireElement, ev: AppEafQuestionnaireCustomEvent<HTMLAppEafQuestionnaireElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppEafQuestionnaireElement: {
        prototype: HTMLAppEafQuestionnaireElement;
        new (): HTMLAppEafQuestionnaireElement;
    };
    interface HTMLAppFormItemElementEventMap {
        "formItemChanged": InputValidator;
        "formItemBlur": InputValidator;
        "formLocationsFound": any;
        "formLocationSelected": LocationIQ;
        "isValid": boolean;
        "updateSlider": boolean;
    }
    interface HTMLAppFormItemElement extends Components.AppFormItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppFormItemElementEventMap>(type: K, listener: (this: HTMLAppFormItemElement, ev: AppFormItemCustomEvent<HTMLAppFormItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppFormItemElementEventMap>(type: K, listener: (this: HTMLAppFormItemElement, ev: AppFormItemCustomEvent<HTMLAppFormItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppFormItemElement: {
        prototype: HTMLAppFormItemElement;
        new (): HTMLAppFormItemElement;
    };
    interface HTMLAppGeocodeElementEventMap {
        "locationsFound": any;
        "locationSelected": any;
    }
    interface HTMLAppGeocodeElement extends Components.AppGeocode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppGeocodeElementEventMap>(type: K, listener: (this: HTMLAppGeocodeElement, ev: AppGeocodeCustomEvent<HTMLAppGeocodeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppGeocodeElementEventMap>(type: K, listener: (this: HTMLAppGeocodeElement, ev: AppGeocodeCustomEvent<HTMLAppGeocodeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppGeocodeElement: {
        prototype: HTMLAppGeocodeElement;
        new (): HTMLAppGeocodeElement;
    };
    interface HTMLAppHeaderSegmentToolbarElement extends Components.AppHeaderSegmentToolbar, HTMLStencilElement {
    }
    var HTMLAppHeaderSegmentToolbarElement: {
        prototype: HTMLAppHeaderSegmentToolbarElement;
        new (): HTMLAppHeaderSegmentToolbarElement;
    };
    interface HTMLAppImageCacheElement extends Components.AppImageCache, HTMLStencilElement {
    }
    var HTMLAppImageCacheElement: {
        prototype: HTMLAppImageCacheElement;
        new (): HTMLAppImageCacheElement;
    };
    interface HTMLAppInfiniteScrollElementEventMap {
        "listChanged": any;
        "itemClicked": any;
    }
    interface HTMLAppInfiniteScrollElement extends Components.AppInfiniteScroll, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppInfiniteScrollElementEventMap>(type: K, listener: (this: HTMLAppInfiniteScrollElement, ev: AppInfiniteScrollCustomEvent<HTMLAppInfiniteScrollElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppInfiniteScrollElementEventMap>(type: K, listener: (this: HTMLAppInfiniteScrollElement, ev: AppInfiniteScrollCustomEvent<HTMLAppInfiniteScrollElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppInfiniteScrollElement: {
        prototype: HTMLAppInfiniteScrollElement;
        new (): HTMLAppInfiniteScrollElement;
    };
    interface HTMLAppItemCoverElement extends Components.AppItemCover, HTMLStencilElement {
    }
    var HTMLAppItemCoverElement: {
        prototype: HTMLAppItemCoverElement;
        new (): HTMLAppItemCoverElement;
    };
    interface HTMLAppItemDetailElement extends Components.AppItemDetail, HTMLStencilElement {
    }
    var HTMLAppItemDetailElement: {
        prototype: HTMLAppItemDetailElement;
        new (): HTMLAppItemDetailElement;
    };
    interface HTMLAppLanguagePickerElementEventMap {
        "languageChanged": any;
        "clickedItem": any;
    }
    interface HTMLAppLanguagePickerElement extends Components.AppLanguagePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppLanguagePickerElementEventMap>(type: K, listener: (this: HTMLAppLanguagePickerElement, ev: AppLanguagePickerCustomEvent<HTMLAppLanguagePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppLanguagePickerElementEventMap>(type: K, listener: (this: HTMLAppLanguagePickerElement, ev: AppLanguagePickerCustomEvent<HTMLAppLanguagePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppLanguagePickerElement: {
        prototype: HTMLAppLanguagePickerElement;
        new (): HTMLAppLanguagePickerElement;
    };
    interface HTMLAppLastReviewsElement extends Components.AppLastReviews, HTMLStencilElement {
    }
    var HTMLAppLastReviewsElement: {
        prototype: HTMLAppLastReviewsElement;
        new (): HTMLAppLastReviewsElement;
    };
    interface HTMLAppLocationElementEventMap {
        "locationSelected": any;
        "locationDeleted": any;
    }
    interface HTMLAppLocationElement extends Components.AppLocation, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppLocationElementEventMap>(type: K, listener: (this: HTMLAppLocationElement, ev: AppLocationCustomEvent<HTMLAppLocationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppLocationElementEventMap>(type: K, listener: (this: HTMLAppLocationElement, ev: AppLocationCustomEvent<HTMLAppLocationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppLocationElement: {
        prototype: HTMLAppLocationElement;
        new (): HTMLAppLocationElement;
    };
    interface HTMLAppMapElementEventMap {
        "mapLoadingCompleted": any;
        "dragMarkerEnd": any;
        "emitMapBounds": any;
    }
    interface HTMLAppMapElement extends Components.AppMap, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppMapElementEventMap>(type: K, listener: (this: HTMLAppMapElement, ev: AppMapCustomEvent<HTMLAppMapElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppMapElementEventMap>(type: K, listener: (this: HTMLAppMapElement, ev: AppMapCustomEvent<HTMLAppMapElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppMapElement: {
        prototype: HTMLAppMapElement;
        new (): HTMLAppMapElement;
    };
    interface HTMLAppMapIconElement extends Components.AppMapIcon, HTMLStencilElement {
    }
    var HTMLAppMapIconElement: {
        prototype: HTMLAppMapIconElement;
        new (): HTMLAppMapIconElement;
    };
    interface HTMLAppMapPopupElement extends Components.AppMapPopup, HTMLStencilElement {
    }
    var HTMLAppMapPopupElement: {
        prototype: HTMLAppMapPopupElement;
        new (): HTMLAppMapPopupElement;
    };
    interface HTMLAppMenuElement extends Components.AppMenu, HTMLStencilElement {
    }
    var HTMLAppMenuElement: {
        prototype: HTMLAppMenuElement;
        new (): HTMLAppMenuElement;
    };
    interface HTMLAppModalFooterElementEventMap {
        "cancelEmit": any;
        "saveEmit": any;
    }
    interface HTMLAppModalFooterElement extends Components.AppModalFooter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppModalFooterElementEventMap>(type: K, listener: (this: HTMLAppModalFooterElement, ev: AppModalFooterCustomEvent<HTMLAppModalFooterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppModalFooterElementEventMap>(type: K, listener: (this: HTMLAppModalFooterElement, ev: AppModalFooterCustomEvent<HTMLAppModalFooterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppModalFooterElement: {
        prototype: HTMLAppModalFooterElement;
        new (): HTMLAppModalFooterElement;
    };
    interface HTMLAppMultilanguageTextElement extends Components.AppMultilanguageText, HTMLStencilElement {
    }
    var HTMLAppMultilanguageTextElement: {
        prototype: HTMLAppMultilanguageTextElement;
        new (): HTMLAppMultilanguageTextElement;
    };
    interface HTMLAppNavbarElement extends Components.AppNavbar, HTMLStencilElement {
    }
    var HTMLAppNavbarElement: {
        prototype: HTMLAppNavbarElement;
        new (): HTMLAppNavbarElement;
    };
    interface HTMLAppPageProjectSummaryElement extends Components.AppPageProjectSummary, HTMLStencilElement {
    }
    var HTMLAppPageProjectSummaryElement: {
        prototype: HTMLAppPageProjectSummaryElement;
        new (): HTMLAppPageProjectSummaryElement;
    };
    interface HTMLAppPublicUserElement extends Components.AppPublicUser, HTMLStencilElement {
    }
    var HTMLAppPublicUserElement: {
        prototype: HTMLAppPublicUserElement;
        new (): HTMLAppPublicUserElement;
    };
    interface HTMLAppReviewDetailsElement extends Components.AppReviewDetails, HTMLStencilElement {
    }
    var HTMLAppReviewDetailsElement: {
        prototype: HTMLAppReviewDetailsElement;
        new (): HTMLAppReviewDetailsElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAppSearchFilterElementEventMap {
        "searchFilterEmit": SearchTag[];
    }
    interface HTMLAppSearchFilterElement extends Components.AppSearchFilter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppSearchFilterElementEventMap>(type: K, listener: (this: HTMLAppSearchFilterElement, ev: AppSearchFilterCustomEvent<HTMLAppSearchFilterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppSearchFilterElementEventMap>(type: K, listener: (this: HTMLAppSearchFilterElement, ev: AppSearchFilterCustomEvent<HTMLAppSearchFilterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppSearchFilterElement: {
        prototype: HTMLAppSearchFilterElement;
        new (): HTMLAppSearchFilterElement;
    };
    interface HTMLAppSearchToolbarElementEventMap {
        "filteredList": any;
    }
    interface HTMLAppSearchToolbarElement extends Components.AppSearchToolbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppSearchToolbarElementEventMap>(type: K, listener: (this: HTMLAppSearchToolbarElement, ev: AppSearchToolbarCustomEvent<HTMLAppSearchToolbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppSearchToolbarElementEventMap>(type: K, listener: (this: HTMLAppSearchToolbarElement, ev: AppSearchToolbarCustomEvent<HTMLAppSearchToolbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppSearchToolbarElement: {
        prototype: HTMLAppSearchToolbarElement;
        new (): HTMLAppSearchToolbarElement;
    };
    interface HTMLAppSearchbarElementEventMap {
        "inputChanged": string;
        "inputBlur": string;
    }
    interface HTMLAppSearchbarElement extends Components.AppSearchbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppSearchbarElementEventMap>(type: K, listener: (this: HTMLAppSearchbarElement, ev: AppSearchbarCustomEvent<HTMLAppSearchbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppSearchbarElementEventMap>(type: K, listener: (this: HTMLAppSearchbarElement, ev: AppSearchbarCustomEvent<HTMLAppSearchbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppSearchbarElement: {
        prototype: HTMLAppSearchbarElement;
        new (): HTMLAppSearchbarElement;
    };
    interface HTMLAppSelectSearchElement extends Components.AppSelectSearch, HTMLStencilElement {
    }
    var HTMLAppSelectSearchElement: {
        prototype: HTMLAppSelectSearchElement;
        new (): HTMLAppSelectSearchElement;
    };
    interface HTMLAppShrinkingHeaderElement extends Components.AppShrinkingHeader, HTMLStencilElement {
    }
    var HTMLAppShrinkingHeaderElement: {
        prototype: HTMLAppShrinkingHeaderElement;
        new (): HTMLAppShrinkingHeaderElement;
    };
    interface HTMLAppSkeletonsElement extends Components.AppSkeletons, HTMLStencilElement {
    }
    var HTMLAppSkeletonsElement: {
        prototype: HTMLAppSkeletonsElement;
        new (): HTMLAppSkeletonsElement;
    };
    interface HTMLAppStarRatingElementEventMap {
        "rated": number;
    }
    interface HTMLAppStarRatingElement extends Components.AppStarRating, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppStarRatingElementEventMap>(type: K, listener: (this: HTMLAppStarRatingElement, ev: AppStarRatingCustomEvent<HTMLAppStarRatingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppStarRatingElementEventMap>(type: K, listener: (this: HTMLAppStarRatingElement, ev: AppStarRatingCustomEvent<HTMLAppStarRatingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppStarRatingElement: {
        prototype: HTMLAppStarRatingElement;
        new (): HTMLAppStarRatingElement;
    };
    interface HTMLAppStickySearchElement extends Components.AppStickySearch, HTMLStencilElement {
    }
    var HTMLAppStickySearchElement: {
        prototype: HTMLAppStickySearchElement;
        new (): HTMLAppStickySearchElement;
    };
    interface HTMLAppStripeConnectElementEventMap {
        "refreshConnectedId": string;
    }
    interface HTMLAppStripeConnectElement extends Components.AppStripeConnect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppStripeConnectElementEventMap>(type: K, listener: (this: HTMLAppStripeConnectElement, ev: AppStripeConnectCustomEvent<HTMLAppStripeConnectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppStripeConnectElementEventMap>(type: K, listener: (this: HTMLAppStripeConnectElement, ev: AppStripeConnectCustomEvent<HTMLAppStripeConnectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppStripeConnectElement: {
        prototype: HTMLAppStripeConnectElement;
        new (): HTMLAppStripeConnectElement;
    };
    interface HTMLAppStripePayElement extends Components.AppStripePay, HTMLStencilElement {
    }
    var HTMLAppStripePayElement: {
        prototype: HTMLAppStripePayElement;
        new (): HTMLAppStripePayElement;
    };
    interface HTMLAppUploadCoverElementEventMap {
        "coverUploaded": any;
    }
    interface HTMLAppUploadCoverElement extends Components.AppUploadCover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppUploadCoverElementEventMap>(type: K, listener: (this: HTMLAppUploadCoverElement, ev: AppUploadCoverCustomEvent<HTMLAppUploadCoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppUploadCoverElementEventMap>(type: K, listener: (this: HTMLAppUploadCoverElement, ev: AppUploadCoverCustomEvent<HTMLAppUploadCoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppUploadCoverElement: {
        prototype: HTMLAppUploadCoverElement;
        new (): HTMLAppUploadCoverElement;
    };
    interface HTMLAppUploadCoversElementEventMap {
        "coverUploaded": any;
    }
    interface HTMLAppUploadCoversElement extends Components.AppUploadCovers, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppUploadCoversElementEventMap>(type: K, listener: (this: HTMLAppUploadCoversElement, ev: AppUploadCoversCustomEvent<HTMLAppUploadCoversElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppUploadCoversElementEventMap>(type: K, listener: (this: HTMLAppUploadCoversElement, ev: AppUploadCoversCustomEvent<HTMLAppUploadCoversElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppUploadCoversElement: {
        prototype: HTMLAppUploadCoversElement;
        new (): HTMLAppUploadCoversElement;
    };
    interface HTMLAppUserAvatarElement extends Components.AppUserAvatar, HTMLStencilElement {
    }
    var HTMLAppUserAvatarElement: {
        prototype: HTMLAppUserAvatarElement;
        new (): HTMLAppUserAvatarElement;
    };
    interface HTMLAppUserCardsElement extends Components.AppUserCards, HTMLStencilElement {
    }
    var HTMLAppUserCardsElement: {
        prototype: HTMLAppUserCardsElement;
        new (): HTMLAppUserCardsElement;
    };
    interface HTMLAppUserConfigurationsElement extends Components.AppUserConfigurations, HTMLStencilElement {
    }
    var HTMLAppUserConfigurationsElement: {
        prototype: HTMLAppUserConfigurationsElement;
        new (): HTMLAppUserConfigurationsElement;
    };
    interface HTMLAppUserCoverElement extends Components.AppUserCover, HTMLStencilElement {
    }
    var HTMLAppUserCoverElement: {
        prototype: HTMLAppUserCoverElement;
        new (): HTMLAppUserCoverElement;
    };
    interface HTMLAppUserDiveCommunitiesElement extends Components.AppUserDiveCommunities, HTMLStencilElement {
    }
    var HTMLAppUserDiveCommunitiesElement: {
        prototype: HTMLAppUserDiveCommunitiesElement;
        new (): HTMLAppUserDiveCommunitiesElement;
    };
    interface HTMLAppUserDivePlansElement extends Components.AppUserDivePlans, HTMLStencilElement {
    }
    var HTMLAppUserDivePlansElement: {
        prototype: HTMLAppUserDivePlansElement;
        new (): HTMLAppUserDivePlansElement;
    };
    interface HTMLAppUserDiveSitesElement extends Components.AppUserDiveSites, HTMLStencilElement {
    }
    var HTMLAppUserDiveSitesElement: {
        prototype: HTMLAppUserDiveSitesElement;
        new (): HTMLAppUserDiveSitesElement;
    };
    interface HTMLAppUserDivingCentersElement extends Components.AppUserDivingCenters, HTMLStencilElement {
    }
    var HTMLAppUserDivingCentersElement: {
        prototype: HTMLAppUserDivingCentersElement;
        new (): HTMLAppUserDivingCentersElement;
    };
    interface HTMLAppUserDivingSchoolsElement extends Components.AppUserDivingSchools, HTMLStencilElement {
    }
    var HTMLAppUserDivingSchoolsElement: {
        prototype: HTMLAppUserDivingSchoolsElement;
        new (): HTMLAppUserDivingSchoolsElement;
    };
    interface HTMLAppUserLicencesElement extends Components.AppUserLicences, HTMLStencilElement {
    }
    var HTMLAppUserLicencesElement: {
        prototype: HTMLAppUserLicencesElement;
        new (): HTMLAppUserLicencesElement;
    };
    interface HTMLAppUserManageNotificationsElement extends Components.AppUserManageNotifications, HTMLStencilElement {
    }
    var HTMLAppUserManageNotificationsElement: {
        prototype: HTMLAppUserManageNotificationsElement;
        new (): HTMLAppUserManageNotificationsElement;
    };
    interface HTMLAppUserReviewsListElement extends Components.AppUserReviewsList, HTMLStencilElement {
    }
    var HTMLAppUserReviewsListElement: {
        prototype: HTMLAppUserReviewsListElement;
        new (): HTMLAppUserReviewsListElement;
    };
    interface HTMLAppUserServiceCentersElement extends Components.AppUserServiceCenters, HTMLStencilElement {
    }
    var HTMLAppUserServiceCentersElement: {
        prototype: HTMLAppUserServiceCentersElement;
        new (): HTMLAppUserServiceCentersElement;
    };
    interface HTMLAppUserTanksElement extends Components.AppUserTanks, HTMLStencilElement {
    }
    var HTMLAppUserTanksElement: {
        prototype: HTMLAppUserTanksElement;
        new (): HTMLAppUserTanksElement;
    };
    interface HTMLAppUserTranslationElementEventMap {
        "translationEmit": UserTranslation;
    }
    interface HTMLAppUserTranslationElement extends Components.AppUserTranslation, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppUserTranslationElementEventMap>(type: K, listener: (this: HTMLAppUserTranslationElement, ev: AppUserTranslationCustomEvent<HTMLAppUserTranslationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppUserTranslationElementEventMap>(type: K, listener: (this: HTMLAppUserTranslationElement, ev: AppUserTranslationCustomEvent<HTMLAppUserTranslationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppUserTranslationElement: {
        prototype: HTMLAppUserTranslationElement;
        new (): HTMLAppUserTranslationElement;
    };
    interface HTMLAppUsersListElement extends Components.AppUsersList, HTMLStencilElement {
    }
    var HTMLAppUsersListElement: {
        prototype: HTMLAppUsersListElement;
        new (): HTMLAppUsersListElement;
    };
    interface HTMLModalContactUpdateElement extends Components.ModalContactUpdate, HTMLStencilElement {
    }
    var HTMLModalContactUpdateElement: {
        prototype: HTMLModalContactUpdateElement;
        new (): HTMLModalContactUpdateElement;
    };
    interface HTMLModalCustomerUpdateElement extends Components.ModalCustomerUpdate, HTMLStencilElement {
    }
    var HTMLModalCustomerUpdateElement: {
        prototype: HTMLModalCustomerUpdateElement;
        new (): HTMLModalCustomerUpdateElement;
    };
    interface HTMLModalDatasheetCategoryElement extends Components.ModalDatasheetCategory, HTMLStencilElement {
    }
    var HTMLModalDatasheetCategoryElement: {
        prototype: HTMLModalDatasheetCategoryElement;
        new (): HTMLModalDatasheetCategoryElement;
    };
    interface HTMLModalDatasheetFamilyElement extends Components.ModalDatasheetFamily, HTMLStencilElement {
    }
    var HTMLModalDatasheetFamilyElement: {
        prototype: HTMLModalDatasheetFamilyElement;
        new (): HTMLModalDatasheetFamilyElement;
    };
    interface HTMLModalDatasheetMajorfamilyElement extends Components.ModalDatasheetMajorfamily, HTMLStencilElement {
    }
    var HTMLModalDatasheetMajorfamilyElement: {
        prototype: HTMLModalDatasheetMajorfamilyElement;
        new (): HTMLModalDatasheetMajorfamilyElement;
    };
    interface HTMLModalDatasheetPropertynameElement extends Components.ModalDatasheetPropertyname, HTMLStencilElement {
    }
    var HTMLModalDatasheetPropertynameElement: {
        prototype: HTMLModalDatasheetPropertynameElement;
        new (): HTMLModalDatasheetPropertynameElement;
    };
    interface HTMLModalDatasheetPropertytypeElement extends Components.ModalDatasheetPropertytype, HTMLStencilElement {
    }
    var HTMLModalDatasheetPropertytypeElement: {
        prototype: HTMLModalDatasheetPropertytypeElement;
        new (): HTMLModalDatasheetPropertytypeElement;
    };
    interface HTMLModalDatasheetQualitycolorcodeElement extends Components.ModalDatasheetQualitycolorcode, HTMLStencilElement {
    }
    var HTMLModalDatasheetQualitycolorcodeElement: {
        prototype: HTMLModalDatasheetQualitycolorcodeElement;
        new (): HTMLModalDatasheetQualitycolorcodeElement;
    };
    interface HTMLModalDatasheetUpdateElement extends Components.ModalDatasheetUpdate, HTMLStencilElement {
    }
    var HTMLModalDatasheetUpdateElement: {
        prototype: HTMLModalDatasheetUpdateElement;
        new (): HTMLModalDatasheetUpdateElement;
    };
    interface HTMLModalDiveCardElement extends Components.ModalDiveCard, HTMLStencilElement {
    }
    var HTMLModalDiveCardElement: {
        prototype: HTMLModalDiveCardElement;
        new (): HTMLModalDiveCardElement;
    };
    interface HTMLModalDiveCertificationUpdateElement extends Components.ModalDiveCertificationUpdate, HTMLStencilElement {
    }
    var HTMLModalDiveCertificationUpdateElement: {
        prototype: HTMLModalDiveCertificationUpdateElement;
        new (): HTMLModalDiveCertificationUpdateElement;
    };
    interface HTMLModalDiveCommunityUpdateElement extends Components.ModalDiveCommunityUpdate, HTMLStencilElement {
    }
    var HTMLModalDiveCommunityUpdateElement: {
        prototype: HTMLModalDiveCommunityUpdateElement;
        new (): HTMLModalDiveCommunityUpdateElement;
    };
    interface HTMLModalDiveConfigurationElement extends Components.ModalDiveConfiguration, HTMLStencilElement {
    }
    var HTMLModalDiveConfigurationElement: {
        prototype: HTMLModalDiveConfigurationElement;
        new (): HTMLModalDiveConfigurationElement;
    };
    interface HTMLModalDivePlannerElement extends Components.ModalDivePlanner, HTMLStencilElement {
    }
    var HTMLModalDivePlannerElement: {
        prototype: HTMLModalDivePlannerElement;
        new (): HTMLModalDivePlannerElement;
    };
    interface HTMLModalDiveSiteUpdateElement extends Components.ModalDiveSiteUpdate, HTMLStencilElement {
    }
    var HTMLModalDiveSiteUpdateElement: {
        prototype: HTMLModalDiveSiteUpdateElement;
        new (): HTMLModalDiveSiteUpdateElement;
    };
    interface HTMLModalDiveTemplateElement extends Components.ModalDiveTemplate, HTMLStencilElement {
    }
    var HTMLModalDiveTemplateElement: {
        prototype: HTMLModalDiveTemplateElement;
        new (): HTMLModalDiveTemplateElement;
    };
    interface HTMLModalDiveTripUpdateElement extends Components.ModalDiveTripUpdate, HTMLStencilElement {
    }
    var HTMLModalDiveTripUpdateElement: {
        prototype: HTMLModalDiveTripUpdateElement;
        new (): HTMLModalDiveTripUpdateElement;
    };
    interface HTMLModalDivingCenterUpdateElement extends Components.ModalDivingCenterUpdate, HTMLStencilElement {
    }
    var HTMLModalDivingCenterUpdateElement: {
        prototype: HTMLModalDivingCenterUpdateElement;
        new (): HTMLModalDivingCenterUpdateElement;
    };
    interface HTMLModalDivingClassUpdateElement extends Components.ModalDivingClassUpdate, HTMLStencilElement {
    }
    var HTMLModalDivingClassUpdateElement: {
        prototype: HTMLModalDivingClassUpdateElement;
        new (): HTMLModalDivingClassUpdateElement;
    };
    interface HTMLModalDivingSchoolUpdateElement extends Components.ModalDivingSchoolUpdate, HTMLStencilElement {
    }
    var HTMLModalDivingSchoolUpdateElement: {
        prototype: HTMLModalDivingSchoolUpdateElement;
        new (): HTMLModalDivingSchoolUpdateElement;
    };
    interface HTMLModalEditUserRolesElement extends Components.ModalEditUserRoles, HTMLStencilElement {
    }
    var HTMLModalEditUserRolesElement: {
        prototype: HTMLModalEditUserRolesElement;
        new (): HTMLModalEditUserRolesElement;
    };
    interface HTMLModalOperatingConditionsQuestionnaireElement extends Components.ModalOperatingConditionsQuestionnaire, HTMLStencilElement {
    }
    var HTMLModalOperatingConditionsQuestionnaireElement: {
        prototype: HTMLModalOperatingConditionsQuestionnaireElement;
        new (): HTMLModalOperatingConditionsQuestionnaireElement;
    };
    interface HTMLModalProjectApplicationunitElement extends Components.ModalProjectApplicationunit, HTMLStencilElement {
    }
    var HTMLModalProjectApplicationunitElement: {
        prototype: HTMLModalProjectApplicationunitElement;
        new (): HTMLModalProjectApplicationunitElement;
    };
    interface HTMLModalProjectBricksallocationareaElement extends Components.ModalProjectBricksallocationarea, HTMLStencilElement {
    }
    var HTMLModalProjectBricksallocationareaElement: {
        prototype: HTMLModalProjectBricksallocationareaElement;
        new (): HTMLModalProjectBricksallocationareaElement;
    };
    interface HTMLModalProjectQuantityunitElement extends Components.ModalProjectQuantityunit, HTMLStencilElement {
    }
    var HTMLModalProjectQuantityunitElement: {
        prototype: HTMLModalProjectQuantityunitElement;
        new (): HTMLModalProjectQuantityunitElement;
    };
    interface HTMLModalProjectUpdateElement extends Components.ModalProjectUpdate, HTMLStencilElement {
    }
    var HTMLModalProjectUpdateElement: {
        prototype: HTMLModalProjectUpdateElement;
        new (): HTMLModalProjectUpdateElement;
    };
    interface HTMLModalSearchListElement extends Components.ModalSearchList, HTMLStencilElement {
    }
    var HTMLModalSearchListElement: {
        prototype: HTMLModalSearchListElement;
        new (): HTMLModalSearchListElement;
    };
    interface HTMLModalServiceCenterUpdateElement extends Components.ModalServiceCenterUpdate, HTMLStencilElement {
    }
    var HTMLModalServiceCenterUpdateElement: {
        prototype: HTMLModalServiceCenterUpdateElement;
        new (): HTMLModalServiceCenterUpdateElement;
    };
    interface HTMLModalShapeTypeElement extends Components.ModalShapeType, HTMLStencilElement {
    }
    var HTMLModalShapeTypeElement: {
        prototype: HTMLModalShapeTypeElement;
        new (): HTMLModalShapeTypeElement;
    };
    interface HTMLModalShapeUpdateElement extends Components.ModalShapeUpdate, HTMLStencilElement {
    }
    var HTMLModalShapeUpdateElement: {
        prototype: HTMLModalShapeUpdateElement;
        new (): HTMLModalShapeUpdateElement;
    };
    interface HTMLModalTankConfigurationElement extends Components.ModalTankConfiguration, HTMLStencilElement {
    }
    var HTMLModalTankConfigurationElement: {
        prototype: HTMLModalTankConfigurationElement;
        new (): HTMLModalTankConfigurationElement;
    };
    interface HTMLModalUploadImageElement extends Components.ModalUploadImage, HTMLStencilElement {
    }
    var HTMLModalUploadImageElement: {
        prototype: HTMLModalUploadImageElement;
        new (): HTMLModalUploadImageElement;
    };
    interface HTMLModalUserDetailsElement extends Components.ModalUserDetails, HTMLStencilElement {
    }
    var HTMLModalUserDetailsElement: {
        prototype: HTMLModalUserDetailsElement;
        new (): HTMLModalUserDetailsElement;
    };
    interface HTMLModalUserPlansUpdateElement extends Components.ModalUserPlansUpdate, HTMLStencilElement {
    }
    var HTMLModalUserPlansUpdateElement: {
        prototype: HTMLModalUserPlansUpdateElement;
        new (): HTMLModalUserPlansUpdateElement;
    };
    interface HTMLModalUserTeamsUpdateElement extends Components.ModalUserTeamsUpdate, HTMLStencilElement {
    }
    var HTMLModalUserTeamsUpdateElement: {
        prototype: HTMLModalUserTeamsUpdateElement;
        new (): HTMLModalUserTeamsUpdateElement;
    };
    interface HTMLModalUserUpdateElement extends Components.ModalUserUpdate, HTMLStencilElement {
    }
    var HTMLModalUserUpdateElement: {
        prototype: HTMLModalUserUpdateElement;
        new (): HTMLModalUserUpdateElement;
    };
    interface HTMLMyTranslElement extends Components.MyTransl, HTMLStencilElement {
    }
    var HTMLMyTranslElement: {
        prototype: HTMLMyTranslElement;
        new (): HTMLMyTranslElement;
    };
    interface HTMLPage404Element extends Components.Page404, HTMLStencilElement {
    }
    var HTMLPage404Element: {
        prototype: HTMLPage404Element;
        new (): HTMLPage404Element;
    };
    interface HTMLPageAdminAgenciesElement extends Components.PageAdminAgencies, HTMLStencilElement {
    }
    var HTMLPageAdminAgenciesElement: {
        prototype: HTMLPageAdminAgenciesElement;
        new (): HTMLPageAdminAgenciesElement;
    };
    interface HTMLPageAdminTranslationsElement extends Components.PageAdminTranslations, HTMLStencilElement {
    }
    var HTMLPageAdminTranslationsElement: {
        prototype: HTMLPageAdminTranslationsElement;
        new (): HTMLPageAdminTranslationsElement;
    };
    interface HTMLPageChatElement extends Components.PageChat, HTMLStencilElement {
    }
    var HTMLPageChatElement: {
        prototype: HTMLPageChatElement;
        new (): HTMLPageChatElement;
    };
    interface HTMLPageChatsListElement extends Components.PageChatsList, HTMLStencilElement {
    }
    var HTMLPageChatsListElement: {
        prototype: HTMLPageChatsListElement;
        new (): HTMLPageChatsListElement;
    };
    interface HTMLPageClientDetailsElement extends Components.PageClientDetails, HTMLStencilElement {
    }
    var HTMLPageClientDetailsElement: {
        prototype: HTMLPageClientDetailsElement;
        new (): HTMLPageClientDetailsElement;
    };
    interface HTMLPageCommunityChatsListElement extends Components.PageCommunityChatsList, HTMLStencilElement {
    }
    var HTMLPageCommunityChatsListElement: {
        prototype: HTMLPageCommunityChatsListElement;
        new (): HTMLPageCommunityChatsListElement;
    };
    interface HTMLPageCommunityDashboardElement extends Components.PageCommunityDashboard, HTMLStencilElement {
    }
    var HTMLPageCommunityDashboardElement: {
        prototype: HTMLPageCommunityDashboardElement;
        new (): HTMLPageCommunityDashboardElement;
    };
    interface HTMLPageCommunityDiveTripsElement extends Components.PageCommunityDiveTrips, HTMLStencilElement {
    }
    var HTMLPageCommunityDiveTripsElement: {
        prototype: HTMLPageCommunityDiveTripsElement;
        new (): HTMLPageCommunityDiveTripsElement;
    };
    interface HTMLPageCommunityMembersElement extends Components.PageCommunityMembers, HTMLStencilElement {
    }
    var HTMLPageCommunityMembersElement: {
        prototype: HTMLPageCommunityMembersElement;
        new (): HTMLPageCommunityMembersElement;
    };
    interface HTMLPageContactDetailsElement extends Components.PageContactDetails, HTMLStencilElement {
    }
    var HTMLPageContactDetailsElement: {
        prototype: HTMLPageContactDetailsElement;
        new (): HTMLPageContactDetailsElement;
    };
    interface HTMLPageContactsElement extends Components.PageContacts, HTMLStencilElement {
    }
    var HTMLPageContactsElement: {
        prototype: HTMLPageContactsElement;
        new (): HTMLPageContactsElement;
    };
    interface HTMLPageCustomerDetailsElement extends Components.PageCustomerDetails, HTMLStencilElement {
    }
    var HTMLPageCustomerDetailsElement: {
        prototype: HTMLPageCustomerDetailsElement;
        new (): HTMLPageCustomerDetailsElement;
    };
    interface HTMLPageCustomersElement extends Components.PageCustomers, HTMLStencilElement {
    }
    var HTMLPageCustomersElement: {
        prototype: HTMLPageCustomersElement;
        new (): HTMLPageCustomersElement;
    };
    interface HTMLPageDashboardElement extends Components.PageDashboard, HTMLStencilElement {
    }
    var HTMLPageDashboardElement: {
        prototype: HTMLPageDashboardElement;
        new (): HTMLPageDashboardElement;
    };
    interface HTMLPageDatasheetDetailsElement extends Components.PageDatasheetDetails, HTMLStencilElement {
    }
    var HTMLPageDatasheetDetailsElement: {
        prototype: HTMLPageDatasheetDetailsElement;
        new (): HTMLPageDatasheetDetailsElement;
    };
    interface HTMLPageDatasheetsElement extends Components.PageDatasheets, HTMLStencilElement {
    }
    var HTMLPageDatasheetsElement: {
        prototype: HTMLPageDatasheetsElement;
        new (): HTMLPageDatasheetsElement;
    };
    interface HTMLPageDiveCommunityDetailsElement extends Components.PageDiveCommunityDetails, HTMLStencilElement {
    }
    var HTMLPageDiveCommunityDetailsElement: {
        prototype: HTMLPageDiveCommunityDetailsElement;
        new (): HTMLPageDiveCommunityDetailsElement;
    };
    interface HTMLPageDivePlanDetailsElement extends Components.PageDivePlanDetails, HTMLStencilElement {
    }
    var HTMLPageDivePlanDetailsElement: {
        prototype: HTMLPageDivePlanDetailsElement;
        new (): HTMLPageDivePlanDetailsElement;
    };
    interface HTMLPageDivePlannerElement extends Components.PageDivePlanner, HTMLStencilElement {
    }
    var HTMLPageDivePlannerElement: {
        prototype: HTMLPageDivePlannerElement;
        new (): HTMLPageDivePlannerElement;
    };
    interface HTMLPageDiveSiteDetailsElement extends Components.PageDiveSiteDetails, HTMLStencilElement {
    }
    var HTMLPageDiveSiteDetailsElement: {
        prototype: HTMLPageDiveSiteDetailsElement;
        new (): HTMLPageDiveSiteDetailsElement;
    };
    interface HTMLPageDiveTripDetailsElement extends Components.PageDiveTripDetails, HTMLStencilElement {
    }
    var HTMLPageDiveTripDetailsElement: {
        prototype: HTMLPageDiveTripDetailsElement;
        new (): HTMLPageDiveTripDetailsElement;
    };
    interface HTMLPageDiveTripsElement extends Components.PageDiveTrips, HTMLStencilElement {
    }
    var HTMLPageDiveTripsElement: {
        prototype: HTMLPageDiveTripsElement;
        new (): HTMLPageDiveTripsElement;
    };
    interface HTMLPageDivingCenterDetailsElement extends Components.PageDivingCenterDetails, HTMLStencilElement {
    }
    var HTMLPageDivingCenterDetailsElement: {
        prototype: HTMLPageDivingCenterDetailsElement;
        new (): HTMLPageDivingCenterDetailsElement;
    };
    interface HTMLPageDivingChatsListElement extends Components.PageDivingChatsList, HTMLStencilElement {
    }
    var HTMLPageDivingChatsListElement: {
        prototype: HTMLPageDivingChatsListElement;
        new (): HTMLPageDivingChatsListElement;
    };
    interface HTMLPageDivingClassDetailsElement extends Components.PageDivingClassDetails, HTMLStencilElement {
    }
    var HTMLPageDivingClassDetailsElement: {
        prototype: HTMLPageDivingClassDetailsElement;
        new (): HTMLPageDivingClassDetailsElement;
    };
    interface HTMLPageDivingClassesElement extends Components.PageDivingClasses, HTMLStencilElement {
    }
    var HTMLPageDivingClassesElement: {
        prototype: HTMLPageDivingClassesElement;
        new (): HTMLPageDivingClassesElement;
    };
    interface HTMLPageDivingCustomersElement extends Components.PageDivingCustomers, HTMLStencilElement {
    }
    var HTMLPageDivingCustomersElement: {
        prototype: HTMLPageDivingCustomersElement;
        new (): HTMLPageDivingCustomersElement;
    };
    interface HTMLPageDivingDashboardElement extends Components.PageDivingDashboard, HTMLStencilElement {
    }
    var HTMLPageDivingDashboardElement: {
        prototype: HTMLPageDivingDashboardElement;
        new (): HTMLPageDivingDashboardElement;
    };
    interface HTMLPageDivingDiveTripsElement extends Components.PageDivingDiveTrips, HTMLStencilElement {
    }
    var HTMLPageDivingDiveTripsElement: {
        prototype: HTMLPageDivingDiveTripsElement;
        new (): HTMLPageDivingDiveTripsElement;
    };
    interface HTMLPageDivingDocumentsElement extends Components.PageDivingDocuments, HTMLStencilElement {
    }
    var HTMLPageDivingDocumentsElement: {
        prototype: HTMLPageDivingDocumentsElement;
        new (): HTMLPageDivingDocumentsElement;
    };
    interface HTMLPageDivingInvoicingElement extends Components.PageDivingInvoicing, HTMLStencilElement {
    }
    var HTMLPageDivingInvoicingElement: {
        prototype: HTMLPageDivingInvoicingElement;
        new (): HTMLPageDivingInvoicingElement;
    };
    interface HTMLPageDivingPaymentsElement extends Components.PageDivingPayments, HTMLStencilElement {
    }
    var HTMLPageDivingPaymentsElement: {
        prototype: HTMLPageDivingPaymentsElement;
        new (): HTMLPageDivingPaymentsElement;
    };
    interface HTMLPageDivingRentalsElement extends Components.PageDivingRentals, HTMLStencilElement {
    }
    var HTMLPageDivingRentalsElement: {
        prototype: HTMLPageDivingRentalsElement;
        new (): HTMLPageDivingRentalsElement;
    };
    interface HTMLPageDivingReportsElement extends Components.PageDivingReports, HTMLStencilElement {
    }
    var HTMLPageDivingReportsElement: {
        prototype: HTMLPageDivingReportsElement;
        new (): HTMLPageDivingReportsElement;
    };
    interface HTMLPageDivingSchoolDetailsElement extends Components.PageDivingSchoolDetails, HTMLStencilElement {
    }
    var HTMLPageDivingSchoolDetailsElement: {
        prototype: HTMLPageDivingSchoolDetailsElement;
        new (): HTMLPageDivingSchoolDetailsElement;
    };
    interface HTMLPageDivingWarehouseElement extends Components.PageDivingWarehouse, HTMLStencilElement {
    }
    var HTMLPageDivingWarehouseElement: {
        prototype: HTMLPageDivingWarehouseElement;
        new (): HTMLPageDivingWarehouseElement;
    };
    interface HTMLPageGasBlenderElement extends Components.PageGasBlender, HTMLStencilElement {
    }
    var HTMLPageGasBlenderElement: {
        prototype: HTMLPageGasBlenderElement;
        new (): HTMLPageGasBlenderElement;
    };
    interface HTMLPageGueMapElement extends Components.PageGueMap, HTMLStencilElement {
    }
    var HTMLPageGueMapElement: {
        prototype: HTMLPageGueMapElement;
        new (): HTMLPageGueMapElement;
    };
    interface HTMLPageLoadingElement extends Components.PageLoading, HTMLStencilElement {
    }
    var HTMLPageLoadingElement: {
        prototype: HTMLPageLoadingElement;
        new (): HTMLPageLoadingElement;
    };
    interface HTMLPageLogBookElement extends Components.PageLogBook, HTMLStencilElement {
    }
    var HTMLPageLogBookElement: {
        prototype: HTMLPageLogBookElement;
        new (): HTMLPageLogBookElement;
    };
    interface HTMLPageLoginElement extends Components.PageLogin, HTMLStencilElement {
    }
    var HTMLPageLoginElement: {
        prototype: HTMLPageLoginElement;
        new (): HTMLPageLoginElement;
    };
    interface HTMLPageLostpswElement extends Components.PageLostpsw, HTMLStencilElement {
    }
    var HTMLPageLostpswElement: {
        prototype: HTMLPageLostpswElement;
        new (): HTMLPageLostpswElement;
    };
    interface HTMLPageMapElement extends Components.PageMap, HTMLStencilElement {
    }
    var HTMLPageMapElement: {
        prototype: HTMLPageMapElement;
        new (): HTMLPageMapElement;
    };
    interface HTMLPageProjectDetailsElement extends Components.PageProjectDetails, HTMLStencilElement {
    }
    var HTMLPageProjectDetailsElement: {
        prototype: HTMLPageProjectDetailsElement;
        new (): HTMLPageProjectDetailsElement;
    };
    interface HTMLPageProjectsElement extends Components.PageProjects, HTMLStencilElement {
    }
    var HTMLPageProjectsElement: {
        prototype: HTMLPageProjectsElement;
        new (): HTMLPageProjectsElement;
    };
    interface HTMLPageSchoolChatsListElement extends Components.PageSchoolChatsList, HTMLStencilElement {
    }
    var HTMLPageSchoolChatsListElement: {
        prototype: HTMLPageSchoolChatsListElement;
        new (): HTMLPageSchoolChatsListElement;
    };
    interface HTMLPageSchoolClassesElement extends Components.PageSchoolClasses, HTMLStencilElement {
    }
    var HTMLPageSchoolClassesElement: {
        prototype: HTMLPageSchoolClassesElement;
        new (): HTMLPageSchoolClassesElement;
    };
    interface HTMLPageSchoolDashboardElement extends Components.PageSchoolDashboard, HTMLStencilElement {
    }
    var HTMLPageSchoolDashboardElement: {
        prototype: HTMLPageSchoolDashboardElement;
        new (): HTMLPageSchoolDashboardElement;
    };
    interface HTMLPageSchoolDiveTripsElement extends Components.PageSchoolDiveTrips, HTMLStencilElement {
    }
    var HTMLPageSchoolDiveTripsElement: {
        prototype: HTMLPageSchoolDiveTripsElement;
        new (): HTMLPageSchoolDiveTripsElement;
    };
    interface HTMLPageSchoolMembersElement extends Components.PageSchoolMembers, HTMLStencilElement {
    }
    var HTMLPageSchoolMembersElement: {
        prototype: HTMLPageSchoolMembersElement;
        new (): HTMLPageSchoolMembersElement;
    };
    interface HTMLPageSchoolRentalsElement extends Components.PageSchoolRentals, HTMLStencilElement {
    }
    var HTMLPageSchoolRentalsElement: {
        prototype: HTMLPageSchoolRentalsElement;
        new (): HTMLPageSchoolRentalsElement;
    };
    interface HTMLPageSchoolWarehouseElement extends Components.PageSchoolWarehouse, HTMLStencilElement {
    }
    var HTMLPageSchoolWarehouseElement: {
        prototype: HTMLPageSchoolWarehouseElement;
        new (): HTMLPageSchoolWarehouseElement;
    };
    interface HTMLPageServiceCenterDetailsElement extends Components.PageServiceCenterDetails, HTMLStencilElement {
    }
    var HTMLPageServiceCenterDetailsElement: {
        prototype: HTMLPageServiceCenterDetailsElement;
        new (): HTMLPageServiceCenterDetailsElement;
    };
    interface HTMLPageServiceChatsListElement extends Components.PageServiceChatsList, HTMLStencilElement {
    }
    var HTMLPageServiceChatsListElement: {
        prototype: HTMLPageServiceChatsListElement;
        new (): HTMLPageServiceChatsListElement;
    };
    interface HTMLPageServiceCustomersElement extends Components.PageServiceCustomers, HTMLStencilElement {
    }
    var HTMLPageServiceCustomersElement: {
        prototype: HTMLPageServiceCustomersElement;
        new (): HTMLPageServiceCustomersElement;
    };
    interface HTMLPageServiceDashboardElement extends Components.PageServiceDashboard, HTMLStencilElement {
    }
    var HTMLPageServiceDashboardElement: {
        prototype: HTMLPageServiceDashboardElement;
        new (): HTMLPageServiceDashboardElement;
    };
    interface HTMLPageServiceDocumentsElement extends Components.PageServiceDocuments, HTMLStencilElement {
    }
    var HTMLPageServiceDocumentsElement: {
        prototype: HTMLPageServiceDocumentsElement;
        new (): HTMLPageServiceDocumentsElement;
    };
    interface HTMLPageServiceInvoicingElement extends Components.PageServiceInvoicing, HTMLStencilElement {
    }
    var HTMLPageServiceInvoicingElement: {
        prototype: HTMLPageServiceInvoicingElement;
        new (): HTMLPageServiceInvoicingElement;
    };
    interface HTMLPageServicePaymentsElement extends Components.PageServicePayments, HTMLStencilElement {
    }
    var HTMLPageServicePaymentsElement: {
        prototype: HTMLPageServicePaymentsElement;
        new (): HTMLPageServicePaymentsElement;
    };
    interface HTMLPageServiceServicingElement extends Components.PageServiceServicing, HTMLStencilElement {
    }
    var HTMLPageServiceServicingElement: {
        prototype: HTMLPageServiceServicingElement;
        new (): HTMLPageServiceServicingElement;
    };
    interface HTMLPageServiceWarehouseElement extends Components.PageServiceWarehouse, HTMLStencilElement {
    }
    var HTMLPageServiceWarehouseElement: {
        prototype: HTMLPageServiceWarehouseElement;
        new (): HTMLPageServiceWarehouseElement;
    };
    interface HTMLPageShapeDetailsElement extends Components.PageShapeDetails, HTMLStencilElement {
    }
    var HTMLPageShapeDetailsElement: {
        prototype: HTMLPageShapeDetailsElement;
        new (): HTMLPageShapeDetailsElement;
    };
    interface HTMLPageShapesElement extends Components.PageShapes, HTMLStencilElement {
    }
    var HTMLPageShapesElement: {
        prototype: HTMLPageShapesElement;
        new (): HTMLPageShapesElement;
    };
    interface HTMLPageSupportElement extends Components.PageSupport, HTMLStencilElement {
    }
    var HTMLPageSupportElement: {
        prototype: HTMLPageSupportElement;
        new (): HTMLPageSupportElement;
    };
    interface HTMLPageTeamManagerElement extends Components.PageTeamManager, HTMLStencilElement {
    }
    var HTMLPageTeamManagerElement: {
        prototype: HTMLPageTeamManagerElement;
        new (): HTMLPageTeamManagerElement;
    };
    interface HTMLPageTrsDashboardElement extends Components.PageTrsDashboard, HTMLStencilElement {
    }
    var HTMLPageTrsDashboardElement: {
        prototype: HTMLPageTrsDashboardElement;
        new (): HTMLPageTrsDashboardElement;
    };
    interface HTMLPageTrsUserSettingsElement extends Components.PageTrsUserSettings, HTMLStencilElement {
    }
    var HTMLPageTrsUserSettingsElement: {
        prototype: HTMLPageTrsUserSettingsElement;
        new (): HTMLPageTrsUserSettingsElement;
    };
    interface HTMLPageUserManagerElement extends Components.PageUserManager, HTMLStencilElement {
    }
    var HTMLPageUserManagerElement: {
        prototype: HTMLPageUserManagerElement;
        new (): HTMLPageUserManagerElement;
    };
    interface HTMLPageUserPlansElement extends Components.PageUserPlans, HTMLStencilElement {
    }
    var HTMLPageUserPlansElement: {
        prototype: HTMLPageUserPlansElement;
        new (): HTMLPageUserPlansElement;
    };
    interface HTMLPageUserSettingsElement extends Components.PageUserSettings, HTMLStencilElement {
    }
    var HTMLPageUserSettingsElement: {
        prototype: HTMLPageUserSettingsElement;
        new (): HTMLPageUserSettingsElement;
    };
    interface HTMLPopoverChatParticipantsElement extends Components.PopoverChatParticipants, HTMLStencilElement {
    }
    var HTMLPopoverChatParticipantsElement: {
        prototype: HTMLPopoverChatParticipantsElement;
        new (): HTMLPopoverChatParticipantsElement;
    };
    interface HTMLPopoverDatasheetsFilterElement extends Components.PopoverDatasheetsFilter, HTMLStencilElement {
    }
    var HTMLPopoverDatasheetsFilterElement: {
        prototype: HTMLPopoverDatasheetsFilterElement;
        new (): HTMLPopoverDatasheetsFilterElement;
    };
    interface HTMLPopoverEditCustomerOwnerElement extends Components.PopoverEditCustomerOwner, HTMLStencilElement {
    }
    var HTMLPopoverEditCustomerOwnerElement: {
        prototype: HTMLPopoverEditCustomerOwnerElement;
        new (): HTMLPopoverEditCustomerOwnerElement;
    };
    interface HTMLPopoverEditTranslationElement extends Components.PopoverEditTranslation, HTMLStencilElement {
    }
    var HTMLPopoverEditTranslationElement: {
        prototype: HTMLPopoverEditTranslationElement;
        new (): HTMLPopoverEditTranslationElement;
    };
    interface HTMLPopoverFindOldcustomerElement extends Components.PopoverFindOldcustomer, HTMLStencilElement {
    }
    var HTMLPopoverFindOldcustomerElement: {
        prototype: HTMLPopoverFindOldcustomerElement;
        new (): HTMLPopoverFindOldcustomerElement;
    };
    interface HTMLPopoverGasElement extends Components.PopoverGas, HTMLStencilElement {
    }
    var HTMLPopoverGasElement: {
        prototype: HTMLPopoverGasElement;
        new (): HTMLPopoverGasElement;
    };
    interface HTMLPopoverGasBlenderElement extends Components.PopoverGasBlender, HTMLStencilElement {
    }
    var HTMLPopoverGasBlenderElement: {
        prototype: HTMLPopoverGasBlenderElement;
        new (): HTMLPopoverGasBlenderElement;
    };
    interface HTMLPopoverLevelElement extends Components.PopoverLevel, HTMLStencilElement {
    }
    var HTMLPopoverLevelElement: {
        prototype: HTMLPopoverLevelElement;
        new (): HTMLPopoverLevelElement;
    };
    interface HTMLPopoverMediaLoadingElement extends Components.PopoverMediaLoading, HTMLStencilElement {
    }
    var HTMLPopoverMediaLoadingElement: {
        prototype: HTMLPopoverMediaLoadingElement;
        new (): HTMLPopoverMediaLoadingElement;
    };
    interface HTMLPopoverMediaUploaderElement extends Components.PopoverMediaUploader, HTMLStencilElement {
    }
    var HTMLPopoverMediaUploaderElement: {
        prototype: HTMLPopoverMediaUploaderElement;
        new (): HTMLPopoverMediaUploaderElement;
    };
    interface HTMLPopoverNewClassActivityElement extends Components.PopoverNewClassActivity, HTMLStencilElement {
    }
    var HTMLPopoverNewClassActivityElement: {
        prototype: HTMLPopoverNewClassActivityElement;
        new (): HTMLPopoverNewClassActivityElement;
    };
    interface HTMLPopoverNewDiveTripElement extends Components.PopoverNewDiveTrip, HTMLStencilElement {
    }
    var HTMLPopoverNewDiveTripElement: {
        prototype: HTMLPopoverNewDiveTripElement;
        new (): HTMLPopoverNewDiveTripElement;
    };
    interface HTMLPopoverProjectAutofillElement extends Components.PopoverProjectAutofill, HTMLStencilElement {
    }
    var HTMLPopoverProjectAutofillElement: {
        prototype: HTMLPopoverProjectAutofillElement;
        new (): HTMLPopoverProjectAutofillElement;
    };
    interface HTMLPopoverSearchDiveSiteElement extends Components.PopoverSearchDiveSite, HTMLStencilElement {
    }
    var HTMLPopoverSearchDiveSiteElement: {
        prototype: HTMLPopoverSearchDiveSiteElement;
        new (): HTMLPopoverSearchDiveSiteElement;
    };
    interface HTMLPopoverSearchDivingCourseElementEventMap {
        "certSelected": DivingCourse;
    }
    interface HTMLPopoverSearchDivingCourseElement extends Components.PopoverSearchDivingCourse, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPopoverSearchDivingCourseElementEventMap>(type: K, listener: (this: HTMLPopoverSearchDivingCourseElement, ev: PopoverSearchDivingCourseCustomEvent<HTMLPopoverSearchDivingCourseElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPopoverSearchDivingCourseElementEventMap>(type: K, listener: (this: HTMLPopoverSearchDivingCourseElement, ev: PopoverSearchDivingCourseCustomEvent<HTMLPopoverSearchDivingCourseElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPopoverSearchDivingCourseElement: {
        prototype: HTMLPopoverSearchDivingCourseElement;
        new (): HTMLPopoverSearchDivingCourseElement;
    };
    interface HTMLPopoverSearchUserElement extends Components.PopoverSearchUser, HTMLStencilElement {
    }
    var HTMLPopoverSearchUserElement: {
        prototype: HTMLPopoverSearchUserElement;
        new (): HTMLPopoverSearchUserElement;
    };
    interface HTMLPopoverSelectDateElement extends Components.PopoverSelectDate, HTMLStencilElement {
    }
    var HTMLPopoverSelectDateElement: {
        prototype: HTMLPopoverSelectDateElement;
        new (): HTMLPopoverSelectDateElement;
    };
    interface HTMLPopoverSelectSearchElement extends Components.PopoverSelectSearch, HTMLStencilElement {
    }
    var HTMLPopoverSelectSearchElement: {
        prototype: HTMLPopoverSelectSearchElement;
        new (): HTMLPopoverSelectSearchElement;
    };
    interface HTMLPopoverShapesFilterElement extends Components.PopoverShapesFilter, HTMLStencilElement {
    }
    var HTMLPopoverShapesFilterElement: {
        prototype: HTMLPopoverShapesFilterElement;
        new (): HTMLPopoverShapesFilterElement;
    };
    interface HTMLPopoverTankElement extends Components.PopoverTank, HTMLStencilElement {
    }
    var HTMLPopoverTankElement: {
        prototype: HTMLPopoverTankElement;
        new (): HTMLPopoverTankElement;
    };
    interface HTMLElementTagNameMap {
        "app-admin-advertising": HTMLAppAdminAdvertisingElement;
        "app-admin-chats": HTMLAppAdminChatsElement;
        "app-admin-clients-list": HTMLAppAdminClientsListElement;
        "app-admin-dive-trips": HTMLAppAdminDiveTripsElement;
        "app-admin-diving-classes": HTMLAppAdminDivingClassesElement;
        "app-admin-translations": HTMLAppAdminTranslationsElement;
        "app-banner": HTMLAppBannerElement;
        "app-calendar": HTMLAppCalendarElement;
        "app-chat": HTMLAppChatElement;
        "app-coordinates": HTMLAppCoordinatesElement;
        "app-customer-plant-production": HTMLAppCustomerPlantProductionElement;
        "app-decoplanner-arpc": HTMLAppDecoplannerArpcElement;
        "app-decoplanner-charts": HTMLAppDecoplannerChartsElement;
        "app-decoplanner-gas": HTMLAppDecoplannerGasElement;
        "app-decoplanner-plan": HTMLAppDecoplannerPlanElement;
        "app-decoplanner-profile": HTMLAppDecoplannerProfileElement;
        "app-decoplanner-settings": HTMLAppDecoplannerSettingsElement;
        "app-decoplanner-showplan": HTMLAppDecoplannerShowplanElement;
        "app-dive-class-bookings": HTMLAppDiveClassBookingsElement;
        "app-dive-course-activities": HTMLAppDiveCourseActivitiesElement;
        "app-dive-course-card": HTMLAppDiveCourseCardElement;
        "app-dive-plan-card": HTMLAppDivePlanCardElement;
        "app-dive-site-card": HTMLAppDiveSiteCardElement;
        "app-dive-trip-bookings": HTMLAppDiveTripBookingsElement;
        "app-dive-trip-card": HTMLAppDiveTripCardElement;
        "app-diving-center-card": HTMLAppDivingCenterCardElement;
        "app-diving-class-schedule": HTMLAppDivingClassScheduleElement;
        "app-dragdrop-file": HTMLAppDragdropFileElement;
        "app-eaf-questionnaire": HTMLAppEafQuestionnaireElement;
        "app-form-item": HTMLAppFormItemElement;
        "app-geocode": HTMLAppGeocodeElement;
        "app-header-segment-toolbar": HTMLAppHeaderSegmentToolbarElement;
        "app-image-cache": HTMLAppImageCacheElement;
        "app-infinite-scroll": HTMLAppInfiniteScrollElement;
        "app-item-cover": HTMLAppItemCoverElement;
        "app-item-detail": HTMLAppItemDetailElement;
        "app-language-picker": HTMLAppLanguagePickerElement;
        "app-last-reviews": HTMLAppLastReviewsElement;
        "app-location": HTMLAppLocationElement;
        "app-map": HTMLAppMapElement;
        "app-map-icon": HTMLAppMapIconElement;
        "app-map-popup": HTMLAppMapPopupElement;
        "app-menu": HTMLAppMenuElement;
        "app-modal-footer": HTMLAppModalFooterElement;
        "app-multilanguage-text": HTMLAppMultilanguageTextElement;
        "app-navbar": HTMLAppNavbarElement;
        "app-page-project-summary": HTMLAppPageProjectSummaryElement;
        "app-public-user": HTMLAppPublicUserElement;
        "app-review-details": HTMLAppReviewDetailsElement;
        "app-root": HTMLAppRootElement;
        "app-search-filter": HTMLAppSearchFilterElement;
        "app-search-toolbar": HTMLAppSearchToolbarElement;
        "app-searchbar": HTMLAppSearchbarElement;
        "app-select-search": HTMLAppSelectSearchElement;
        "app-shrinking-header": HTMLAppShrinkingHeaderElement;
        "app-skeletons": HTMLAppSkeletonsElement;
        "app-star-rating": HTMLAppStarRatingElement;
        "app-sticky-search": HTMLAppStickySearchElement;
        "app-stripe-connect": HTMLAppStripeConnectElement;
        "app-stripe-pay": HTMLAppStripePayElement;
        "app-upload-cover": HTMLAppUploadCoverElement;
        "app-upload-covers": HTMLAppUploadCoversElement;
        "app-user-avatar": HTMLAppUserAvatarElement;
        "app-user-cards": HTMLAppUserCardsElement;
        "app-user-configurations": HTMLAppUserConfigurationsElement;
        "app-user-cover": HTMLAppUserCoverElement;
        "app-user-dive-communities": HTMLAppUserDiveCommunitiesElement;
        "app-user-dive-plans": HTMLAppUserDivePlansElement;
        "app-user-dive-sites": HTMLAppUserDiveSitesElement;
        "app-user-diving-centers": HTMLAppUserDivingCentersElement;
        "app-user-diving-schools": HTMLAppUserDivingSchoolsElement;
        "app-user-licences": HTMLAppUserLicencesElement;
        "app-user-manage-notifications": HTMLAppUserManageNotificationsElement;
        "app-user-reviews-list": HTMLAppUserReviewsListElement;
        "app-user-service-centers": HTMLAppUserServiceCentersElement;
        "app-user-tanks": HTMLAppUserTanksElement;
        "app-user-translation": HTMLAppUserTranslationElement;
        "app-users-list": HTMLAppUsersListElement;
        "modal-contact-update": HTMLModalContactUpdateElement;
        "modal-customer-update": HTMLModalCustomerUpdateElement;
        "modal-datasheet-category": HTMLModalDatasheetCategoryElement;
        "modal-datasheet-family": HTMLModalDatasheetFamilyElement;
        "modal-datasheet-majorfamily": HTMLModalDatasheetMajorfamilyElement;
        "modal-datasheet-propertyname": HTMLModalDatasheetPropertynameElement;
        "modal-datasheet-propertytype": HTMLModalDatasheetPropertytypeElement;
        "modal-datasheet-qualitycolorcode": HTMLModalDatasheetQualitycolorcodeElement;
        "modal-datasheet-update": HTMLModalDatasheetUpdateElement;
        "modal-dive-card": HTMLModalDiveCardElement;
        "modal-dive-certification-update": HTMLModalDiveCertificationUpdateElement;
        "modal-dive-community-update": HTMLModalDiveCommunityUpdateElement;
        "modal-dive-configuration": HTMLModalDiveConfigurationElement;
        "modal-dive-planner": HTMLModalDivePlannerElement;
        "modal-dive-site-update": HTMLModalDiveSiteUpdateElement;
        "modal-dive-template": HTMLModalDiveTemplateElement;
        "modal-dive-trip-update": HTMLModalDiveTripUpdateElement;
        "modal-diving-center-update": HTMLModalDivingCenterUpdateElement;
        "modal-diving-class-update": HTMLModalDivingClassUpdateElement;
        "modal-diving-school-update": HTMLModalDivingSchoolUpdateElement;
        "modal-edit-user-roles": HTMLModalEditUserRolesElement;
        "modal-operating-conditions-questionnaire": HTMLModalOperatingConditionsQuestionnaireElement;
        "modal-project-applicationunit": HTMLModalProjectApplicationunitElement;
        "modal-project-bricksallocationarea": HTMLModalProjectBricksallocationareaElement;
        "modal-project-quantityunit": HTMLModalProjectQuantityunitElement;
        "modal-project-update": HTMLModalProjectUpdateElement;
        "modal-search-list": HTMLModalSearchListElement;
        "modal-service-center-update": HTMLModalServiceCenterUpdateElement;
        "modal-shape-type": HTMLModalShapeTypeElement;
        "modal-shape-update": HTMLModalShapeUpdateElement;
        "modal-tank-configuration": HTMLModalTankConfigurationElement;
        "modal-upload-image": HTMLModalUploadImageElement;
        "modal-user-details": HTMLModalUserDetailsElement;
        "modal-user-plans-update": HTMLModalUserPlansUpdateElement;
        "modal-user-teams-update": HTMLModalUserTeamsUpdateElement;
        "modal-user-update": HTMLModalUserUpdateElement;
        "my-transl": HTMLMyTranslElement;
        "page-404": HTMLPage404Element;
        "page-admin-agencies": HTMLPageAdminAgenciesElement;
        "page-admin-translations": HTMLPageAdminTranslationsElement;
        "page-chat": HTMLPageChatElement;
        "page-chats-list": HTMLPageChatsListElement;
        "page-client-details": HTMLPageClientDetailsElement;
        "page-community-chats-list": HTMLPageCommunityChatsListElement;
        "page-community-dashboard": HTMLPageCommunityDashboardElement;
        "page-community-dive-trips": HTMLPageCommunityDiveTripsElement;
        "page-community-members": HTMLPageCommunityMembersElement;
        "page-contact-details": HTMLPageContactDetailsElement;
        "page-contacts": HTMLPageContactsElement;
        "page-customer-details": HTMLPageCustomerDetailsElement;
        "page-customers": HTMLPageCustomersElement;
        "page-dashboard": HTMLPageDashboardElement;
        "page-datasheet-details": HTMLPageDatasheetDetailsElement;
        "page-datasheets": HTMLPageDatasheetsElement;
        "page-dive-community-details": HTMLPageDiveCommunityDetailsElement;
        "page-dive-plan-details": HTMLPageDivePlanDetailsElement;
        "page-dive-planner": HTMLPageDivePlannerElement;
        "page-dive-site-details": HTMLPageDiveSiteDetailsElement;
        "page-dive-trip-details": HTMLPageDiveTripDetailsElement;
        "page-dive-trips": HTMLPageDiveTripsElement;
        "page-diving-center-details": HTMLPageDivingCenterDetailsElement;
        "page-diving-chats-list": HTMLPageDivingChatsListElement;
        "page-diving-class-details": HTMLPageDivingClassDetailsElement;
        "page-diving-classes": HTMLPageDivingClassesElement;
        "page-diving-customers": HTMLPageDivingCustomersElement;
        "page-diving-dashboard": HTMLPageDivingDashboardElement;
        "page-diving-dive-trips": HTMLPageDivingDiveTripsElement;
        "page-diving-documents": HTMLPageDivingDocumentsElement;
        "page-diving-invoicing": HTMLPageDivingInvoicingElement;
        "page-diving-payments": HTMLPageDivingPaymentsElement;
        "page-diving-rentals": HTMLPageDivingRentalsElement;
        "page-diving-reports": HTMLPageDivingReportsElement;
        "page-diving-school-details": HTMLPageDivingSchoolDetailsElement;
        "page-diving-warehouse": HTMLPageDivingWarehouseElement;
        "page-gas-blender": HTMLPageGasBlenderElement;
        "page-gue-map": HTMLPageGueMapElement;
        "page-loading": HTMLPageLoadingElement;
        "page-log-book": HTMLPageLogBookElement;
        "page-login": HTMLPageLoginElement;
        "page-lostpsw": HTMLPageLostpswElement;
        "page-map": HTMLPageMapElement;
        "page-project-details": HTMLPageProjectDetailsElement;
        "page-projects": HTMLPageProjectsElement;
        "page-school-chats-list": HTMLPageSchoolChatsListElement;
        "page-school-classes": HTMLPageSchoolClassesElement;
        "page-school-dashboard": HTMLPageSchoolDashboardElement;
        "page-school-dive-trips": HTMLPageSchoolDiveTripsElement;
        "page-school-members": HTMLPageSchoolMembersElement;
        "page-school-rentals": HTMLPageSchoolRentalsElement;
        "page-school-warehouse": HTMLPageSchoolWarehouseElement;
        "page-service-center-details": HTMLPageServiceCenterDetailsElement;
        "page-service-chats-list": HTMLPageServiceChatsListElement;
        "page-service-customers": HTMLPageServiceCustomersElement;
        "page-service-dashboard": HTMLPageServiceDashboardElement;
        "page-service-documents": HTMLPageServiceDocumentsElement;
        "page-service-invoicing": HTMLPageServiceInvoicingElement;
        "page-service-payments": HTMLPageServicePaymentsElement;
        "page-service-servicing": HTMLPageServiceServicingElement;
        "page-service-warehouse": HTMLPageServiceWarehouseElement;
        "page-shape-details": HTMLPageShapeDetailsElement;
        "page-shapes": HTMLPageShapesElement;
        "page-support": HTMLPageSupportElement;
        "page-team-manager": HTMLPageTeamManagerElement;
        "page-trs-dashboard": HTMLPageTrsDashboardElement;
        "page-trs-user-settings": HTMLPageTrsUserSettingsElement;
        "page-user-manager": HTMLPageUserManagerElement;
        "page-user-plans": HTMLPageUserPlansElement;
        "page-user-settings": HTMLPageUserSettingsElement;
        "popover-chat-participants": HTMLPopoverChatParticipantsElement;
        "popover-datasheets-filter": HTMLPopoverDatasheetsFilterElement;
        "popover-edit-customer-owner": HTMLPopoverEditCustomerOwnerElement;
        "popover-edit-translation": HTMLPopoverEditTranslationElement;
        "popover-find-oldcustomer": HTMLPopoverFindOldcustomerElement;
        "popover-gas": HTMLPopoverGasElement;
        "popover-gas-blender": HTMLPopoverGasBlenderElement;
        "popover-level": HTMLPopoverLevelElement;
        "popover-media-loading": HTMLPopoverMediaLoadingElement;
        "popover-media-uploader": HTMLPopoverMediaUploaderElement;
        "popover-new-class-activity": HTMLPopoverNewClassActivityElement;
        "popover-new-dive-trip": HTMLPopoverNewDiveTripElement;
        "popover-project-autofill": HTMLPopoverProjectAutofillElement;
        "popover-search-dive-site": HTMLPopoverSearchDiveSiteElement;
        "popover-search-diving-course": HTMLPopoverSearchDivingCourseElement;
        "popover-search-user": HTMLPopoverSearchUserElement;
        "popover-select-date": HTMLPopoverSelectDateElement;
        "popover-select-search": HTMLPopoverSelectSearchElement;
        "popover-shapes-filter": HTMLPopoverShapesFilterElement;
        "popover-tank": HTMLPopoverTankElement;
    }
}
declare namespace LocalJSX {
    interface AppAdminAdvertising {
    }
    interface AppAdminChats {
        "filterByChats"?: any;
        "filterByOrganisierId"?: string;
    }
    interface AppAdminClientsList {
        "admin"?: Organiser;
    }
    interface AppAdminDiveTrips {
        "filterByOrganisierId"?: string;
        "filterByTrips"?: any;
    }
    interface AppAdminDivingClasses {
        "filterByClasses"?: any;
        "filterByOrganisierId"?: string;
    }
    interface AppAdminTranslations {
        "language"?: string;
        "onTranslationChanged"?: (event: AppAdminTranslationsCustomEvent<Translation>) => void;
        "translations"?: Translation[];
    }
    interface AppBanner {
        "backgroundCover"?: boolean;
        "backgroundCoverFill"?: boolean;
        "heightPerc"?: number;
        "heightPx"?: number;
        "link"?: string;
        "scrollTopValue"?: number;
        "widthPerc"?: number;
        "widthPx"?: number;
    }
    interface AppCalendar {
        "addEvents"?: any;
        "calendarId"?: string;
    }
    interface AppChat {
        "chatId"?: string;
    }
    interface AppCoordinates {
        "coordinates"?: DecimalCoords;
        "onAddressEmit"?: (event: AppCoordinatesCustomEvent<LocationIQ>) => void;
        "onCoordinatesEmit"?: (event: AppCoordinatesCustomEvent<DecimalCoords>) => void;
    }
    interface AppCustomerPlantProduction {
        "customer"?: Customer;
        "editable"?: boolean;
    }
    interface AppDecoplannerArpc {
        "diveDataToShare"?: any;
        "onSaveArpc"?: (event: AppDecoplannerArpcCustomEvent<ARPCModel>) => void;
        "planner"?: boolean;
    }
    interface AppDecoplannerCharts {
        "diveDataToShare"?: any;
        "isShown"?: boolean;
    }
    interface AppDecoplannerGas {
        "diveDataToShare"?: any;
        "isShown"?: boolean;
    }
    interface AppDecoplannerPlan {
        "diveDataToShare"?: any;
        "onUpdateParamsEvent"?: (event: AppDecoplannerPlanCustomEvent<DecoplannerParameters>) => void;
        "planner"?: boolean;
    }
    interface AppDecoplannerProfile {
        "diveDataToShare"?: any;
        "onRunTableCalculations"?: (event: AppDecoplannerProfileCustomEvent<any>) => void;
    }
    interface AppDecoplannerSettings {
        "diveDataToShare"?: any;
        "onUpdateParamsEvent"?: (event: AppDecoplannerSettingsCustomEvent<DecoplannerParameters>) => void;
    }
    interface AppDecoplannerShowplan {
        "diveDataToShare"?: any;
        "planner"?: boolean;
    }
    interface AppDiveClassBookings {
        "divingClass"?: DivingClass;
        "divingClassId"?: string;
        "editable"?: boolean;
    }
    interface AppDiveCourseActivities {
        "editable"?: boolean;
        "onScheduleEmit"?: (event: AppDiveCourseActivitiesCustomEvent<Activity[]>) => void;
        "schedule"?: Activity[];
        "showDiveLocation"?: boolean;
    }
    interface AppDiveCourseCard {
        "divingCourse"?: DivingCourse;
        "edit"?: boolean;
        "onRemoveEmit"?: (event: AppDiveCourseCardCustomEvent<any>) => void;
    }
    interface AppDivePlanCard {
        "divePlan"?: DivePlanModel;
        "edit"?: boolean;
        "onRemoveEmit"?: (event: AppDivePlanCardCustomEvent<number>) => void;
        "onViewEmit"?: (event: AppDivePlanCardCustomEvent<DivePlanModel>) => void;
    }
    interface AppDiveSiteCard {
        "diveSite"?: MapDataDiveSite;
        "edit"?: boolean;
        "onRemoveEmit"?: (event: AppDiveSiteCardCustomEvent<any>) => void;
        "startlocation"?: any;
    }
    interface AppDiveTripBookings {
        "diveTrip"?: DiveTrip;
        "diveTripId"?: string;
        "editable"?: boolean;
        "tripDiveIndex"?: number;
    }
    interface AppDiveTripCard {
        "editable"?: boolean;
        "onAddDiveEmit"?: (event: AppDiveTripCardCustomEvent<any>) => void;
        "onRemoveDiveTripEmit"?: (event: AppDiveTripCardCustomEvent<any>) => void;
        "onRemoveTripDiveEmit"?: (event: AppDiveTripCardCustomEvent<number>) => void;
        "onUpdateDiveEmit"?: (event: AppDiveTripCardCustomEvent<DivePlanModel>) => void;
        "tripDive"?: TripDive;
        "updateView"?: boolean;
    }
    interface AppDivingCenterCard {
        "divingCenterId"?: string;
        "startlocation"?: any;
    }
    interface AppDivingClassSchedule {
        "divingClass"?: DivingClass;
        "editable"?: boolean;
        "onScheduleEmit"?: (event: AppDivingClassScheduleCustomEvent<any>) => void;
    }
    interface AppDragdropFile {
        "autoOpen"?: boolean;
        "file"?: File;
        "fileType"?: string;
        "fileTypes"?: string[];
        "onFileSelected"?: (event: AppDragdropFileCustomEvent<File>) => void;
    }
    interface AppEafQuestionnaire {
        "conditions"?: CustomerConditionEAF;
        "editable"?: boolean;
        "onUpdateEmit"?: (event: AppEafQuestionnaireCustomEvent<CustomerConditionEAF>) => void;
    }
    interface AppFormItem {
        "appendText"?: any;
        "color"?: string;
        "datePresentation"?: | "date"
    | "date-time"
    | "month"
    | "month-year"
    | "time"
    | "year";
        "debounce"?: number;
        "disabled"?: boolean;
        "forceInvalid"?: boolean;
        "inputFormMode"?: | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
    | undefined;
        "inputStep"?: string;
        "inputType"?: TextFieldTypes | "boolean";
        "labelPosition"?: "fixed" | "stacked" | "floating";
        "labelReplace"?: any;
        "labelTag"?: string;
        "labelText"?: string;
        "lines"?: "none" | "full" | "inset";
        "maxDate"?: string;
        "multiLanguage"?: boolean;
        "name"?: string;
        "onFormItemBlur"?: (event: AppFormItemCustomEvent<InputValidator>) => void;
        "onFormItemChanged"?: (event: AppFormItemCustomEvent<InputValidator>) => void;
        "onFormLocationSelected"?: (event: AppFormItemCustomEvent<LocationIQ>) => void;
        "onFormLocationsFound"?: (event: AppFormItemCustomEvent<any>) => void;
        "onIsValid"?: (event: AppFormItemCustomEvent<boolean>) => void;
        "onUpdateSlider"?: (event: AppFormItemCustomEvent<boolean>) => void;
        "placeholder"?: string;
        "preferWheel"?: boolean;
        "readonly"?: boolean;
        "selectOnFocus"?: boolean;
        "shortItem"?: boolean;
        "showDateTitle"?: boolean;
        "showItem"?: boolean;
        "textRows"?: number;
        "validator"?: Array<string | ValidatorEntry | Validator<string>>;
        "value"?: string | TextMultilanguage | number | boolean;
    }
    interface AppGeocode {
        "address"?: string;
        "gotFocus"?: boolean;
        "onLocationSelected"?: (event: AppGeocodeCustomEvent<any>) => void;
        "onLocationsFound"?: (event: AppGeocodeCustomEvent<any>) => void;
    }
    interface AppHeaderSegmentToolbar {
        "color"?: string;
        "mode"?: "ios" | "md";
        "noHeader"?: boolean;
        "noToolbar"?: boolean;
        "segment"?: number;
        "swiper"?: any;
        "titles"?: {
    tag: string;
    text?: string;
    appendix?: string;
    disabled?: boolean;
    icon?: string;
    slotIcon?: string;
    badge?: number;
  }[];
        "updateBadge"?: boolean;
    }
    interface AppImageCache {
        "backgroundCover"?: boolean;
        "backgroundCoverFill"?: boolean;
        "url"?: string;
    }
    interface AppInfiniteScroll {
        "groupBy"?: string[];
        "icon"?: string;
        "list"?: any[];
        "loading"?: boolean;
        "onItemClicked"?: (event: AppInfiniteScrollCustomEvent<any>) => void;
        "onListChanged"?: (event: AppInfiniteScrollCustomEvent<any>) => void;
        "options"?: {
    tag: string;
    text: string;
    icon: string;
    color: string;
    func: any;
  }[];
        "orderBy"?: string[];
        "returnField"?: string;
        "showFields"?: string[];
        "showFieldsDivider"?: string;
        "showNotes"?: string[];
    }
    interface AppItemCover {
        "item"?: any;
        "tmbPosition"?: string;
    }
    interface AppItemDetail {
        "alignRight"?: boolean;
        "appendText"?: string;
        "detailTag"?: string;
        "detailText"?: | string
    | number
    | boolean
    | TextMultilanguage;
        "isDate"?: boolean;
        "labelPosition"?: "fixed" | "stacked" | "floating";
        "labelTag"?: string;
        "labelText"?: string;
        "lines"?: "none" | "full" | "inset";
        "showItem"?: boolean;
    }
    interface AppLanguagePicker {
        "iconOnly"?: boolean;
        "onClickedItem"?: (event: AppLanguagePickerCustomEvent<any>) => void;
        "onLanguageChanged"?: (event: AppLanguagePickerCustomEvent<any>) => void;
        "picker"?: boolean;
        "selectOnly"?: boolean;
        "selectedLangCode"?: string;
    }
    interface AppLastReviews {
        "collectionId"?: string;
        "uid"?: string;
    }
    interface AppLocation {
        "editable"?: boolean;
        "location"?: CustomerLocation;
        "locations"?: LocationType[];
        "onLocationDeleted"?: (event: AppLocationCustomEvent<any>) => void;
        "onLocationSelected"?: (event: AppLocationCustomEvent<any>) => void;
        "slider"?: any;
    }
    interface AppMap {
        "center"?: any;
        "currentPosition"?: boolean;
        "draggableMarkerPosition"?: any;
        "markers"?: Marker[];
        "markersAsFeature"?: boolean;
        "onDragMarkerEnd"?: (event: AppMapCustomEvent<any>) => void;
        "onEmitMapBounds"?: (event: AppMapCustomEvent<any>) => void;
        "onMapLoadingCompleted"?: (event: AppMapCustomEvent<any>) => void;
        "pageId"?: string;
        "searchTags"?: SearchTag[];
    }
    interface AppMapIcon {
        "marker"?: Marker;
    }
    interface AppMapPopup {
        "properties"?: string;
    }
    interface AppMenu {
    }
    interface AppModalFooter {
        "cancelTag"?: { tag: string; text: string; color: string; };
        "color"?: any;
        "disableSave"?: boolean;
        "onCancelEmit"?: (event: AppModalFooterCustomEvent<any>) => void;
        "onSaveEmit"?: (event: AppModalFooterCustomEvent<any>) => void;
        "saveTag"?: { tag: string; text: string; color: string; };
        "showSave"?: boolean;
    }
    interface AppMultilanguageText {
        "text"?: TextMultilanguage;
    }
    interface AppNavbar {
        "backButton"?: boolean;
        "color"?: string;
        "extraTitle"?: string;
        "iconColor"?: string;
        "modal"?: boolean;
        "rightButtonFc"?: any;
        "rightButtonText"?: {
    icon: string;
    tag: string;
    text: string;
    fill: "clear" | "outline" | "solid" | "default";
  };
        "tag"?: string;
        "text"?: string;
    }
    interface AppPageProjectSummary {
        "areaShapes"?: AreaShape[];
        "project"?: Project;
        "updateSummary"?: any;
    }
    interface AppPublicUser {
        "userId"?: string;
        "userProfile"?: UserPubicProfile;
    }
    interface AppReviewDetails {
        "color"?: string;
        "reviewId"?: string;
    }
    interface AppRoot {
    }
    interface AppSearchFilter {
        "hideToolbar"?: boolean;
        "onSearchFilterEmit"?: (event: AppSearchFilterCustomEvent<SearchTag[]>) => void;
    }
    interface AppSearchToolbar {
        "color"?: string;
        "filterBy"?: string[];
        "list"?: any[];
        "onFilteredList"?: (event: AppSearchToolbarCustomEvent<any>) => void;
        "orderFields"?: string[];
        "placeholder"?: string;
        "searchTitle"?: string;
    }
    interface AppSearchbar {
        "floating"?: boolean;
        "onInputBlur"?: (event: AppSearchbarCustomEvent<string>) => void;
        "onInputChanged"?: (event: AppSearchbarCustomEvent<string>) => void;
    }
    interface AppSelectSearch {
        "disabled"?: boolean;
        "label"?: {tag: string; text: string};
        "labelAddText"?: string;
        "lines"?: "inset" | "full" | "none";
        "placeholder"?: string;
        "selectFn"?: any;
        "selectOptions"?: any[];
        "selectValueId"?: string;
        "selectValueText"?: string[];
        "value"?: string;
    }
    interface AppShrinkingHeader {
        "logoUrl"?: string;
        "scrollTopValue"?: number;
        "slogan"?: any;
    }
    interface AppSkeletons {
        "skeleton"?: string;
    }
    interface AppStarRating {
        "color"?: string;
        "editable"?: boolean;
        "onRated"?: (event: AppStarRatingCustomEvent<number>) => void;
        "rating"?: number;
        "size"?: number;
        "stars"?: number;
    }
    interface AppStickySearch {
        "placeholderValue"?: string;
        "scrollTopValue"?: number;
    }
    interface AppStripeConnect {
        "onRefreshConnectedId"?: (event: AppStripeConnectCustomEvent<string>) => void;
    }
    interface AppStripePay {
        "amount"?: number;
        "application_fee_amount"?: string;
        "connectedAccountID"?: string;
        "currency"?: string;
        "modal"?: any;
    }
    interface AppUploadCover {
        "item"?: {
    collection: string;
    id: string;
    photoURL: string;
    coverURL: string;
  };
        "onCoverUploaded"?: (event: AppUploadCoverCustomEvent<any>) => void;
        "showPhotoURL"?: boolean;
    }
    interface AppUploadCovers {
        "item"?: {
    collection: string;
    id: string;
    photoURL: string;
    coverURL: string | { [coverId: string]: string };
  };
        "onCoverUploaded"?: (event: AppUploadCoversCustomEvent<any>) => void;
        "showPhotoURL"?: boolean;
    }
    interface AppUserAvatar {
        "size"?: number;
    }
    interface AppUserCards {
        "updateSlider"?: any;
    }
    interface AppUserConfigurations {
    }
    interface AppUserCover {
        "showCover"?: boolean;
        "showUserDetails"?: boolean;
        "tmbPosition"?: string;
    }
    interface AppUserDiveCommunities {
    }
    interface AppUserDivePlans {
    }
    interface AppUserDiveSites {
    }
    interface AppUserDivingCenters {
    }
    interface AppUserDivingSchools {
    }
    interface AppUserLicences {
    }
    interface AppUserManageNotifications {
    }
    interface AppUserReviewsList {
        "collectionId"?: string;
        "uid"?: string;
    }
    interface AppUserServiceCenters {
    }
    interface AppUserTanks {
    }
    interface AppUserTranslation {
        "edit"?: boolean;
        "onTranslationEmit"?: (event: AppUserTranslationCustomEvent<UserTranslation>) => void;
        "userTranslation"?: UserTranslationDoc;
    }
    interface AppUsersList {
        "editable"?: boolean;
        "item"?: any;
        "show"?: string[];
    }
    interface ModalContactUpdate {
        "contactId"?: string;
    }
    interface ModalCustomerUpdate {
        "customerId"?: string;
    }
    interface ModalDatasheetCategory {
    }
    interface ModalDatasheetFamily {
    }
    interface ModalDatasheetMajorfamily {
    }
    interface ModalDatasheetPropertyname {
    }
    interface ModalDatasheetPropertytype {
    }
    interface ModalDatasheetQualitycolorcode {
    }
    interface ModalDatasheetUpdate {
        "datasheetId"?: string;
        "duplicateDatasheet"?: {id: string; datasheet: Datasheet};
        "revision"?: boolean;
    }
    interface ModalDiveCard {
        "card"?: Card;
    }
    interface ModalDiveCertificationUpdate {
        "agencyId"?: string;
        "diveCertification"?: Certification;
    }
    interface ModalDiveCommunityUpdate {
        "diveCommunityId"?: string;
    }
    interface ModalDiveConfiguration {
        "diveDataToShare"?: any;
    }
    interface ModalDivePlanner {
        "addDive"?: boolean;
        "divePlanModel"?: DivePlanModel;
        "diveTripData"?: {
    date: Date;
    diveSiteId: string;
    divingCenterId: string;
  };
        "index"?: number;
        "selectedConfiguration"?: DiveConfiguration;
        "setDate"?: boolean;
        "showDiveSite"?: boolean;
        "showPositionTab"?: boolean;
        "stdConfigurations"?: Array<DiveConfiguration>;
        "userRoles"?: UserRoles;
    }
    interface ModalDiveSiteUpdate {
        "diveSiteId"?: string;
    }
    interface ModalDiveTemplate {
        "addDive"?: boolean;
        "divePlanModel"?: DivePlanModel;
        "index"?: number;
        "selectedConfiguration"?: DiveConfiguration;
        "showPositionTab"?: boolean;
        "stdConfigurations"?: Array<DiveConfiguration>;
        "userRoles"?: UserRoles;
    }
    interface ModalDiveTripUpdate {
        "collectionId"?: string;
        "diveTripId"?: string;
        "organiserId"?: string;
    }
    interface ModalDivingCenterUpdate {
        "divingCenterId"?: string;
    }
    interface ModalDivingClassUpdate {
        "collectionId"?: string;
        "divingClassId"?: string;
        "organiserId"?: string;
    }
    interface ModalDivingSchoolUpdate {
        "divingSchoolId"?: string;
    }
    interface ModalEditUserRoles {
        "uid"?: string;
    }
    interface ModalOperatingConditionsQuestionnaire {
        "condition"?: "EAF" | "LF" | "CCM";
        "conditionData"?: | CustomerConditionEAF
    | CustomerConditionLF
    | CustomerConditionCCM;
        "editable"?: boolean;
    }
    interface ModalProjectApplicationunit {
    }
    interface ModalProjectBricksallocationarea {
    }
    interface ModalProjectQuantityunit {
    }
    interface ModalProjectUpdate {
        "duplicateProject"?: Project;
        "projectId"?: string;
    }
    interface ModalSearchList {
        "filterBy"?: string[];
        "filterFunction"?: any;
        "filterObject"?: any;
        "filterPopup"?: any;
        "item"?: any;
        "list"?: any[];
        "orderBy"?: string[];
        "placeholder"?: string;
        "searchTitle"?: {tag: string; text: string};
        "showField"?: string;
    }
    interface ModalServiceCenterUpdate {
        "serviceCenterId"?: string;
    }
    interface ModalShapeType {
    }
    interface ModalShapeUpdate {
        "duplicateShape"?: {id: string; shape: Shape};
        "shapeId"?: string;
    }
    interface ModalTankConfiguration {
        "tank"?: TankModel;
    }
    interface ModalUploadImage {
        "aspectRatio"?: number;
        "maxDimensions"?: number;
        "round"?: boolean;
    }
    interface ModalUserDetails {
        "userId"?: string;
    }
    interface ModalUserPlansUpdate {
        "planIndex"?: number;
        "uid"?: string;
        "userPlans"?: UserPlans;
    }
    interface ModalUserTeamsUpdate {
        "user"?: UserPubicProfile1;
    }
    interface ModalUserUpdate {
    }
    interface MyTransl {
        "appendText"?: string;
        "isLabel"?: boolean;
        "replace"?: any;
        "tag"?: string;
        "text"?: string;
    }
    interface Page404 {
    }
    interface PageAdminAgencies {
    }
    interface PageAdminTranslations {
    }
    interface PageChat {
        "chatId"?: string;
    }
    interface PageChatsList {
    }
    interface PageClientDetails {
        "clientId"?: string;
    }
    interface PageCommunityChatsList {
    }
    interface PageCommunityDashboard {
    }
    interface PageCommunityDiveTrips {
    }
    interface PageCommunityMembers {
    }
    interface PageContactDetails {
        "itemId"?: string;
    }
    interface PageContacts {
    }
    interface PageCustomerDetails {
        "itemId"?: string;
    }
    interface PageCustomers {
    }
    interface PageDashboard {
    }
    interface PageDatasheetDetails {
        "itemId"?: string;
    }
    interface PageDatasheets {
    }
    interface PageDiveCommunityDetails {
        "dcid"?: string;
    }
    interface PageDivePlanDetails {
        "diveid"?: number;
        "planid"?: string;
    }
    interface PageDivePlanner {
    }
    interface PageDiveSiteDetails {
        "siteid"?: string;
    }
    interface PageDiveTripDetails {
        "tripid"?: string;
    }
    interface PageDiveTrips {
    }
    interface PageDivingCenterDetails {
        "dcid"?: string;
    }
    interface PageDivingChatsList {
    }
    interface PageDivingClassDetails {
        "classid"?: string;
    }
    interface PageDivingClasses {
    }
    interface PageDivingCustomers {
    }
    interface PageDivingDashboard {
    }
    interface PageDivingDiveTrips {
    }
    interface PageDivingDocuments {
    }
    interface PageDivingInvoicing {
    }
    interface PageDivingPayments {
    }
    interface PageDivingRentals {
    }
    interface PageDivingReports {
    }
    interface PageDivingSchoolDetails {
        "dsid"?: string;
    }
    interface PageDivingWarehouse {
    }
    interface PageGasBlender {
    }
    interface PageGueMap {
    }
    interface PageLoading {
    }
    interface PageLogBook {
    }
    interface PageLogin {
    }
    interface PageLostpsw {
        "email"?: string;
    }
    interface PageMap {
    }
    interface PageProjectDetails {
        "itemId"?: string;
    }
    interface PageProjects {
    }
    interface PageSchoolChatsList {
    }
    interface PageSchoolClasses {
    }
    interface PageSchoolDashboard {
    }
    interface PageSchoolDiveTrips {
    }
    interface PageSchoolMembers {
    }
    interface PageSchoolRentals {
    }
    interface PageSchoolWarehouse {
    }
    interface PageServiceCenterDetails {
        "centerid"?: string;
    }
    interface PageServiceChatsList {
    }
    interface PageServiceCustomers {
    }
    interface PageServiceDashboard {
    }
    interface PageServiceDocuments {
    }
    interface PageServiceInvoicing {
    }
    interface PageServicePayments {
    }
    interface PageServiceServicing {
    }
    interface PageServiceWarehouse {
    }
    interface PageShapeDetails {
        "itemId"?: string;
    }
    interface PageShapes {
    }
    interface PageSupport {
    }
    interface PageTeamManager {
    }
    interface PageTrsDashboard {
    }
    interface PageTrsUserSettings {
    }
    interface PageUserManager {
    }
    interface PageUserPlans {
        "uid"?: string;
    }
    interface PageUserSettings {
    }
    interface PopoverChatParticipants {
        "chat"?: Chat;
    }
    interface PopoverDatasheetsFilter {
        "filter"?: DatasheetFilter;
    }
    interface PopoverEditCustomerOwner {
        "group"?: boolean;
        "owner"?: CustomerGroup;
    }
    interface PopoverEditTranslation {
        "language"?: string;
        "originalTranslation"?: Translation;
    }
    interface PopoverFindOldcustomer {
        "customersList"?: any;
        "newCustomer"?: any;
        "oldCustomer"?: any;
    }
    interface PopoverGas {
        "ccr"?: boolean;
        "gasProp"?: Gas;
        "parameters"?: any;
        "stdDecoGases"?: Array<GasModel>;
    }
    interface PopoverGasBlender {
        "gasProp"?: any;
        "hasTrimixlicence"?: boolean;
        "showBar"?: boolean;
        "stdGasesList"?: Array<GasModel>;
    }
    interface PopoverLevel {
        "ccr"?: boolean;
        "levelProp"?: DiveProfilePoint;
        "parameters"?: any;
        "stdGasesList"?: Array<GasModel>;
        "units"?: string;
    }
    interface PopoverMediaLoading {
        "file"?: File;
        "media"?: Media;
    }
    interface PopoverMediaUploader {
        "collectionId"?: string;
        "files"?: {
    [id: string]: {
      media: Media;
      file: File;
    };
  };
        "itemId"?: string;
    }
    interface PopoverNewClassActivity {
        "activity"?: Activity;
        "showDiveLocation"?: boolean;
    }
    interface PopoverNewDiveTrip {
        "diveIndex"?: number;
        "tripDive"?: TripDive;
    }
    interface PopoverProjectAutofill {
        "autoFillCourses"?: AutoFillCourses;
        "bottom"?: boolean;
        "shapes"?: ProjectAreaQualityShape[];
    }
    interface PopoverSearchDiveSite {
    }
    interface PopoverSearchDivingCourse {
        "item"?: DivingCourse;
        "onCertSelected"?: (event: PopoverSearchDivingCourseCustomEvent<DivingCourse>) => void;
    }
    interface PopoverSearchUser {
    }
    interface PopoverSelectDate {
        "appendText"?: any;
        "datePresentation"?: | "date"
    | "date-time"
    | "month"
    | "month-year"
    | "time"
    | "time-date"
    | "year";
        "labelReplace"?: any;
        "labelTag"?: string;
        "labelText"?: string;
        "maxDate"?: string;
        "preferWheel"?: boolean;
        "showDateTitle"?: boolean;
        "value"?: string;
    }
    interface PopoverSelectSearch {
        "placeholder"?: string;
        "selectOptions"?: any[];
        "selectValueId"?: string;
        "selectValueText"?: string[];
        "value"?: string;
    }
    interface PopoverShapesFilter {
        "filter"?: ShapeFilter;
    }
    interface PopoverTank {
        "ccr"?: boolean;
        "decoTanks"?: boolean;
        "parameters"?: any;
        "stdGasesList"?: Array<GasModel>;
        "tank"?: Tank;
        "tanksList"?: Array<any>;
    }
    interface IntrinsicElements {
        "app-admin-advertising": AppAdminAdvertising;
        "app-admin-chats": AppAdminChats;
        "app-admin-clients-list": AppAdminClientsList;
        "app-admin-dive-trips": AppAdminDiveTrips;
        "app-admin-diving-classes": AppAdminDivingClasses;
        "app-admin-translations": AppAdminTranslations;
        "app-banner": AppBanner;
        "app-calendar": AppCalendar;
        "app-chat": AppChat;
        "app-coordinates": AppCoordinates;
        "app-customer-plant-production": AppCustomerPlantProduction;
        "app-decoplanner-arpc": AppDecoplannerArpc;
        "app-decoplanner-charts": AppDecoplannerCharts;
        "app-decoplanner-gas": AppDecoplannerGas;
        "app-decoplanner-plan": AppDecoplannerPlan;
        "app-decoplanner-profile": AppDecoplannerProfile;
        "app-decoplanner-settings": AppDecoplannerSettings;
        "app-decoplanner-showplan": AppDecoplannerShowplan;
        "app-dive-class-bookings": AppDiveClassBookings;
        "app-dive-course-activities": AppDiveCourseActivities;
        "app-dive-course-card": AppDiveCourseCard;
        "app-dive-plan-card": AppDivePlanCard;
        "app-dive-site-card": AppDiveSiteCard;
        "app-dive-trip-bookings": AppDiveTripBookings;
        "app-dive-trip-card": AppDiveTripCard;
        "app-diving-center-card": AppDivingCenterCard;
        "app-diving-class-schedule": AppDivingClassSchedule;
        "app-dragdrop-file": AppDragdropFile;
        "app-eaf-questionnaire": AppEafQuestionnaire;
        "app-form-item": AppFormItem;
        "app-geocode": AppGeocode;
        "app-header-segment-toolbar": AppHeaderSegmentToolbar;
        "app-image-cache": AppImageCache;
        "app-infinite-scroll": AppInfiniteScroll;
        "app-item-cover": AppItemCover;
        "app-item-detail": AppItemDetail;
        "app-language-picker": AppLanguagePicker;
        "app-last-reviews": AppLastReviews;
        "app-location": AppLocation;
        "app-map": AppMap;
        "app-map-icon": AppMapIcon;
        "app-map-popup": AppMapPopup;
        "app-menu": AppMenu;
        "app-modal-footer": AppModalFooter;
        "app-multilanguage-text": AppMultilanguageText;
        "app-navbar": AppNavbar;
        "app-page-project-summary": AppPageProjectSummary;
        "app-public-user": AppPublicUser;
        "app-review-details": AppReviewDetails;
        "app-root": AppRoot;
        "app-search-filter": AppSearchFilter;
        "app-search-toolbar": AppSearchToolbar;
        "app-searchbar": AppSearchbar;
        "app-select-search": AppSelectSearch;
        "app-shrinking-header": AppShrinkingHeader;
        "app-skeletons": AppSkeletons;
        "app-star-rating": AppStarRating;
        "app-sticky-search": AppStickySearch;
        "app-stripe-connect": AppStripeConnect;
        "app-stripe-pay": AppStripePay;
        "app-upload-cover": AppUploadCover;
        "app-upload-covers": AppUploadCovers;
        "app-user-avatar": AppUserAvatar;
        "app-user-cards": AppUserCards;
        "app-user-configurations": AppUserConfigurations;
        "app-user-cover": AppUserCover;
        "app-user-dive-communities": AppUserDiveCommunities;
        "app-user-dive-plans": AppUserDivePlans;
        "app-user-dive-sites": AppUserDiveSites;
        "app-user-diving-centers": AppUserDivingCenters;
        "app-user-diving-schools": AppUserDivingSchools;
        "app-user-licences": AppUserLicences;
        "app-user-manage-notifications": AppUserManageNotifications;
        "app-user-reviews-list": AppUserReviewsList;
        "app-user-service-centers": AppUserServiceCenters;
        "app-user-tanks": AppUserTanks;
        "app-user-translation": AppUserTranslation;
        "app-users-list": AppUsersList;
        "modal-contact-update": ModalContactUpdate;
        "modal-customer-update": ModalCustomerUpdate;
        "modal-datasheet-category": ModalDatasheetCategory;
        "modal-datasheet-family": ModalDatasheetFamily;
        "modal-datasheet-majorfamily": ModalDatasheetMajorfamily;
        "modal-datasheet-propertyname": ModalDatasheetPropertyname;
        "modal-datasheet-propertytype": ModalDatasheetPropertytype;
        "modal-datasheet-qualitycolorcode": ModalDatasheetQualitycolorcode;
        "modal-datasheet-update": ModalDatasheetUpdate;
        "modal-dive-card": ModalDiveCard;
        "modal-dive-certification-update": ModalDiveCertificationUpdate;
        "modal-dive-community-update": ModalDiveCommunityUpdate;
        "modal-dive-configuration": ModalDiveConfiguration;
        "modal-dive-planner": ModalDivePlanner;
        "modal-dive-site-update": ModalDiveSiteUpdate;
        "modal-dive-template": ModalDiveTemplate;
        "modal-dive-trip-update": ModalDiveTripUpdate;
        "modal-diving-center-update": ModalDivingCenterUpdate;
        "modal-diving-class-update": ModalDivingClassUpdate;
        "modal-diving-school-update": ModalDivingSchoolUpdate;
        "modal-edit-user-roles": ModalEditUserRoles;
        "modal-operating-conditions-questionnaire": ModalOperatingConditionsQuestionnaire;
        "modal-project-applicationunit": ModalProjectApplicationunit;
        "modal-project-bricksallocationarea": ModalProjectBricksallocationarea;
        "modal-project-quantityunit": ModalProjectQuantityunit;
        "modal-project-update": ModalProjectUpdate;
        "modal-search-list": ModalSearchList;
        "modal-service-center-update": ModalServiceCenterUpdate;
        "modal-shape-type": ModalShapeType;
        "modal-shape-update": ModalShapeUpdate;
        "modal-tank-configuration": ModalTankConfiguration;
        "modal-upload-image": ModalUploadImage;
        "modal-user-details": ModalUserDetails;
        "modal-user-plans-update": ModalUserPlansUpdate;
        "modal-user-teams-update": ModalUserTeamsUpdate;
        "modal-user-update": ModalUserUpdate;
        "my-transl": MyTransl;
        "page-404": Page404;
        "page-admin-agencies": PageAdminAgencies;
        "page-admin-translations": PageAdminTranslations;
        "page-chat": PageChat;
        "page-chats-list": PageChatsList;
        "page-client-details": PageClientDetails;
        "page-community-chats-list": PageCommunityChatsList;
        "page-community-dashboard": PageCommunityDashboard;
        "page-community-dive-trips": PageCommunityDiveTrips;
        "page-community-members": PageCommunityMembers;
        "page-contact-details": PageContactDetails;
        "page-contacts": PageContacts;
        "page-customer-details": PageCustomerDetails;
        "page-customers": PageCustomers;
        "page-dashboard": PageDashboard;
        "page-datasheet-details": PageDatasheetDetails;
        "page-datasheets": PageDatasheets;
        "page-dive-community-details": PageDiveCommunityDetails;
        "page-dive-plan-details": PageDivePlanDetails;
        "page-dive-planner": PageDivePlanner;
        "page-dive-site-details": PageDiveSiteDetails;
        "page-dive-trip-details": PageDiveTripDetails;
        "page-dive-trips": PageDiveTrips;
        "page-diving-center-details": PageDivingCenterDetails;
        "page-diving-chats-list": PageDivingChatsList;
        "page-diving-class-details": PageDivingClassDetails;
        "page-diving-classes": PageDivingClasses;
        "page-diving-customers": PageDivingCustomers;
        "page-diving-dashboard": PageDivingDashboard;
        "page-diving-dive-trips": PageDivingDiveTrips;
        "page-diving-documents": PageDivingDocuments;
        "page-diving-invoicing": PageDivingInvoicing;
        "page-diving-payments": PageDivingPayments;
        "page-diving-rentals": PageDivingRentals;
        "page-diving-reports": PageDivingReports;
        "page-diving-school-details": PageDivingSchoolDetails;
        "page-diving-warehouse": PageDivingWarehouse;
        "page-gas-blender": PageGasBlender;
        "page-gue-map": PageGueMap;
        "page-loading": PageLoading;
        "page-log-book": PageLogBook;
        "page-login": PageLogin;
        "page-lostpsw": PageLostpsw;
        "page-map": PageMap;
        "page-project-details": PageProjectDetails;
        "page-projects": PageProjects;
        "page-school-chats-list": PageSchoolChatsList;
        "page-school-classes": PageSchoolClasses;
        "page-school-dashboard": PageSchoolDashboard;
        "page-school-dive-trips": PageSchoolDiveTrips;
        "page-school-members": PageSchoolMembers;
        "page-school-rentals": PageSchoolRentals;
        "page-school-warehouse": PageSchoolWarehouse;
        "page-service-center-details": PageServiceCenterDetails;
        "page-service-chats-list": PageServiceChatsList;
        "page-service-customers": PageServiceCustomers;
        "page-service-dashboard": PageServiceDashboard;
        "page-service-documents": PageServiceDocuments;
        "page-service-invoicing": PageServiceInvoicing;
        "page-service-payments": PageServicePayments;
        "page-service-servicing": PageServiceServicing;
        "page-service-warehouse": PageServiceWarehouse;
        "page-shape-details": PageShapeDetails;
        "page-shapes": PageShapes;
        "page-support": PageSupport;
        "page-team-manager": PageTeamManager;
        "page-trs-dashboard": PageTrsDashboard;
        "page-trs-user-settings": PageTrsUserSettings;
        "page-user-manager": PageUserManager;
        "page-user-plans": PageUserPlans;
        "page-user-settings": PageUserSettings;
        "popover-chat-participants": PopoverChatParticipants;
        "popover-datasheets-filter": PopoverDatasheetsFilter;
        "popover-edit-customer-owner": PopoverEditCustomerOwner;
        "popover-edit-translation": PopoverEditTranslation;
        "popover-find-oldcustomer": PopoverFindOldcustomer;
        "popover-gas": PopoverGas;
        "popover-gas-blender": PopoverGasBlender;
        "popover-level": PopoverLevel;
        "popover-media-loading": PopoverMediaLoading;
        "popover-media-uploader": PopoverMediaUploader;
        "popover-new-class-activity": PopoverNewClassActivity;
        "popover-new-dive-trip": PopoverNewDiveTrip;
        "popover-project-autofill": PopoverProjectAutofill;
        "popover-search-dive-site": PopoverSearchDiveSite;
        "popover-search-diving-course": PopoverSearchDivingCourse;
        "popover-search-user": PopoverSearchUser;
        "popover-select-date": PopoverSelectDate;
        "popover-select-search": PopoverSelectSearch;
        "popover-shapes-filter": PopoverShapesFilter;
        "popover-tank": PopoverTank;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-admin-advertising": LocalJSX.AppAdminAdvertising & JSXBase.HTMLAttributes<HTMLAppAdminAdvertisingElement>;
            "app-admin-chats": LocalJSX.AppAdminChats & JSXBase.HTMLAttributes<HTMLAppAdminChatsElement>;
            "app-admin-clients-list": LocalJSX.AppAdminClientsList & JSXBase.HTMLAttributes<HTMLAppAdminClientsListElement>;
            "app-admin-dive-trips": LocalJSX.AppAdminDiveTrips & JSXBase.HTMLAttributes<HTMLAppAdminDiveTripsElement>;
            "app-admin-diving-classes": LocalJSX.AppAdminDivingClasses & JSXBase.HTMLAttributes<HTMLAppAdminDivingClassesElement>;
            "app-admin-translations": LocalJSX.AppAdminTranslations & JSXBase.HTMLAttributes<HTMLAppAdminTranslationsElement>;
            "app-banner": LocalJSX.AppBanner & JSXBase.HTMLAttributes<HTMLAppBannerElement>;
            "app-calendar": LocalJSX.AppCalendar & JSXBase.HTMLAttributes<HTMLAppCalendarElement>;
            "app-chat": LocalJSX.AppChat & JSXBase.HTMLAttributes<HTMLAppChatElement>;
            "app-coordinates": LocalJSX.AppCoordinates & JSXBase.HTMLAttributes<HTMLAppCoordinatesElement>;
            "app-customer-plant-production": LocalJSX.AppCustomerPlantProduction & JSXBase.HTMLAttributes<HTMLAppCustomerPlantProductionElement>;
            "app-decoplanner-arpc": LocalJSX.AppDecoplannerArpc & JSXBase.HTMLAttributes<HTMLAppDecoplannerArpcElement>;
            "app-decoplanner-charts": LocalJSX.AppDecoplannerCharts & JSXBase.HTMLAttributes<HTMLAppDecoplannerChartsElement>;
            "app-decoplanner-gas": LocalJSX.AppDecoplannerGas & JSXBase.HTMLAttributes<HTMLAppDecoplannerGasElement>;
            "app-decoplanner-plan": LocalJSX.AppDecoplannerPlan & JSXBase.HTMLAttributes<HTMLAppDecoplannerPlanElement>;
            "app-decoplanner-profile": LocalJSX.AppDecoplannerProfile & JSXBase.HTMLAttributes<HTMLAppDecoplannerProfileElement>;
            "app-decoplanner-settings": LocalJSX.AppDecoplannerSettings & JSXBase.HTMLAttributes<HTMLAppDecoplannerSettingsElement>;
            "app-decoplanner-showplan": LocalJSX.AppDecoplannerShowplan & JSXBase.HTMLAttributes<HTMLAppDecoplannerShowplanElement>;
            "app-dive-class-bookings": LocalJSX.AppDiveClassBookings & JSXBase.HTMLAttributes<HTMLAppDiveClassBookingsElement>;
            "app-dive-course-activities": LocalJSX.AppDiveCourseActivities & JSXBase.HTMLAttributes<HTMLAppDiveCourseActivitiesElement>;
            "app-dive-course-card": LocalJSX.AppDiveCourseCard & JSXBase.HTMLAttributes<HTMLAppDiveCourseCardElement>;
            "app-dive-plan-card": LocalJSX.AppDivePlanCard & JSXBase.HTMLAttributes<HTMLAppDivePlanCardElement>;
            "app-dive-site-card": LocalJSX.AppDiveSiteCard & JSXBase.HTMLAttributes<HTMLAppDiveSiteCardElement>;
            "app-dive-trip-bookings": LocalJSX.AppDiveTripBookings & JSXBase.HTMLAttributes<HTMLAppDiveTripBookingsElement>;
            "app-dive-trip-card": LocalJSX.AppDiveTripCard & JSXBase.HTMLAttributes<HTMLAppDiveTripCardElement>;
            "app-diving-center-card": LocalJSX.AppDivingCenterCard & JSXBase.HTMLAttributes<HTMLAppDivingCenterCardElement>;
            "app-diving-class-schedule": LocalJSX.AppDivingClassSchedule & JSXBase.HTMLAttributes<HTMLAppDivingClassScheduleElement>;
            "app-dragdrop-file": LocalJSX.AppDragdropFile & JSXBase.HTMLAttributes<HTMLAppDragdropFileElement>;
            "app-eaf-questionnaire": LocalJSX.AppEafQuestionnaire & JSXBase.HTMLAttributes<HTMLAppEafQuestionnaireElement>;
            "app-form-item": LocalJSX.AppFormItem & JSXBase.HTMLAttributes<HTMLAppFormItemElement>;
            "app-geocode": LocalJSX.AppGeocode & JSXBase.HTMLAttributes<HTMLAppGeocodeElement>;
            "app-header-segment-toolbar": LocalJSX.AppHeaderSegmentToolbar & JSXBase.HTMLAttributes<HTMLAppHeaderSegmentToolbarElement>;
            "app-image-cache": LocalJSX.AppImageCache & JSXBase.HTMLAttributes<HTMLAppImageCacheElement>;
            "app-infinite-scroll": LocalJSX.AppInfiniteScroll & JSXBase.HTMLAttributes<HTMLAppInfiniteScrollElement>;
            "app-item-cover": LocalJSX.AppItemCover & JSXBase.HTMLAttributes<HTMLAppItemCoverElement>;
            "app-item-detail": LocalJSX.AppItemDetail & JSXBase.HTMLAttributes<HTMLAppItemDetailElement>;
            "app-language-picker": LocalJSX.AppLanguagePicker & JSXBase.HTMLAttributes<HTMLAppLanguagePickerElement>;
            "app-last-reviews": LocalJSX.AppLastReviews & JSXBase.HTMLAttributes<HTMLAppLastReviewsElement>;
            "app-location": LocalJSX.AppLocation & JSXBase.HTMLAttributes<HTMLAppLocationElement>;
            "app-map": LocalJSX.AppMap & JSXBase.HTMLAttributes<HTMLAppMapElement>;
            "app-map-icon": LocalJSX.AppMapIcon & JSXBase.HTMLAttributes<HTMLAppMapIconElement>;
            "app-map-popup": LocalJSX.AppMapPopup & JSXBase.HTMLAttributes<HTMLAppMapPopupElement>;
            "app-menu": LocalJSX.AppMenu & JSXBase.HTMLAttributes<HTMLAppMenuElement>;
            "app-modal-footer": LocalJSX.AppModalFooter & JSXBase.HTMLAttributes<HTMLAppModalFooterElement>;
            "app-multilanguage-text": LocalJSX.AppMultilanguageText & JSXBase.HTMLAttributes<HTMLAppMultilanguageTextElement>;
            "app-navbar": LocalJSX.AppNavbar & JSXBase.HTMLAttributes<HTMLAppNavbarElement>;
            "app-page-project-summary": LocalJSX.AppPageProjectSummary & JSXBase.HTMLAttributes<HTMLAppPageProjectSummaryElement>;
            "app-public-user": LocalJSX.AppPublicUser & JSXBase.HTMLAttributes<HTMLAppPublicUserElement>;
            "app-review-details": LocalJSX.AppReviewDetails & JSXBase.HTMLAttributes<HTMLAppReviewDetailsElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "app-search-filter": LocalJSX.AppSearchFilter & JSXBase.HTMLAttributes<HTMLAppSearchFilterElement>;
            "app-search-toolbar": LocalJSX.AppSearchToolbar & JSXBase.HTMLAttributes<HTMLAppSearchToolbarElement>;
            "app-searchbar": LocalJSX.AppSearchbar & JSXBase.HTMLAttributes<HTMLAppSearchbarElement>;
            "app-select-search": LocalJSX.AppSelectSearch & JSXBase.HTMLAttributes<HTMLAppSelectSearchElement>;
            "app-shrinking-header": LocalJSX.AppShrinkingHeader & JSXBase.HTMLAttributes<HTMLAppShrinkingHeaderElement>;
            "app-skeletons": LocalJSX.AppSkeletons & JSXBase.HTMLAttributes<HTMLAppSkeletonsElement>;
            "app-star-rating": LocalJSX.AppStarRating & JSXBase.HTMLAttributes<HTMLAppStarRatingElement>;
            "app-sticky-search": LocalJSX.AppStickySearch & JSXBase.HTMLAttributes<HTMLAppStickySearchElement>;
            "app-stripe-connect": LocalJSX.AppStripeConnect & JSXBase.HTMLAttributes<HTMLAppStripeConnectElement>;
            "app-stripe-pay": LocalJSX.AppStripePay & JSXBase.HTMLAttributes<HTMLAppStripePayElement>;
            "app-upload-cover": LocalJSX.AppUploadCover & JSXBase.HTMLAttributes<HTMLAppUploadCoverElement>;
            "app-upload-covers": LocalJSX.AppUploadCovers & JSXBase.HTMLAttributes<HTMLAppUploadCoversElement>;
            "app-user-avatar": LocalJSX.AppUserAvatar & JSXBase.HTMLAttributes<HTMLAppUserAvatarElement>;
            "app-user-cards": LocalJSX.AppUserCards & JSXBase.HTMLAttributes<HTMLAppUserCardsElement>;
            "app-user-configurations": LocalJSX.AppUserConfigurations & JSXBase.HTMLAttributes<HTMLAppUserConfigurationsElement>;
            "app-user-cover": LocalJSX.AppUserCover & JSXBase.HTMLAttributes<HTMLAppUserCoverElement>;
            "app-user-dive-communities": LocalJSX.AppUserDiveCommunities & JSXBase.HTMLAttributes<HTMLAppUserDiveCommunitiesElement>;
            "app-user-dive-plans": LocalJSX.AppUserDivePlans & JSXBase.HTMLAttributes<HTMLAppUserDivePlansElement>;
            "app-user-dive-sites": LocalJSX.AppUserDiveSites & JSXBase.HTMLAttributes<HTMLAppUserDiveSitesElement>;
            "app-user-diving-centers": LocalJSX.AppUserDivingCenters & JSXBase.HTMLAttributes<HTMLAppUserDivingCentersElement>;
            "app-user-diving-schools": LocalJSX.AppUserDivingSchools & JSXBase.HTMLAttributes<HTMLAppUserDivingSchoolsElement>;
            "app-user-licences": LocalJSX.AppUserLicences & JSXBase.HTMLAttributes<HTMLAppUserLicencesElement>;
            "app-user-manage-notifications": LocalJSX.AppUserManageNotifications & JSXBase.HTMLAttributes<HTMLAppUserManageNotificationsElement>;
            "app-user-reviews-list": LocalJSX.AppUserReviewsList & JSXBase.HTMLAttributes<HTMLAppUserReviewsListElement>;
            "app-user-service-centers": LocalJSX.AppUserServiceCenters & JSXBase.HTMLAttributes<HTMLAppUserServiceCentersElement>;
            "app-user-tanks": LocalJSX.AppUserTanks & JSXBase.HTMLAttributes<HTMLAppUserTanksElement>;
            "app-user-translation": LocalJSX.AppUserTranslation & JSXBase.HTMLAttributes<HTMLAppUserTranslationElement>;
            "app-users-list": LocalJSX.AppUsersList & JSXBase.HTMLAttributes<HTMLAppUsersListElement>;
            "modal-contact-update": LocalJSX.ModalContactUpdate & JSXBase.HTMLAttributes<HTMLModalContactUpdateElement>;
            "modal-customer-update": LocalJSX.ModalCustomerUpdate & JSXBase.HTMLAttributes<HTMLModalCustomerUpdateElement>;
            "modal-datasheet-category": LocalJSX.ModalDatasheetCategory & JSXBase.HTMLAttributes<HTMLModalDatasheetCategoryElement>;
            "modal-datasheet-family": LocalJSX.ModalDatasheetFamily & JSXBase.HTMLAttributes<HTMLModalDatasheetFamilyElement>;
            "modal-datasheet-majorfamily": LocalJSX.ModalDatasheetMajorfamily & JSXBase.HTMLAttributes<HTMLModalDatasheetMajorfamilyElement>;
            "modal-datasheet-propertyname": LocalJSX.ModalDatasheetPropertyname & JSXBase.HTMLAttributes<HTMLModalDatasheetPropertynameElement>;
            "modal-datasheet-propertytype": LocalJSX.ModalDatasheetPropertytype & JSXBase.HTMLAttributes<HTMLModalDatasheetPropertytypeElement>;
            "modal-datasheet-qualitycolorcode": LocalJSX.ModalDatasheetQualitycolorcode & JSXBase.HTMLAttributes<HTMLModalDatasheetQualitycolorcodeElement>;
            "modal-datasheet-update": LocalJSX.ModalDatasheetUpdate & JSXBase.HTMLAttributes<HTMLModalDatasheetUpdateElement>;
            "modal-dive-card": LocalJSX.ModalDiveCard & JSXBase.HTMLAttributes<HTMLModalDiveCardElement>;
            "modal-dive-certification-update": LocalJSX.ModalDiveCertificationUpdate & JSXBase.HTMLAttributes<HTMLModalDiveCertificationUpdateElement>;
            "modal-dive-community-update": LocalJSX.ModalDiveCommunityUpdate & JSXBase.HTMLAttributes<HTMLModalDiveCommunityUpdateElement>;
            "modal-dive-configuration": LocalJSX.ModalDiveConfiguration & JSXBase.HTMLAttributes<HTMLModalDiveConfigurationElement>;
            "modal-dive-planner": LocalJSX.ModalDivePlanner & JSXBase.HTMLAttributes<HTMLModalDivePlannerElement>;
            "modal-dive-site-update": LocalJSX.ModalDiveSiteUpdate & JSXBase.HTMLAttributes<HTMLModalDiveSiteUpdateElement>;
            "modal-dive-template": LocalJSX.ModalDiveTemplate & JSXBase.HTMLAttributes<HTMLModalDiveTemplateElement>;
            "modal-dive-trip-update": LocalJSX.ModalDiveTripUpdate & JSXBase.HTMLAttributes<HTMLModalDiveTripUpdateElement>;
            "modal-diving-center-update": LocalJSX.ModalDivingCenterUpdate & JSXBase.HTMLAttributes<HTMLModalDivingCenterUpdateElement>;
            "modal-diving-class-update": LocalJSX.ModalDivingClassUpdate & JSXBase.HTMLAttributes<HTMLModalDivingClassUpdateElement>;
            "modal-diving-school-update": LocalJSX.ModalDivingSchoolUpdate & JSXBase.HTMLAttributes<HTMLModalDivingSchoolUpdateElement>;
            "modal-edit-user-roles": LocalJSX.ModalEditUserRoles & JSXBase.HTMLAttributes<HTMLModalEditUserRolesElement>;
            "modal-operating-conditions-questionnaire": LocalJSX.ModalOperatingConditionsQuestionnaire & JSXBase.HTMLAttributes<HTMLModalOperatingConditionsQuestionnaireElement>;
            "modal-project-applicationunit": LocalJSX.ModalProjectApplicationunit & JSXBase.HTMLAttributes<HTMLModalProjectApplicationunitElement>;
            "modal-project-bricksallocationarea": LocalJSX.ModalProjectBricksallocationarea & JSXBase.HTMLAttributes<HTMLModalProjectBricksallocationareaElement>;
            "modal-project-quantityunit": LocalJSX.ModalProjectQuantityunit & JSXBase.HTMLAttributes<HTMLModalProjectQuantityunitElement>;
            "modal-project-update": LocalJSX.ModalProjectUpdate & JSXBase.HTMLAttributes<HTMLModalProjectUpdateElement>;
            "modal-search-list": LocalJSX.ModalSearchList & JSXBase.HTMLAttributes<HTMLModalSearchListElement>;
            "modal-service-center-update": LocalJSX.ModalServiceCenterUpdate & JSXBase.HTMLAttributes<HTMLModalServiceCenterUpdateElement>;
            "modal-shape-type": LocalJSX.ModalShapeType & JSXBase.HTMLAttributes<HTMLModalShapeTypeElement>;
            "modal-shape-update": LocalJSX.ModalShapeUpdate & JSXBase.HTMLAttributes<HTMLModalShapeUpdateElement>;
            "modal-tank-configuration": LocalJSX.ModalTankConfiguration & JSXBase.HTMLAttributes<HTMLModalTankConfigurationElement>;
            "modal-upload-image": LocalJSX.ModalUploadImage & JSXBase.HTMLAttributes<HTMLModalUploadImageElement>;
            "modal-user-details": LocalJSX.ModalUserDetails & JSXBase.HTMLAttributes<HTMLModalUserDetailsElement>;
            "modal-user-plans-update": LocalJSX.ModalUserPlansUpdate & JSXBase.HTMLAttributes<HTMLModalUserPlansUpdateElement>;
            "modal-user-teams-update": LocalJSX.ModalUserTeamsUpdate & JSXBase.HTMLAttributes<HTMLModalUserTeamsUpdateElement>;
            "modal-user-update": LocalJSX.ModalUserUpdate & JSXBase.HTMLAttributes<HTMLModalUserUpdateElement>;
            "my-transl": LocalJSX.MyTransl & JSXBase.HTMLAttributes<HTMLMyTranslElement>;
            "page-404": LocalJSX.Page404 & JSXBase.HTMLAttributes<HTMLPage404Element>;
            "page-admin-agencies": LocalJSX.PageAdminAgencies & JSXBase.HTMLAttributes<HTMLPageAdminAgenciesElement>;
            "page-admin-translations": LocalJSX.PageAdminTranslations & JSXBase.HTMLAttributes<HTMLPageAdminTranslationsElement>;
            "page-chat": LocalJSX.PageChat & JSXBase.HTMLAttributes<HTMLPageChatElement>;
            "page-chats-list": LocalJSX.PageChatsList & JSXBase.HTMLAttributes<HTMLPageChatsListElement>;
            "page-client-details": LocalJSX.PageClientDetails & JSXBase.HTMLAttributes<HTMLPageClientDetailsElement>;
            "page-community-chats-list": LocalJSX.PageCommunityChatsList & JSXBase.HTMLAttributes<HTMLPageCommunityChatsListElement>;
            "page-community-dashboard": LocalJSX.PageCommunityDashboard & JSXBase.HTMLAttributes<HTMLPageCommunityDashboardElement>;
            "page-community-dive-trips": LocalJSX.PageCommunityDiveTrips & JSXBase.HTMLAttributes<HTMLPageCommunityDiveTripsElement>;
            "page-community-members": LocalJSX.PageCommunityMembers & JSXBase.HTMLAttributes<HTMLPageCommunityMembersElement>;
            "page-contact-details": LocalJSX.PageContactDetails & JSXBase.HTMLAttributes<HTMLPageContactDetailsElement>;
            "page-contacts": LocalJSX.PageContacts & JSXBase.HTMLAttributes<HTMLPageContactsElement>;
            "page-customer-details": LocalJSX.PageCustomerDetails & JSXBase.HTMLAttributes<HTMLPageCustomerDetailsElement>;
            "page-customers": LocalJSX.PageCustomers & JSXBase.HTMLAttributes<HTMLPageCustomersElement>;
            "page-dashboard": LocalJSX.PageDashboard & JSXBase.HTMLAttributes<HTMLPageDashboardElement>;
            "page-datasheet-details": LocalJSX.PageDatasheetDetails & JSXBase.HTMLAttributes<HTMLPageDatasheetDetailsElement>;
            "page-datasheets": LocalJSX.PageDatasheets & JSXBase.HTMLAttributes<HTMLPageDatasheetsElement>;
            "page-dive-community-details": LocalJSX.PageDiveCommunityDetails & JSXBase.HTMLAttributes<HTMLPageDiveCommunityDetailsElement>;
            "page-dive-plan-details": LocalJSX.PageDivePlanDetails & JSXBase.HTMLAttributes<HTMLPageDivePlanDetailsElement>;
            "page-dive-planner": LocalJSX.PageDivePlanner & JSXBase.HTMLAttributes<HTMLPageDivePlannerElement>;
            "page-dive-site-details": LocalJSX.PageDiveSiteDetails & JSXBase.HTMLAttributes<HTMLPageDiveSiteDetailsElement>;
            "page-dive-trip-details": LocalJSX.PageDiveTripDetails & JSXBase.HTMLAttributes<HTMLPageDiveTripDetailsElement>;
            "page-dive-trips": LocalJSX.PageDiveTrips & JSXBase.HTMLAttributes<HTMLPageDiveTripsElement>;
            "page-diving-center-details": LocalJSX.PageDivingCenterDetails & JSXBase.HTMLAttributes<HTMLPageDivingCenterDetailsElement>;
            "page-diving-chats-list": LocalJSX.PageDivingChatsList & JSXBase.HTMLAttributes<HTMLPageDivingChatsListElement>;
            "page-diving-class-details": LocalJSX.PageDivingClassDetails & JSXBase.HTMLAttributes<HTMLPageDivingClassDetailsElement>;
            "page-diving-classes": LocalJSX.PageDivingClasses & JSXBase.HTMLAttributes<HTMLPageDivingClassesElement>;
            "page-diving-customers": LocalJSX.PageDivingCustomers & JSXBase.HTMLAttributes<HTMLPageDivingCustomersElement>;
            "page-diving-dashboard": LocalJSX.PageDivingDashboard & JSXBase.HTMLAttributes<HTMLPageDivingDashboardElement>;
            "page-diving-dive-trips": LocalJSX.PageDivingDiveTrips & JSXBase.HTMLAttributes<HTMLPageDivingDiveTripsElement>;
            "page-diving-documents": LocalJSX.PageDivingDocuments & JSXBase.HTMLAttributes<HTMLPageDivingDocumentsElement>;
            "page-diving-invoicing": LocalJSX.PageDivingInvoicing & JSXBase.HTMLAttributes<HTMLPageDivingInvoicingElement>;
            "page-diving-payments": LocalJSX.PageDivingPayments & JSXBase.HTMLAttributes<HTMLPageDivingPaymentsElement>;
            "page-diving-rentals": LocalJSX.PageDivingRentals & JSXBase.HTMLAttributes<HTMLPageDivingRentalsElement>;
            "page-diving-reports": LocalJSX.PageDivingReports & JSXBase.HTMLAttributes<HTMLPageDivingReportsElement>;
            "page-diving-school-details": LocalJSX.PageDivingSchoolDetails & JSXBase.HTMLAttributes<HTMLPageDivingSchoolDetailsElement>;
            "page-diving-warehouse": LocalJSX.PageDivingWarehouse & JSXBase.HTMLAttributes<HTMLPageDivingWarehouseElement>;
            "page-gas-blender": LocalJSX.PageGasBlender & JSXBase.HTMLAttributes<HTMLPageGasBlenderElement>;
            "page-gue-map": LocalJSX.PageGueMap & JSXBase.HTMLAttributes<HTMLPageGueMapElement>;
            "page-loading": LocalJSX.PageLoading & JSXBase.HTMLAttributes<HTMLPageLoadingElement>;
            "page-log-book": LocalJSX.PageLogBook & JSXBase.HTMLAttributes<HTMLPageLogBookElement>;
            "page-login": LocalJSX.PageLogin & JSXBase.HTMLAttributes<HTMLPageLoginElement>;
            "page-lostpsw": LocalJSX.PageLostpsw & JSXBase.HTMLAttributes<HTMLPageLostpswElement>;
            "page-map": LocalJSX.PageMap & JSXBase.HTMLAttributes<HTMLPageMapElement>;
            "page-project-details": LocalJSX.PageProjectDetails & JSXBase.HTMLAttributes<HTMLPageProjectDetailsElement>;
            "page-projects": LocalJSX.PageProjects & JSXBase.HTMLAttributes<HTMLPageProjectsElement>;
            "page-school-chats-list": LocalJSX.PageSchoolChatsList & JSXBase.HTMLAttributes<HTMLPageSchoolChatsListElement>;
            "page-school-classes": LocalJSX.PageSchoolClasses & JSXBase.HTMLAttributes<HTMLPageSchoolClassesElement>;
            "page-school-dashboard": LocalJSX.PageSchoolDashboard & JSXBase.HTMLAttributes<HTMLPageSchoolDashboardElement>;
            "page-school-dive-trips": LocalJSX.PageSchoolDiveTrips & JSXBase.HTMLAttributes<HTMLPageSchoolDiveTripsElement>;
            "page-school-members": LocalJSX.PageSchoolMembers & JSXBase.HTMLAttributes<HTMLPageSchoolMembersElement>;
            "page-school-rentals": LocalJSX.PageSchoolRentals & JSXBase.HTMLAttributes<HTMLPageSchoolRentalsElement>;
            "page-school-warehouse": LocalJSX.PageSchoolWarehouse & JSXBase.HTMLAttributes<HTMLPageSchoolWarehouseElement>;
            "page-service-center-details": LocalJSX.PageServiceCenterDetails & JSXBase.HTMLAttributes<HTMLPageServiceCenterDetailsElement>;
            "page-service-chats-list": LocalJSX.PageServiceChatsList & JSXBase.HTMLAttributes<HTMLPageServiceChatsListElement>;
            "page-service-customers": LocalJSX.PageServiceCustomers & JSXBase.HTMLAttributes<HTMLPageServiceCustomersElement>;
            "page-service-dashboard": LocalJSX.PageServiceDashboard & JSXBase.HTMLAttributes<HTMLPageServiceDashboardElement>;
            "page-service-documents": LocalJSX.PageServiceDocuments & JSXBase.HTMLAttributes<HTMLPageServiceDocumentsElement>;
            "page-service-invoicing": LocalJSX.PageServiceInvoicing & JSXBase.HTMLAttributes<HTMLPageServiceInvoicingElement>;
            "page-service-payments": LocalJSX.PageServicePayments & JSXBase.HTMLAttributes<HTMLPageServicePaymentsElement>;
            "page-service-servicing": LocalJSX.PageServiceServicing & JSXBase.HTMLAttributes<HTMLPageServiceServicingElement>;
            "page-service-warehouse": LocalJSX.PageServiceWarehouse & JSXBase.HTMLAttributes<HTMLPageServiceWarehouseElement>;
            "page-shape-details": LocalJSX.PageShapeDetails & JSXBase.HTMLAttributes<HTMLPageShapeDetailsElement>;
            "page-shapes": LocalJSX.PageShapes & JSXBase.HTMLAttributes<HTMLPageShapesElement>;
            "page-support": LocalJSX.PageSupport & JSXBase.HTMLAttributes<HTMLPageSupportElement>;
            "page-team-manager": LocalJSX.PageTeamManager & JSXBase.HTMLAttributes<HTMLPageTeamManagerElement>;
            "page-trs-dashboard": LocalJSX.PageTrsDashboard & JSXBase.HTMLAttributes<HTMLPageTrsDashboardElement>;
            "page-trs-user-settings": LocalJSX.PageTrsUserSettings & JSXBase.HTMLAttributes<HTMLPageTrsUserSettingsElement>;
            "page-user-manager": LocalJSX.PageUserManager & JSXBase.HTMLAttributes<HTMLPageUserManagerElement>;
            "page-user-plans": LocalJSX.PageUserPlans & JSXBase.HTMLAttributes<HTMLPageUserPlansElement>;
            "page-user-settings": LocalJSX.PageUserSettings & JSXBase.HTMLAttributes<HTMLPageUserSettingsElement>;
            "popover-chat-participants": LocalJSX.PopoverChatParticipants & JSXBase.HTMLAttributes<HTMLPopoverChatParticipantsElement>;
            "popover-datasheets-filter": LocalJSX.PopoverDatasheetsFilter & JSXBase.HTMLAttributes<HTMLPopoverDatasheetsFilterElement>;
            "popover-edit-customer-owner": LocalJSX.PopoverEditCustomerOwner & JSXBase.HTMLAttributes<HTMLPopoverEditCustomerOwnerElement>;
            "popover-edit-translation": LocalJSX.PopoverEditTranslation & JSXBase.HTMLAttributes<HTMLPopoverEditTranslationElement>;
            "popover-find-oldcustomer": LocalJSX.PopoverFindOldcustomer & JSXBase.HTMLAttributes<HTMLPopoverFindOldcustomerElement>;
            "popover-gas": LocalJSX.PopoverGas & JSXBase.HTMLAttributes<HTMLPopoverGasElement>;
            "popover-gas-blender": LocalJSX.PopoverGasBlender & JSXBase.HTMLAttributes<HTMLPopoverGasBlenderElement>;
            "popover-level": LocalJSX.PopoverLevel & JSXBase.HTMLAttributes<HTMLPopoverLevelElement>;
            "popover-media-loading": LocalJSX.PopoverMediaLoading & JSXBase.HTMLAttributes<HTMLPopoverMediaLoadingElement>;
            "popover-media-uploader": LocalJSX.PopoverMediaUploader & JSXBase.HTMLAttributes<HTMLPopoverMediaUploaderElement>;
            "popover-new-class-activity": LocalJSX.PopoverNewClassActivity & JSXBase.HTMLAttributes<HTMLPopoverNewClassActivityElement>;
            "popover-new-dive-trip": LocalJSX.PopoverNewDiveTrip & JSXBase.HTMLAttributes<HTMLPopoverNewDiveTripElement>;
            "popover-project-autofill": LocalJSX.PopoverProjectAutofill & JSXBase.HTMLAttributes<HTMLPopoverProjectAutofillElement>;
            "popover-search-dive-site": LocalJSX.PopoverSearchDiveSite & JSXBase.HTMLAttributes<HTMLPopoverSearchDiveSiteElement>;
            "popover-search-diving-course": LocalJSX.PopoverSearchDivingCourse & JSXBase.HTMLAttributes<HTMLPopoverSearchDivingCourseElement>;
            "popover-search-user": LocalJSX.PopoverSearchUser & JSXBase.HTMLAttributes<HTMLPopoverSearchUserElement>;
            "popover-select-date": LocalJSX.PopoverSelectDate & JSXBase.HTMLAttributes<HTMLPopoverSelectDateElement>;
            "popover-select-search": LocalJSX.PopoverSelectSearch & JSXBase.HTMLAttributes<HTMLPopoverSelectSearchElement>;
            "popover-shapes-filter": LocalJSX.PopoverShapesFilter & JSXBase.HTMLAttributes<HTMLPopoverShapesFilterElement>;
            "popover-tank": LocalJSX.PopoverTank & JSXBase.HTMLAttributes<HTMLPopoverTankElement>;
        }
    }
}
