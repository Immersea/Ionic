rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    //COMMON

    //System and Advertising can be updated only by functions or SuperAdmin
    match /system/{documents=**} {
      allow read: if true
      allow write: if get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["superAdmin"])
    }

    // temp translations allowed to everybody
    match /translations/{documentId} {
      // Allow write access only if the documentId starts with "tempTranslation"
      allow write: if request.auth != null && (documentId == ("tempTranslation") || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["translator"]));
      allow read: if true;  // This allows everyone to read the documents
    }

    // translations write only to translators
    match /translations/{documents=**} {
      allow read: if true
      allow write: if false;//
    }

// user profiles can be updated and read only by user
    match /userProfiles/{userId}/{documents=**} {
      allow read, write: if request.auth.uid == userId;
    }
    // user settings can be updated and read only by user
    match /userSettings/{userId}/{documents=**} {
      allow read, write: if request.auth.uid == userId;
    }
    // user roles can be updated only by functions or SuperAdmin and read only by user
    match /userRoles/{userId}/{documents=**} {
      allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["superAdmin"]) ;
      allow write: if get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["superAdmin"])
    }
    //public user profiles can be updated only by functions and read only bu atuthenticated users
    match /userPublicProfiles/{userId}/{documents=**} {
      allow read: if request.auth!=null;
      allow write: if false;
    }
    // chat messages can be updated only by chat users --- TBD
    match /chats/{documents=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }

    //customers/locations can be read only by auth users, created or deleted only by owner, dbAdmin or superAdmin, edited by editors
    match /customers/{customerId}/{documents=**} {
      allow read: if request.auth!=null;
      allow create: if request.resource.data.users[request.auth.uid].hasAny(["owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["customerDBAdmin","superAdmin"])  ;
      allow update: if resource.data.users[request.auth.uid].hasAny(["editor","owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["customerDBAdmin","superAdmin"]) ;//update only by exisiting editors or owners
      allow delete: if resource.data.users[request.auth.uid].hasAny(["owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["customerDBAdmin","superAdmin"]);//delete only by existing document owner
    }

    //plans can be read only by auth users, created or deleted only by owner, edited by editors
    match /userPlans/{userId}/{documents=**} {
      allow read: if request.auth!=null;
      allow create: if request.resource.data.users[request.auth.uid].hasAny(["owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["refraTeamAdmin","electTeamAdmin","rawTeamAdmin","engTeamAdmin","superAdmin"]) ;
      allow update: if resource.data.users[request.auth.uid].hasAny(["editor","owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["refraTeamAdmin","electTeamAdmin","rawTeamAdmin","engTeamAdmin","superAdmin"]) ;//update only by exisiting editors or owners
      allow delete: if resource.data.users[request.auth.uid].hasAny(["owner"]) ;//delete only by existing document owner
    }

    //shapes can be read only by auth users, created or deleted only by owner, dbAdmin or superAdmin, edited by editors
    match /shapes/{shapeId}/{documents=**} {
      allow read: if request.auth!=null;
      allow create: if request.resource.data.users[request.auth.uid].hasAny(["owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["refraDBAdmin","superAdmin"])  ;
      allow update: if resource.data.users[request.auth.uid].hasAny(["editor","owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["refraDBAdmin","superAdmin"]) ;
      allow delete: if resource.data.users[request.auth.uid].hasAny(["owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["refraDBAdmin","superAdmin"]);//delete only by existing document owner
    }
    //DATASHEETS can be read only by auth users, created or deleted only by owner, dbAdmin or superAdmin, edited by editors
    match /datasheets/{datasheetId}/{documents=**} {
      allow read: if request.auth!=null;
      allow create: if request.resource.data.users[request.auth.uid].hasAny(["owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["refraDBAdmin","superAdmin"])  ;
      allow update: if resource.data.users[request.auth.uid].hasAny(["editor","owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["refraDBAdmin","superAdmin"]) ;
      allow delete: if resource.data.users[request.auth.uid].hasAny(["owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["refraDBAdmin","superAdmin"]);//delete only by existing document owner
    }
    //PROJECTS can be read only by auth users, created or deleted only by owner, dbAdmin or superAdmin, edited by editors
    match /projects/{projectId}/{documents=**} {
      allow read: if request.auth!=null;
      allow create: if request.resource.data.users[request.auth.uid].hasAny(["owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["refraDBAdmin","superAdmin"])  ;
      allow update: if resource.data.users[request.auth.uid].hasAny(["editor","owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["refraDBAdmin","superAdmin"]) ;
      allow delete: if resource.data.users[request.auth.uid].hasAny(["owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["refraDBAdmin","superAdmin"]);//delete only by existing document owner
    }
    //PROJECTS can be read only by auth users, created or deleted only by owner, dbAdmin or superAdmin, edited by editors
    match /contacts/{contactId}/{documents=**} {
      allow read: if request.auth!=null;
      allow create: if request.resource.data.users[request.auth.uid].hasAny(["owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["customerDBAdmin","superAdmin"])  ;
      allow update: if resource.data.users[request.auth.uid].hasAny(["editor","owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["customerDBAdmin","superAdmin"]) ;//update only by exisiting editors or owners
      allow delete: if resource.data.users[request.auth.uid].hasAny(["owner"]) || get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["customerDBAdmin","superAdmin"]);//delete only by existing document owner
    }
   
    //generated map Data
    match /mapData/{documents=**} {
      allow read: if request.auth!=null;
      allow write: if get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.roles.hasAny(["superAdmin"]);
    }

    //QUERIES
    //allow collection group access for queries
    match /{path=**}/userPublicProfiles/{id} {
      allow read: if true;
      allow write: if false;
    }

    //BLOCK ALL OTHER DOCUMENTS
    match /{document=**} {
      allow read:  if false;
      allow write:  if false;
    }
  }
}